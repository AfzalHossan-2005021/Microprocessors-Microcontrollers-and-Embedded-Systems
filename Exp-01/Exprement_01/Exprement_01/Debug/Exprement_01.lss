
Exprement_01.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ca  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000011e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000011e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000150  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000070d  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005de  00000000  00000000  000008d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002ee  00000000  00000000  00000eb7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  000011a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000366  00000000  00000000  0000120c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000f2  00000000  00000000  00001572  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001664  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 3d 00 	call	0x7a	; 0x7a <main>
  64:	0c 94 63 00 	jmp	0xc6	; 0xc6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <initialize>:
	return (PINB & (1 << PB1));
}

// Function to update the LEDs based on the counter value
void updateLEDs(int counter) {
	PORTA = counter & 0x0F;
  6c:	8a b3       	in	r24, 0x1a	; 26
  6e:	8f 60       	ori	r24, 0x0F	; 15
  70:	8a bb       	out	0x1a, r24	; 26
  72:	87 b3       	in	r24, 0x17	; 23
  74:	8c 7f       	andi	r24, 0xFC	; 252
  76:	87 bb       	out	0x17, r24	; 23
  78:	08 95       	ret

0000007a <main>:
}

int main() {
	initialize();
  7a:	0e 94 36 00 	call	0x6c	; 0x6c <initialize>

	unsigned int counter = 0;
	PORTA = 0x00;
  7e:	1b ba       	out	0x1b, r1	; 27
}

int main() {
	initialize();

	unsigned int counter = 0;
  80:	80 e0       	ldi	r24, 0x00	; 0
  82:	90 e0       	ldi	r25, 0x00	; 0
	PORTA = 0x00;

	while (1) {
		// Check if the up button is pressed
		if (isUpButtonPressed()) {
  84:	b0 9b       	sbis	0x16, 0	; 22
  86:	0e c0       	rjmp	.+28     	; 0xa4 <main+0x2a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  88:	e7 ea       	ldi	r30, 0xA7	; 167
  8a:	f1 e6       	ldi	r31, 0x61	; 97
  8c:	31 97       	sbiw	r30, 0x01	; 1
  8e:	f1 f7       	brne	.-4      	; 0x8c <main+0x12>
  90:	00 c0       	rjmp	.+0      	; 0x92 <main+0x18>
  92:	00 00       	nop
			_delay_ms(100);             // Debounce delay
			if (isUpButtonPressed()) {
  94:	b0 9b       	sbis	0x16, 0	; 22
  96:	06 c0       	rjmp	.+12     	; 0xa4 <main+0x2a>
				counter+=4;
  98:	04 96       	adiw	r24, 0x04	; 4
	return (PINB & (1 << PB1));
}

// Function to update the LEDs based on the counter value
void updateLEDs(int counter) {
	PORTA = counter & 0x0F;
  9a:	28 2f       	mov	r18, r24
  9c:	2f 70       	andi	r18, 0x0F	; 15
  9e:	2b bb       	out	0x1b, r18	; 27
		if (isUpButtonPressed()) {
			_delay_ms(100);             // Debounce delay
			if (isUpButtonPressed()) {
				counter+=4;
				updateLEDs(counter);
				while (isUpButtonPressed());  // Wait until the button is released
  a0:	b0 99       	sbic	0x16, 0	; 22
  a2:	fe cf       	rjmp	.-4      	; 0xa0 <main+0x26>
			}
		}

		// Check if the down button is pressed
		if (isDownButtonPressed()) {
  a4:	b1 9b       	sbis	0x16, 1	; 22
  a6:	ee cf       	rjmp	.-36     	; 0x84 <main+0xa>
  a8:	e7 ea       	ldi	r30, 0xA7	; 167
  aa:	f1 e6       	ldi	r31, 0x61	; 97
  ac:	31 97       	sbiw	r30, 0x01	; 1
  ae:	f1 f7       	brne	.-4      	; 0xac <main+0x32>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <main+0x38>
  b2:	00 00       	nop
			_delay_ms(100);  // Debounce delay
			if (isDownButtonPressed()) {
  b4:	b1 9b       	sbis	0x16, 1	; 22
  b6:	e6 cf       	rjmp	.-52     	; 0x84 <main+0xa>
				counter-= 4;
  b8:	04 97       	sbiw	r24, 0x04	; 4
	return (PINB & (1 << PB1));
}

// Function to update the LEDs based on the counter value
void updateLEDs(int counter) {
	PORTA = counter & 0x0F;
  ba:	28 2f       	mov	r18, r24
  bc:	2f 70       	andi	r18, 0x0F	; 15
  be:	2b bb       	out	0x1b, r18	; 27
		if (isDownButtonPressed()) {
			_delay_ms(100);  // Debounce delay
			if (isDownButtonPressed()) {
				counter-= 4;
				updateLEDs(counter);
				while (isDownButtonPressed());  // Wait until the button is released
  c0:	b1 99       	sbic	0x16, 1	; 22
  c2:	fe cf       	rjmp	.-4      	; 0xc0 <main+0x46>
  c4:	df cf       	rjmp	.-66     	; 0x84 <main+0xa>

000000c6 <_exit>:
  c6:	f8 94       	cli

000000c8 <__stop_program>:
  c8:	ff cf       	rjmp	.-2      	; 0xc8 <__stop_program>
