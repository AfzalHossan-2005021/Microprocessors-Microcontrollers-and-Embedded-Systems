
u8g2_demo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003598  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000138  00800060  00003598  0000362c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000049c  00800198  00800198  00003764  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003764  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003794  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00002ca0  00000000  00000000  000037d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0005c92d  00000000  00000000  00006470  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002c80  00000000  00000000  00062d9d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00010393  00000000  00000000  00065a1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000117d4  00000000  00000000  00075db0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000151bd  00000000  00000000  00087584  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0006ebd4  00000000  00000000  0009c741  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00002c60  00000000  00000000  0010b315  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 90 0b 	jmp	0x1720	; 0x1720 <__ctors_end>
       4:	0c 94 ad 0b 	jmp	0x175a	; 0x175a <__bad_interrupt>
       8:	0c 94 ad 0b 	jmp	0x175a	; 0x175a <__bad_interrupt>
       c:	0c 94 ad 0b 	jmp	0x175a	; 0x175a <__bad_interrupt>
      10:	0c 94 ad 0b 	jmp	0x175a	; 0x175a <__bad_interrupt>
      14:	0c 94 ad 0b 	jmp	0x175a	; 0x175a <__bad_interrupt>
      18:	0c 94 ad 0b 	jmp	0x175a	; 0x175a <__bad_interrupt>
      1c:	0c 94 a5 17 	jmp	0x2f4a	; 0x2f4a <__vector_7>
      20:	0c 94 ad 0b 	jmp	0x175a	; 0x175a <__bad_interrupt>
      24:	0c 94 ad 0b 	jmp	0x175a	; 0x175a <__bad_interrupt>
      28:	0c 94 ad 0b 	jmp	0x175a	; 0x175a <__bad_interrupt>
      2c:	0c 94 ad 0b 	jmp	0x175a	; 0x175a <__bad_interrupt>
      30:	0c 94 ad 0b 	jmp	0x175a	; 0x175a <__bad_interrupt>
      34:	0c 94 ad 0b 	jmp	0x175a	; 0x175a <__bad_interrupt>
      38:	0c 94 ad 0b 	jmp	0x175a	; 0x175a <__bad_interrupt>
      3c:	0c 94 ad 0b 	jmp	0x175a	; 0x175a <__bad_interrupt>
      40:	0c 94 ad 0b 	jmp	0x175a	; 0x175a <__bad_interrupt>
      44:	0c 94 ad 0b 	jmp	0x175a	; 0x175a <__bad_interrupt>
      48:	0c 94 ad 0b 	jmp	0x175a	; 0x175a <__bad_interrupt>
      4c:	0c 94 ad 0b 	jmp	0x175a	; 0x175a <__bad_interrupt>
      50:	0c 94 ad 0b 	jmp	0x175a	; 0x175a <__bad_interrupt>

00000054 <__trampolines_end>:
      54:	bf 00       	.word	0x00bf	; ????
      56:	03 03       	mulsu	r16, r19
      58:	04 05       	cpc	r16, r4
      5a:	03 05       	cpc	r16, r3
      5c:	06 0f       	add	r16, r22
      5e:	14 ff       	sbrs	r17, 4
      60:	fc 0c       	add	r15, r12
      62:	fc 0c       	add	r15, r12
      64:	fd 01       	movw	r30, r26
      66:	e6 04       	cpc	r14, r6
      68:	18 0c       	add	r1, r8
      6a:	ae 20       	and	r10, r14
      6c:	05 00       	.word	0x0005	; ????
      6e:	18 4b       	sbci	r17, 0xB8	; 184
      70:	21 09       	sbc	r18, r1
      72:	c2 0c       	add	r12, r2
      74:	4d 1c       	adc	r4, r13
      76:	2c 69       	ori	r18, 0x9C	; 156
      78:	04 22       	and	r0, r20
      7a:	0a 45       	sbci	r16, 0x5A	; 90
      7c:	8a 51       	subi	r24, 0x1A	; 26
      7e:	48 58       	subi	r20, 0x88	; 136
      80:	24 a1       	ldd	r18, Z+36	; 0x24
      82:	00 23       	and	r16, r16
      84:	1b c9       	rjmp	.-3530   	; 0xfffff2bc <__eeprom_end+0xff7ef2bc>
      86:	08 d3       	rcall	.+1552   	; 0x698 <__EEPROM_REGION_LENGTH__+0x298>
      88:	49 84       	ldd	r4, Y+9	; 0x09
      8a:	12 a1       	ldd	r17, Z+34	; 0x22
      8c:	44 74       	andi	r20, 0x44	; 68
      8e:	88 1c       	adc	r8, r8
      90:	42 12       	cpse	r4, r18
      92:	a1 44       	sbci	r26, 0x41	; 65
      94:	74 88       	ldd	r7, Z+20	; 0x14
      96:	1c 42       	sbci	r17, 0x2C	; 44
      98:	12 a1       	ldd	r17, Z+34	; 0x22
      9a:	44 28       	or	r4, r4
      9c:	91 01       	movw	r18, r2
      9e:	24 14       	cp	r2, r4
      a0:	e7 fa       	bst	r14, 7
      a2:	d2 05       	cpc	r29, r2
      a4:	2b 07       	cpc	r18, r27
      a6:	49 84       	ldd	r4, Y+9	; 0x09
      a8:	12 23       	and	r17, r18
      aa:	72 8b       	std	Z+18, r23	; 0x12
      ac:	50 22       	and	r5, r16
      ae:	07 49       	sbci	r16, 0x97	; 151
      b0:	31 06       	cpc	r3, r17
      b2:	25 1f       	adc	r18, r21
      b4:	cd 08       	sbc	r12, r13
      b6:	5d 49       	sbci	r21, 0x9D	; 157
      b8:	83 b4       	in	r8, 0x23	; 35
      ba:	a0 48       	sbci	r26, 0x80	; 128
      bc:	14 14       	cp	r1, r4
      be:	49 c2       	rjmp	.+1170   	; 0x552 <__EEPROM_REGION_LENGTH__+0x152>
      c0:	a4 b8       	out	0x04, r10	; 4
      c2:	28 0e       	add	r2, r24
      c4:	0d c9       	rjmp	.-3558   	; 0xfffff2e0 <__eeprom_end+0xff7ef2e0>
      c6:	43 e4       	ldi	r20, 0x43	; 67
      c8:	88 48       	sbci	r24, 0x88	; 136
      ca:	18 52       	subi	r17, 0x28	; 40
      cc:	8c 11       	cpse	r24, r12
      ce:	a3 22       	and	r10, r19
      d0:	00 26       	eor	r0, r16
      d2:	16 ca       	rjmp	.-3028   	; 0xfffff500 <__eeprom_end+0xff7ef500>
      d4:	0a 59       	subi	r16, 0x9A	; 154
      d6:	51 8d       	ldd	r21, Z+25	; 0x19
      d8:	22 a1       	ldd	r18, Z+34	; 0x22
      da:	48 4a       	sbci	r20, 0xA8	; 168
      dc:	9e 49       	sbci	r25, 0x9E	; 158
      de:	9a 2a       	or	r9, r26
      e0:	b2 91       	ld	r27, -Z
      e2:	6c 76       	andi	r22, 0x6C	; 108
      e4:	88 8d       	ldd	r24, Y+24	; 0x18
      e6:	06 27       	eor	r16, r22
      e8:	07 42       	sbci	r16, 0x27	; 39
      ea:	8a 49       	sbci	r24, 0x9A	; 154
      ec:	58 02       	muls	r21, r24
      ee:	28 0c       	add	r2, r8
      f0:	f4 da       	rcall	.-2584   	; 0xfffff6da <__eeprom_end+0xff7ef6da>
      f2:	4c 49       	sbci	r20, 0x9C	; 156
      f4:	26 4a       	sbci	r18, 0xA6	; 166
      f6:	fa 9b       	sbis	0x1f, 2	; 31
      f8:	68 24       	eor	r6, r8
      fa:	29 0e       	add	r2, r25
      fc:	f4 d8       	rcall	.-3608   	; 0xfffff2e6 <__eeprom_end+0xff7ef2e6>
      fe:	4c 88       	ldd	r4, Y+20	; 0x14
     100:	46 32       	cpi	r20, 0x26	; 38
     102:	91 fe       	sbrs	r9, 1
     104:	22 99       	sbic	0x04, 2	; 4
     106:	88 00       	.word	0x0088	; ????
     108:	2a 0b       	sbc	r18, r26
     10a:	55 78       	andi	r21, 0x85	; 133
     10c:	4d a5       	ldd	r20, Y+45	; 0x2d
     10e:	a4 8c       	ldd	r10, Z+28	; 0x1c
     110:	26 b1       	in	r18, 0x06	; 6
     112:	00 2b       	or	r16, r16
     114:	0d 88       	ldd	r0, Y+21	; 0x15
     116:	0a d5       	rcall	.+2580   	; 0xb2c <__stack+0x2cd>
     118:	89 d5       	rcall	.+2834   	; 0xc2c <__stack+0x3cd>
     11a:	0e 07       	cpc	r16, r30
     11c:	99 58       	subi	r25, 0x89	; 137
     11e:	0d 00       	.word	0x000d	; ????
     120:	2c 09       	sbc	r18, r12
     122:	52 da       	rcall	.-2908   	; 0xfffff5c8 <__eeprom_end+0xff7ef5c8>
     124:	48 50       	subi	r20, 0x08	; 8
     126:	22 12       	cpse	r2, r18
     128:	00 2d       	mov	r16, r0
     12a:	07 24       	eor	r0, r7
     12c:	38 4b       	sbci	r19, 0xB8	; 184
     12e:	1c 02       	muls	r17, r28
     130:	2e 06       	cpc	r2, r30
     132:	22 0a       	sbc	r2, r18
     134:	49 10       	cpse	r4, r9
     136:	2f 0f       	add	r18, r31
     138:	c4 08       	sbc	r12, r4
     13a:	cb 25       	eor	r28, r11
     13c:	89 62       	ori	r24, 0x29	; 41
     13e:	21 51       	subi	r18, 0x11	; 17
     140:	2c 24       	eor	r2, r12
     142:	8a a5       	ldd	r24, Y+42	; 0x2a
     144:	01 30       	cpi	r16, 0x01	; 1
     146:	0f c8       	rjmp	.-4066   	; 0xfffff166 <__eeprom_end+0xff7ef166>
     148:	08 53       	subi	r16, 0x38	; 56
     14a:	d1 2c       	mov	r13, r1
     14c:	a3 22       	and	r10, r19
     14e:	1f 4b       	sbci	r17, 0xBF	; 191
     150:	13 1b       	sub	r17, r19
     152:	09 00       	.word	0x0009	; ????
     154:	31 0a       	sbc	r3, r17
     156:	c5 0a       	sbc	r12, r21
     158:	53 c6       	rjmp	.+3238   	; 0xe00 <QR_CODE+0xe1>
     15a:	0e 35       	cpi	r16, 0x5E	; 94
     15c:	fd 01       	movw	r30, r26
     15e:	32 0f       	add	r19, r18
     160:	c8 08       	sbc	r12, r8
     162:	53 d1       	rcall	.+678    	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
     164:	2c a3       	std	Y+36, r18	; 0x24
     166:	22 51       	subi	r18, 0x12	; 18
     168:	3a dc       	rcall	.-1932   	; 0xfffff9de <__eeprom_end+0xff7ef9de>
     16a:	f1 70       	andi	r31, 0x01	; 1
     16c:	10 33       	cpi	r17, 0x30	; 48
     16e:	12 c8       	rjmp	.-4060   	; 0xfffff194 <__eeprom_end+0xff7ef194>
     170:	08 53       	subi	r16, 0x38	; 56
     172:	d1 2c       	mov	r13, r1
     174:	a3 a2       	std	Z+35, r10	; 0x23
     176:	74 46       	sbci	r23, 0x64	; 100
     178:	24 17       	cp	r18, r20
     17a:	4b 13       	cpse	r20, r27
     17c:	1b 09       	sbc	r17, r11
     17e:	00 34       	cpi	r16, 0x40	; 64
     180:	13 c8       	rjmp	.-4058   	; 0xfffff1a8 <__eeprom_end+0xff7ef1a8>
     182:	08 53       	subi	r16, 0x38	; 56
     184:	0e 69       	ori	r16, 0x9E	; 158
     186:	12 99       	sbic	0x02, 2	; 2
     188:	44 a4       	ldd	r4, Z+44	; 0x2c
     18a:	8b 4c       	sbci	r24, 0xCB	; 203
     18c:	72 38       	cpi	r23, 0x82	; 130
     18e:	48 c5       	rjmp	.+2704   	; 0xc20 <__stack+0x3c1>
     190:	2a 00       	.word	0x002a	; ????
     192:	35 11       	cpse	r19, r5
     194:	c8 08       	sbc	r12, r8
     196:	53 39       	cpi	r21, 0x93	; 147
     198:	89 a5       	ldd	r24, Y+41	; 0x29
     19a:	35 53       	subi	r19, 0x35	; 53
     19c:	6c 2c       	mov	r6, r12
     19e:	2e 4d       	sbci	r18, 0xDE	; 222
     1a0:	6c 24       	eor	r6, r12
     1a2:	00 36       	cpi	r16, 0x60	; 96
     1a4:	12 c8       	rjmp	.-4060   	; 0xfffff1ca <__eeprom_end+0xff7ef1ca>
     1a6:	08 53       	subi	r16, 0x38	; 56
     1a8:	d1 2c       	mov	r13, r1
     1aa:	a3 b2       	in	r10, 0x13	; 19
     1ac:	64 74       	andi	r22, 0x44	; 68
     1ae:	19 15       	cp	r17, r9
     1b0:	89 a5       	ldd	r24, Y+41	; 0x29
     1b2:	89 8d       	ldd	r24, Y+25	; 0x19
     1b4:	04 37       	cpi	r16, 0x74	; 116
     1b6:	0f c8       	rjmp	.-4066   	; 0xfffff1d6 <__eeprom_end+0xff7ef1d6>
     1b8:	08 53       	subi	r16, 0x38	; 56
     1ba:	3c 48       	sbci	r19, 0x8C	; 140
     1bc:	c5 52       	subi	r28, 0x25	; 37
     1be:	b1 54       	subi	r27, 0x41	; 65
     1c0:	ac 2a       	or	r10, r28
     1c2:	56 04       	cpc	r5, r6
     1c4:	38 13       	cpse	r19, r24
     1c6:	c8 08       	sbc	r12, r8
     1c8:	53 d1       	rcall	.+678    	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
     1ca:	2c a3       	std	Y+36, r18	; 0x24
     1cc:	a2 44       	sbci	r26, 0x42	; 66
     1ce:	24 a3       	std	Z+36, r18	; 0x24
     1d0:	59 46       	sbci	r21, 0x69	; 105
     1d2:	c5 d2       	rcall	.+1418   	; 0x75e <__EEPROM_REGION_LENGTH__+0x35e>
     1d4:	c4 46       	sbci	r28, 0x64	; 100
     1d6:	02 39       	cpi	r16, 0x92	; 146
     1d8:	12 c8       	rjmp	.-4060   	; 0xfffff1fe <__eeprom_end+0xff7ef1fe>
     1da:	08 53       	subi	r16, 0x38	; 56
     1dc:	d1 2c       	mov	r13, r1
     1de:	a3 22       	and	r10, r19
     1e0:	b1 34       	cpi	r27, 0x41	; 65
     1e2:	39 4d       	sbci	r19, 0xD9	; 217
     1e4:	c4 a5       	ldd	r28, Z+44	; 0x2c
     1e6:	89 8d       	ldd	r24, Y+25	; 0x19
     1e8:	04 3a       	cpi	r16, 0xA4	; 164
     1ea:	08 82       	st	Y, r0
     1ec:	0c 4b       	sbci	r16, 0xBC	; 188
     1ee:	d0 21       	and	r29, r0
     1f0:	04 3b       	cpi	r16, 0xB4	; 180
     1f2:	0b b2       	in	r0, 0x1b	; 27
     1f4:	dc 4a       	sbci	r29, 0xAC	; 172
     1f6:	d0 21       	and	r29, r0
     1f8:	94 88       	ldd	r9, Z+20	; 0x14
     1fa:	04 00       	.word	0x0004	; ????
     1fc:	3c 0c       	add	r3, r12
     1fe:	88 0a       	sbc	r8, r24
     200:	55 0b       	sbc	r21, r21
     202:	49 a4       	ldd	r4, Y+41	; 0x29
     204:	e9 9c       	mul	r14, r9
     206:	4c 16       	cp	r4, r28
     208:	3d 0b       	sbc	r19, r29
     20a:	68 1a       	sub	r6, r24
     20c:	55 3c       	cpi	r21, 0xC5	; 197
     20e:	c8 91       	.word	0x91c8	; ????
     210:	0e 07       	cpc	r16, r30
     212:	01 3e       	cpi	r16, 0xE1	; 225
     214:	0c 88       	ldd	r0, Y+20	; 0x14
     216:	0a 55       	subi	r16, 0x5A	; 90
     218:	88 d9       	rcall	.-3312   	; 0xfffff52a <__eeprom_end+0xff7ef52a>
     21a:	a7 23       	and	r26, r23
     21c:	46 31       	cpi	r20, 0x16	; 22
     21e:	00 3f       	cpi	r16, 0xF0	; 240
     220:	10 c7       	rjmp	.+3616   	; 0x1042 <ECG_PROMPT+0x123>
     222:	0a d5       	rcall	.+2580   	; 0xc38 <__stack+0x3d9>
     224:	54 0e       	add	r5, r20
     226:	32 9a       	sbi	0x06, 2	; 6
     228:	54 38       	cpi	r21, 0x84	; 132
     22a:	54 95       	.word	0x9554	; ????
     22c:	43 95       	inc	r20
     22e:	00 40       	sbci	r16, 0x00	; 0
     230:	22 ed       	ldi	r18, 0xD2	; 210
     232:	ea 60       	ori	r30, 0x0A	; 10
     234:	5a 87       	std	Y+10, r21	; 0x0a
     236:	32 39       	cpi	r19, 0x92	; 146
     238:	24 14       	cp	r2, r4
     23a:	ab 90       	.word	0x90ab	; ????
     23c:	64 21       	and	r22, r4
     23e:	59 4c       	sbci	r21, 0xC9	; 201
     240:	a4 26       	eor	r10, r20
     242:	52 8b       	std	Z+18, r21	; 0x12
     244:	89 94       	.word	0x9489	; ????
     246:	48 21       	and	r20, r8
     248:	51 9a       	sbi	0x0a, 1	; 10
     24a:	48 26       	eor	r4, r24
     24c:	87 ce       	rjmp	.-754    	; 0xffffff5c <__eeprom_end+0xff7eff5c>
     24e:	e4 45       	sbci	r30, 0x54	; 84
     250:	00 41       	sbci	r16, 0x10	; 16
     252:	16 cb       	rjmp	.-2516   	; 0xfffff880 <__eeprom_end+0xff7ef880>
     254:	08 59       	subi	r16, 0x98	; 152
     256:	ce 21       	and	r28, r14
     258:	f3 b2       	in	r15, 0x13	; 19
     25a:	44 3a       	cpi	r20, 0xA4	; 164
     25c:	19 ca       	rjmp	.-3022   	; 0xfffff690 <__eeprom_end+0xff7ef690>
     25e:	64 4b       	sbci	r22, 0xB4	; 180
     260:	52 d1       	rcall	.+676    	; 0x506 <__EEPROM_REGION_LENGTH__+0x106>
     262:	41 72       	andi	r20, 0x21	; 33
     264:	b0 d3       	rcall	.+1888   	; 0x9c6 <__stack+0x167>
     266:	05 42       	sbci	r16, 0x25	; 37
     268:	14 c9       	rjmp	.-3544   	; 0xfffff492 <__eeprom_end+0xff7ef492>
     26a:	0a 57       	subi	r16, 0x7A	; 122
     26c:	9c 0e       	add	r9, r28
     26e:	11 61       	ori	r17, 0x11	; 17
     270:	95 78       	andi	r25, 0x85	; 133
     272:	a0 1c       	adc	r10, r0
     274:	22 c2       	rjmp	.+1092   	; 0x6ba <__EEPROM_REGION_LENGTH__+0x2ba>
     276:	2a f1       	brmi	.+74     	; 0x2c2 <__trampolines_end+0x26e>
     278:	40 39       	cpi	r20, 0x90	; 144
     27a:	01 43       	sbci	r16, 0x31	; 49
     27c:	16 ca       	rjmp	.-3028   	; 0xfffff6aa <__eeprom_end+0xff7ef6aa>
     27e:	0a d9       	rcall	.-3564   	; 0xfffff494 <__eeprom_end+0xff7ef494>
     280:	15 4f       	sbci	r17, 0xF5	; 245
     282:	b3 89       	ldd	r27, Z+19	; 0x13
     284:	b4 2e       	mov	r11, r20
     286:	87 c8       	rjmp	.-3826   	; 0xfffff396 <__eeprom_end+0xff7ef396>
     288:	21 73       	andi	r18, 0x31	; 49
     28a:	88 54       	subi	r24, 0x48	; 72
     28c:	32 1b       	sub	r19, r18
     28e:	1d 4b       	sbci	r17, 0xBD	; 189
     290:	00 44       	sbci	r16, 0x40	; 64
     292:	15 ca       	rjmp	.-3030   	; 0xfffff6be <__eeprom_end+0xff7ef6be>
     294:	0a 59       	subi	r16, 0x9A	; 154
     296:	18 0f       	add	r17, r24
     298:	21 e1       	ldi	r18, 0x11	; 17
     29a:	44 2a       	or	r4, r20
     29c:	91 96       	adiw	r26, 0x21	; 33
     29e:	59 ab       	std	Y+49, r21	; 0x31
     2a0:	12 e1       	ldi	r17, 0x12	; 18
     2a2:	e4 10       	cpse	r14, r4
     2a4:	32 02       	muls	r19, r18
     2a6:	45 0e       	add	r4, r21
     2a8:	c8 0a       	sbc	r12, r24
     2aa:	55 3c       	cpi	r21, 0xC5	; 197
     2ac:	90 95       	com	r25
     2ae:	2f 17       	cp	r18, r31
     2b0:	b1 f2       	breq	.-84     	; 0x25e <__trampolines_end+0x20a>
     2b2:	e1 20       	and	r14, r1
     2b4:	46 0d       	add	r20, r6
     2b6:	c8 0a       	sbc	r12, r24
     2b8:	55 3c       	cpi	r21, 0xC5	; 197
     2ba:	90 95       	com	r25
     2bc:	2f 17       	cp	r18, r31
     2be:	b1 ce       	rjmp	.-670    	; 0x22 <__FUSE_REGION_LENGTH__+0x20>
     2c0:	00 47       	sbci	r16, 0x70	; 112
     2c2:	16 ca       	rjmp	.-3028   	; 0xfffff6f0 <__eeprom_end+0xff7ef6f0>
     2c4:	0a d9       	rcall	.-3564   	; 0xfffff4da <__eeprom_end+0xff7ef4da>
     2c6:	15 4f       	sbci	r17, 0xF5	; 245
     2c8:	b3 89       	ldd	r27, Z+19	; 0x13
     2ca:	b4 2e       	mov	r11, r20
     2cc:	87 08       	sbc	r8, r7
     2ce:	6f 14       	cp	r6, r15
     2d0:	a9 64       	ori	r26, 0x49	; 73
     2d2:	36 3a       	cpi	r19, 0xA6	; 166
     2d4:	c4 28       	or	r12, r4
     2d6:	02 48       	sbci	r16, 0x82	; 130
     2d8:	0c ca       	rjmp	.-3048   	; 0xfffff6f2 <__eeprom_end+0xff7ef6f2>
     2da:	0a 59       	subi	r16, 0x9A	; 154
     2dc:	88 39       	cpi	r24, 0x98	; 152
     2de:	1f 1e       	adc	r1, r31
     2e0:	c6 7c       	andi	r28, 0xC6	; 198
     2e2:	16 49       	sbci	r17, 0x96	; 150
     2e4:	07 c2       	rjmp	.+1038   	; 0x6f4 <__EEPROM_REGION_LENGTH__+0x2f4>
     2e6:	0a 49       	sbci	r16, 0x9A	; 154
     2e8:	7c 18       	sub	r7, r12
     2ea:	4a 0c       	add	r4, r10
     2ec:	c7 0a       	sbc	r12, r23
     2ee:	d3 ea       	ldi	r29, 0xA3	; 163
     2f0:	57 1a       	sub	r5, r23
     2f2:	ed 20       	and	r14, r13
     2f4:	a9 00       	.word	0x00a9	; ????
     2f6:	4b 19       	sub	r20, r11
     2f8:	cb 0a       	sbc	r12, r27
     2fa:	59 48       	sbci	r21, 0x89	; 137
     2fc:	27 c2       	rjmp	.+1102   	; 0x74c <__EEPROM_REGION_LENGTH__+0x34c>
     2fe:	91 6c       	ori	r25, 0xC1	; 193
     300:	26 1a       	sub	r2, r22
     302:	4a a6       	std	Y+42, r4	; 0x2a
     304:	65 ab       	std	Z+53, r22	; 0x35
     306:	68 28       	or	r6, r8
     308:	9b 09       	sbc	r25, r11
     30a:	47 d2       	rcall	.+1166   	; 0x79a <__EEPROM_REGION_LENGTH__+0x39a>
     30c:	89 78       	andi	r24, 0x89	; 137
     30e:	00 4c       	sbci	r16, 0xC0	; 192
     310:	0b c8       	rjmp	.-4074   	; 0xfffff328 <__eeprom_end+0xff7ef328>
     312:	0a 55       	subi	r16, 0x5A	; 90
     314:	88 f5       	brcc	.+98     	; 0x378 <__trampolines_end+0x324>
     316:	cf 87       	std	Y+15, r28	; 0x0f
     318:	83 00       	.word	0x0083	; ????
     31a:	4d 19       	sub	r20, r13
     31c:	cb 0a       	sbc	r12, r27
     31e:	5b 4c       	sbci	r21, 0xCB	; 203
     320:	5d 6f       	ori	r21, 0xFD	; 253
     322:	87 98       	cbi	0x10, 7	; 16
     324:	25 16       	cp	r2, r21
     326:	a1 a8       	ldd	r10, Z+49	; 0x31
     328:	50 54       	subi	r21, 0x40	; 64
     32a:	48 91       	.word	0x9148	; ????
     32c:	10 69       	ori	r17, 0x90	; 144
     32e:	44 1a       	sub	r4, r20
     330:	d1 62       	ori	r29, 0x21	; 33
     332:	02 4e       	sbci	r16, 0xE2	; 226
     334:	15 ca       	rjmp	.-3030   	; 0xfffff760 <__eeprom_end+0xff7ef760>
     336:	0a 59       	subi	r16, 0x9A	; 154
     338:	4c 8d       	ldd	r20, Y+28	; 0x1c
     33a:	46 8a       	std	Z+22, r4	; 0x16
     33c:	8c 22       	and	r8, r28
     33e:	23 89       	ldd	r18, Z+19	; 0x13
     340:	48 22       	and	r4, r24
     342:	9a 84       	ldd	r9, Y+10	; 0x0a
     344:	26 21       	and	r18, r6
     346:	ba 0e       	add	r11, r26
     348:	4f 14       	cp	r4, r15
     34a:	cb 0a       	sbc	r12, r27
     34c:	db 55       	subi	r29, 0x5B	; 91
     34e:	6f 4b       	sbci	r22, 0xBF	; 191
     350:	52 c9       	rjmp	.-3420   	; 0xfffff5f6 <__eeprom_end+0xff7ef5f6>
     352:	b4 4e       	sbci	r27, 0xE4	; 228
     354:	af 4e       	sbci	r26, 0xEF	; 239
     356:	a4 a2       	std	Z+36, r10	; 0x24
     358:	d9 ec       	ldi	r29, 0xC9	; 201
     35a:	5a 03       	fmul	r21, r18
     35c:	50 10       	cpse	r5, r0
     35e:	c9 0a       	sbc	r12, r25
     360:	57 9c       	mul	r5, r7
     362:	0e 11       	cpse	r16, r14
     364:	61 95       	neg	r22
     366:	f1 40       	sbci	r31, 0x01	; 1
     368:	39 c9       	rjmp	.-3470   	; 0xfffff5dc <__eeprom_end+0xff7ef5dc>
     36a:	b5 03       	fmuls	r19, r21
     36c:	51 17       	cp	r21, r17
     36e:	db fa       	.word	0xfadb	; ????
     370:	da 55       	subi	r29, 0x5A	; 90
     372:	6f 4b       	sbci	r22, 0xBF	; 191
     374:	52 c9       	rjmp	.-3420   	; 0xfffff61a <__eeprom_end+0xff7ef61a>
     376:	b4 4e       	sbci	r27, 0xE4	; 228
     378:	af 85       	ldd	r26, Y+15	; 0x0f
     37a:	24 a2       	std	Z+36, r2	; 0x24
     37c:	d2 88       	ldd	r13, Z+18	; 0x12
     37e:	76 bd       	out	0x26, r23	; 38
     380:	83 42       	sbci	r24, 0x23	; 35
     382:	00 52       	subi	r16, 0x20	; 32
     384:	19 ca       	rjmp	.-3022   	; 0xfffff7b8 <__eeprom_end+0xff7ef7b8>
     386:	0a 59       	subi	r16, 0x9A	; 154
     388:	1c 42       	sbci	r17, 0x2C	; 44
     38a:	07 89       	ldd	r16, Z+23	; 0x17
     38c:	54 22       	and	r5, r20
     38e:	95 08       	sbc	r9, r5
     390:	27 87       	std	Z+15, r18	; 0x0f
     392:	d0 21       	and	r29, r0
     394:	24 9c       	mul	r2, r4
     396:	48 25       	eor	r20, r8
     398:	52 89       	ldd	r21, Z+18	; 0x12
     39a:	b4 3a       	cpi	r27, 0xA4	; 164
     39c:	53 11       	cpse	r21, r3
     39e:	c9 0a       	sbc	r12, r25
     3a0:	57 d5       	rcall	.+2734   	; 0xe50 <QR_CODE+0x131>
     3a2:	2e b3       	in	r18, 0x1e	; 30
     3a4:	aa d9       	rcall	.-3244   	; 0xfffff6fa <__eeprom_end+0xff7ef6fa>
     3a6:	5a af       	std	Y+58, r21	; 0x3a
     3a8:	d6 26       	eor	r13, r22
     3aa:	b7 12       	cpse	r11, r23
     3ac:	00 54       	subi	r16, 0x40	; 64
     3ae:	19 ca       	rjmp	.-3022   	; 0xfffff7e2 <__eeprom_end+0xff7ef7e2>
     3b0:	08 55       	subi	r16, 0x58	; 88
     3b2:	3c 18       	sub	r3, r12
     3b4:	e5 10       	cpse	r14, r5
     3b6:	39 44       	sbci	r19, 0x49	; 73
     3b8:	0e 91       	ld	r16, -X
     3ba:	43 e4       	ldi	r20, 0x43	; 67
     3bc:	10 39       	cpi	r17, 0x90	; 144
     3be:	44 0e       	add	r4, r20
     3c0:	91 43       	sbci	r25, 0x31	; 49
     3c2:	e4 10       	cpse	r14, r4
     3c4:	21 00       	.word	0x0021	; ????
     3c6:	55 0d       	add	r21, r5
     3c8:	ca 0a       	sbc	r12, r26
     3ca:	59 88       	ldd	r5, Y+17	; 0x11
     3cc:	f9 e7       	ldi	r31, 0x79	; 121
     3ce:	e2 e4       	ldi	r30, 0x42	; 66
     3d0:	10 33       	cpi	r17, 0x30	; 48
     3d2:	01 56       	subi	r16, 0x61	; 97
     3d4:	18 ca       	rjmp	.-3024   	; 0xfffff806 <__eeprom_end+0xff7ef806>
     3d6:	08 57       	subi	r16, 0x78	; 120
     3d8:	88 c9       	rjmp	.-3312   	; 0xfffff6ea <__eeprom_end+0xff7ef6ea>
     3da:	12 a1       	ldd	r17, Z+34	; 0x22
     3dc:	48 28       	or	r4, r8
     3de:	12 ca       	rjmp	.-3036   	; 0xfffff804 <__eeprom_end+0xff7ef804>
     3e0:	44 42       	sbci	r20, 0x24	; 36
     3e2:	91 50       	subi	r25, 0x01	; 1
     3e4:	24 25       	eor	r18, r4
     3e6:	d3 e5       	ldi	r29, 0x53	; 83
     3e8:	10 21       	and	r17, r0
     3ea:	00 57       	subi	r16, 0x70	; 112
     3ec:	1e ce       	rjmp	.-964    	; 0x2a <__FUSE_REGION_LENGTH__+0x28>
     3ee:	08 5f       	subi	r16, 0xF8	; 248
     3f0:	08 85       	ldd	r16, Y+8	; 0x08
     3f2:	44 21       	and	r20, r4
     3f4:	51 45       	sbci	r21, 0x51	; 81
     3f6:	a6 24       	eor	r10, r6
     3f8:	22 29       	or	r18, r2
     3fa:	91 64       	ori	r25, 0x41	; 65
     3fc:	92 50       	subi	r25, 0x02	; 2
     3fe:	44 48       	sbci	r20, 0x84	; 132
     400:	22 92       	st	-Z, r2
     402:	a8 42       	sbci	r26, 0x28	; 40
     404:	b1 50       	subi	r27, 0x01	; 1
     406:	2c 94 01 58 	jmp	0x8b002	; 0x8b002 <__TEXT_REGION_LENGTH__+0x83002>
     40a:	14 c9       	rjmp	.-3544   	; 0xfffff634 <__eeprom_end+0xff7ef634>
     40c:	0a 57       	subi	r16, 0x7A	; 122
     40e:	48 6b       	ori	r20, 0xB8	; 184
     410:	13 99       	sbic	0x02, 3	; 2
     412:	8a b0       	in	r8, 0x0a	; 10
     414:	3a 9e       	mul	r3, r26
     416:	16 25       	eor	r17, r6
     418:	32 95       	swap	r19
     41a:	59 55       	subi	r21, 0x59	; 89
     41c:	00 59       	subi	r16, 0x90	; 144
     41e:	18 ca       	rjmp	.-3024   	; 0xfffff850 <__eeprom_end+0xff7ef850>
     420:	08 57       	subi	r16, 0x78	; 120
     422:	88 8b       	std	Y+16, r24	; 0x10
     424:	13 a1       	ldd	r17, Z+35	; 0x23
     426:	4c 24       	eor	r4, r12
     428:	14 49       	sbci	r17, 0x94	; 148
     42a:	c9 74       	andi	r28, 0x49	; 73
     42c:	39 44       	sbci	r19, 0x49	; 73
     42e:	0e 91       	ld	r16, -X
     430:	43 e4       	ldi	r20, 0x43	; 67
     432:	10 21       	and	r17, r0
     434:	00 5a       	subi	r16, 0xA0	; 160
     436:	0f c8       	rjmp	.-4066   	; 0xfffff456 <__eeprom_end+0xff7ef456>
     438:	0a 55       	subi	r16, 0x5A	; 90
     43a:	3c 48       	sbci	r19, 0x8C	; 140
     43c:	a7 aa       	std	Z+55, r10	; 0x37
     43e:	c3 a9       	ldd	r28, Z+51	; 0x33
     440:	ea f4       	brpl	.+58     	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
     442:	70 10       	cpse	r7, r0
     444:	5b 0b       	sbc	r21, r27
     446:	f4 da       	rcall	.-2584   	; 0xfffffa30 <__eeprom_end+0xff7efa30>
     448:	4c 1c       	adc	r4, r12
     44a:	46 fa       	bst	r4, 6
     44c:	4f 87       	std	Y+15, r20	; 0x0f
     44e:	00 5c       	subi	r16, 0xC0	; 192
     450:	0d c4       	rjmp	.+2074   	; 0xc6c <__stack+0x40d>
     452:	08 4b       	sbci	r16, 0xB8	; 184
     454:	c4 62       	ori	r28, 0x24	; 36
     456:	b2 34       	cpi	r27, 0x42	; 66
     458:	59 9a       	sbi	0x0b, 1	; 11
     45a:	2c 03       	fmul	r18, r20
     45c:	5d 0b       	sbc	r21, r29
     45e:	f4 d8       	rcall	.-3608   	; 0xfffff648 <__eeprom_end+0xff7ef648>
     460:	4c 1c       	adc	r4, r12
     462:	42 fa       	bst	r4, 2
     464:	4f 87       	std	Y+15, r20	; 0x0f
     466:	01 5e       	subi	r16, 0xE1	; 225
     468:	0d 78       	andi	r16, 0x8D	; 141
     46a:	5a d5       	rcall	.+2740   	; 0xf20 <ECG_PROMPT+0x1>
     46c:	89 a5       	ldd	r24, Y+41	; 0x29
     46e:	34 91       	lpm	r19, Z
     470:	16 21       	and	r17, r6
     472:	51 00       	.word	0x0051	; ????
     474:	5f 07       	cpc	r21, r31
     476:	19 d8       	rcall	.-4046   	; 0xfffff4aa <__eeprom_end+0xff7ef4aa>
     478:	52 1c       	adc	r5, r2
     47a:	04 60       	ori	r16, 0x04	; 4
     47c:	08 33       	cpi	r16, 0x38	; 56
     47e:	ac 4d       	sbci	r26, 0xDC	; 220
     480:	84 64       	ori	r24, 0x44	; 68
     482:	01 61       	ori	r16, 0x11	; 17
     484:	11 98       	cbi	0x02, 1	; 2
     486:	0a d3       	rcall	.+1556   	; 0xa9c <__stack+0x23d>
     488:	94 2e       	mov	r9, r20
     48a:	32 e9       	ldi	r19, 0x92	; 146
     48c:	c8 32       	cpi	r28, 0x28	; 40
     48e:	92 c8       	rjmp	.-3804   	; 0xfffff5b4 <__eeprom_end+0xff7ef5b4>
     490:	24 a7       	std	Z+44, r18	; 0x2c
     492:	c9 00       	.word	0x00c9	; ????
     494:	62 11       	cpse	r22, r2
     496:	c8 0a       	sbc	r12, r24
     498:	55 88       	ldd	r5, Z+21	; 0x15
     49a:	b5 8c       	ldd	r11, Z+29	; 0x1d
     49c:	2e a3       	std	Y+38, r18	; 0x26
     49e:	22 63       	ori	r18, 0x32	; 50
     4a0:	e9 30       	cpi	r30, 0x09	; 9
     4a2:	91 8c       	ldd	r9, Z+25	; 0x19
     4a4:	00 63       	ori	r16, 0x30	; 48
     4a6:	0e 98       	cbi	0x01, 6	; 1
     4a8:	0a 53       	subi	r16, 0x3A	; 58
     4aa:	d1 2c       	mov	r13, r1
     4ac:	a3 b2       	in	r10, 0x13	; 19
     4ae:	f2 68       	ori	r31, 0x82	; 130
     4b0:	62 23       	and	r22, r18
     4b2:	01 64       	ori	r16, 0x41	; 65
     4b4:	0f c8       	rjmp	.-4066   	; 0xfffff4d4 <__eeprom_end+0xff7ef4d4>
     4b6:	0a 55       	subi	r16, 0x5A	; 90
     4b8:	6b b2       	in	r6, 0x1b	; 27
     4ba:	1c 46       	sbci	r17, 0x6C	; 108
     4bc:	45 c6       	rjmp	.+3210   	; 0x1148 <ECG_PROMPT+0x229>
     4be:	d2 e4       	ldi	r29, 0x42	; 66
     4c0:	34 11       	cpse	r19, r4
     4c2:	65 0f       	add	r22, r21
     4c4:	98 0a       	sbc	r9, r24
     4c6:	55 d1       	rcall	.+682    	; 0x772 <__EEPROM_REGION_LENGTH__+0x372>
     4c8:	2c c2       	rjmp	.+1112   	; 0x922 <__stack+0xc3>
     4ca:	c3 c1       	rjmp	.+902    	; 0x852 <__DATA_REGION_LENGTH__+0x52>
     4cc:	3c 9a       	sbi	0x07, 4	; 7
     4ce:	d8 48       	sbci	r29, 0x88	; 136
     4d0:	00 66       	ori	r16, 0x60	; 96
     4d2:	0d c4       	rjmp	.+2074   	; 0xcee <__stack+0x48f>
     4d4:	0a 4d       	sbci	r16, 0xDA	; 218
     4d6:	49 26       	eor	r4, r25
     4d8:	92 43       	sbci	r25, 0x32	; 50
     4da:	44 a4       	ldd	r4, Z+44	; 0x2c
     4dc:	2f 00       	.word	0x002f	; ????
     4de:	67 13       	cpse	r22, r23
     4e0:	d8 ca       	rjmp	.-2640   	; 0xfffffa92 <__eeprom_end+0xff7efa92>
     4e2:	54 4d       	sbci	r21, 0xD4	; 212
     4e4:	24 87       	std	Z+12, r18	; 0x0c
     4e6:	51 91       	ld	r21, Z+
     4e8:	b1 34       	cpi	r27, 0x41	; 65
     4ea:	39 4d       	sbci	r19, 0xD9	; 217
     4ec:	c4 a5       	ldd	r28, Z+44	; 0x2c
     4ee:	89 8d       	ldd	r24, Y+25	; 0x19
     4f0:	04 68       	ori	r16, 0x84	; 132
     4f2:	0d c8       	rjmp	.-4070   	; 0xfffff50e <__eeprom_end+0xff7ef50e>
     4f4:	0a 55       	subi	r16, 0x5A	; 90
     4f6:	88 b5       	in	r24, 0x28	; 40
     4f8:	50 0e       	add	r5, r16
     4fa:	34 22       	and	r3, r20
     4fc:	1f 05       	cpc	r17, r15
     4fe:	69 09       	sbc	r22, r9
     500:	c2 0a       	sbc	r12, r18
     502:	49 90       	ld	r4, Y+
     504:	0e 07       	cpc	r16, r30
     506:	02 6a       	ori	r16, 0xA2	; 162
     508:	0b 03       	fmul	r16, r19
     50a:	cb ca       	rjmp	.-2666   	; 0xfffffaa2 <__eeprom_end+0xff7efaa2>
     50c:	28 4a       	sbci	r18, 0xA8	; 168
     50e:	f4 2f       	mov	r31, r20
     510:	17 00       	.word	0x0017	; ????
     512:	6b 14       	cp	r6, r11
     514:	c8 0a       	sbc	r12, r24
     516:	53 88       	ldd	r5, Z+19	; 0x13
     518:	b5 95       	asr	r27
     51a:	26 92       	lac	Z, r2
     51c:	51 cd       	rjmp	.-1374   	; 0xffffffc0 <__eeprom_end+0xff7effc0>
     51e:	34 11       	cpse	r19, r4
     520:	89 26       	eor	r8, r25
     522:	32 89       	ldd	r19, Z+18	; 0x12
     524:	6c 00       	.word	0x006c	; ????
     526:	6c 07       	cpc	r22, r28
     528:	c2 0a       	sbc	r12, r18
     52a:	49 7c       	andi	r20, 0xC9	; 201
     52c:	18 6d       	ori	r17, 0xD8	; 216
     52e:	16 9c       	mul	r1, r6
     530:	0a 5d       	subi	r16, 0xDA	; 218
     532:	48 28       	or	r4, r8
     534:	93 c3       	rjmp	.+1830   	; 0xc5c <__stack+0x3fd>
     536:	21 34       	cpi	r18, 0x41	; 65
     538:	a2 c9       	rjmp	.-3260   	; 0xfffff87e <__eeprom_end+0xff7ef87e>
     53a:	68 32       	cpi	r22, 0x28	; 40
     53c:	9a 8c       	ldd	r9, Y+26	; 0x1a
     53e:	26 a3       	std	Z+38, r18	; 0x26
     540:	c9 68       	ori	r28, 0x89	; 137
     542:	0a 6e       	ori	r16, 0xEA	; 234
     544:	0c 98       	cbi	0x01, 4	; 1
     546:	0a 55       	subi	r16, 0x5A	; 90
     548:	48 28       	or	r4, r8
     54a:	07 1a       	sub	r0, r23
     54c:	91 8f       	std	Z+25, r25	; 0x19
     54e:	02 6f       	ori	r16, 0xF2	; 242
     550:	0e 98       	cbi	0x01, 6	; 1
     552:	0a 55       	subi	r16, 0x5A	; 90
     554:	d1 2c       	mov	r13, r1
     556:	a3 22       	and	r10, r19
     558:	63 69       	ori	r22, 0x93	; 147
     55a:	62 23       	and	r22, r18
     55c:	01 70       	andi	r16, 0x01	; 1
     55e:	12 d8       	rcall	.-4060   	; 0xfffff584 <__eeprom_end+0xff7ef584>
     560:	ca 54       	subi	r28, 0x4A	; 74
     562:	48 46       	sbci	r20, 0x68	; 104
     564:	97 51       	subi	r25, 0x17	; 23
     566:	91 b1       	in	r25, 0x01	; 1
     568:	74 98       	cbi	0x0e, 4	; 14
     56a:	48 46       	sbci	r20, 0x68	; 104
     56c:	62 cd       	rjmp	.-1340   	; 0x32 <__FUSE_REGION_LENGTH__+0x30>
     56e:	00 71       	andi	r16, 0x10	; 16
     570:	10 d8       	rcall	.-4064   	; 0xfffff592 <__eeprom_end+0xff7ef592>
     572:	ca 54       	subi	r28, 0x4A	; 74
     574:	4d 24       	eor	r4, r13
     576:	87 51       	subi	r24, 0x17	; 23
     578:	91 b1       	in	r25, 0x01	; 1
     57a:	34 39       	cpi	r19, 0x94	; 148
     57c:	4d c4       	rjmp	.+2202   	; 0xe18 <QR_CODE+0xf9>
     57e:	3a 72       	andi	r19, 0x2A	; 42
     580:	0b 95       	.word	0x950b	; ????
     582:	0a 4d       	sbci	r16, 0xDA	; 218
     584:	48 0e       	add	r4, r24
     586:	23 99       	sbic	0x04, 3	; 4
     588:	de 00       	.word	0x00de	; ????
     58a:	73 0e       	add	r7, r19
     58c:	97 0a       	sbc	r9, r23
     58e:	d3 54       	subi	r29, 0x43	; 67
     590:	0e 32       	cpi	r16, 0x2E	; 46
     592:	63 b5       	in	r22, 0x23	; 35
     594:	76 90       	elpm	r7, Z
     596:	54 00       	.word	0x0054	; ????
     598:	74 0d       	add	r23, r4
     59a:	b4 0a       	sbc	r11, r20
     59c:	cd 88       	ldd	r12, Y+21	; 0x15
     59e:	24 87       	std	Z+12, r18	; 0x0c
     5a0:	88 48       	sbci	r24, 0x88	; 136
     5a2:	a7 91       	elpm	r26, Z+
     5a4:	00 75       	andi	r16, 0x50	; 80
     5a6:	0b 98       	cbi	0x01, 3	; 1
     5a8:	0a 55       	subi	r16, 0x5A	; 90
     5aa:	08 f9       	.word	0xf908	; ????
     5ac:	ed 40       	sbci	r30, 0x0D	; 13
     5ae:	a1 08       	sbc	r10, r1
     5b0:	76 0f       	add	r23, r22
     5b2:	98 08       	sbc	r9, r8
     5b4:	53 08       	sbc	r5, r3
     5b6:	89 12       	cpse	r8, r25
     5b8:	91 de       	rcall	.-734    	; 0x2dc <__trampolines_end+0x288>
     5ba:	88 54       	subi	r24, 0x48	; 72
     5bc:	b1 0c       	add	r11, r1
     5be:	00 77       	andi	r16, 0x70	; 112
     5c0:	15 9c       	mul	r1, r5
     5c2:	08 5b       	subi	r16, 0xB8	; 184
     5c4:	c8 64       	ori	r28, 0x48	; 72
     5c6:	34 15       	cp	r19, r4
     5c8:	91 be       	out	0x31, r9	; 49
     5ca:	50 64       	ori	r21, 0x40	; 64
     5cc:	87 e0       	ldi	r24, 0x07	; 7
     5ce:	68 2a       	or	r6, r24
     5d0:	12 8b       	std	Z+18, r17	; 0x12
     5d2:	64 00       	.word	0x0064	; ????
     5d4:	78 0f       	add	r23, r24
     5d6:	97 0a       	sbc	r9, r23
     5d8:	53 c8       	rjmp	.-3930   	; 0xfffff680 <__eeprom_end+0xff7ef680>
     5da:	68 12       	cpse	r6, r24
     5dc:	a5 da       	rcall	.-2742   	; 0xfffffb28 <__eeprom_end+0xff7efb28>
     5de:	ac 24       	eor	r10, r12
     5e0:	51 a3       	std	Z+33, r21	; 0x21
     5e2:	09 79       	andi	r16, 0x99	; 153
     5e4:	15 d8       	rcall	.-4054   	; 0xfffff610 <__eeprom_end+0xff7ef610>
     5e6:	c8 52       	subi	r28, 0x28	; 40
     5e8:	08 89       	ldd	r16, Y+16	; 0x10
     5ea:	12 99       	sbic	0x02, 2	; 2
     5ec:	44 24       	eor	r4, r4
     5ee:	93 c8       	rjmp	.-3802   	; 0xfffff716 <__eeprom_end+0xff7ef716>
     5f0:	24 32       	cpi	r18, 0x24	; 36
     5f2:	ea 54       	subi	r30, 0x4A	; 74
     5f4:	ac 38       	cpi	r26, 0x8C	; 140
     5f6:	95 02       	muls	r25, r21
     5f8:	7a 0c       	add	r7, r10
     5fa:	97 08       	sbc	r9, r7
     5fc:	51 3c       	cpi	r21, 0xC1	; 193
     5fe:	ce 86       	std	Y+14, r12	; 0x0e
     600:	c2 d9       	rcall	.-3196   	; 0xfffff986 <__eeprom_end+0xff7ef986>
     602:	ec 70       	andi	r30, 0x0C	; 12
     604:	7b 0e       	add	r7, r27
     606:	f4 da       	rcall	.-2584   	; 0xfffffbf0 <__eeprom_end+0xff7efbf0>
     608:	4c 49       	sbci	r20, 0x9C	; 156
     60a:	26 22       	and	r2, r22
     60c:	5d 64       	ori	r21, 0x4D	; 77
     60e:	22 9d       	mul	r18, r2
     610:	46 02       	muls	r20, r22
     612:	7c 07       	cpc	r23, r28
     614:	01 cb       	rjmp	.-2558   	; 0xfffffc18 <__eeprom_end+0xff7efc18>
     616:	48 3c       	cpi	r20, 0xC8	; 200
     618:	08 7d       	andi	r16, 0xD8	; 216
     61a:	0e f4       	brtc	.+2      	; 0x61e <__EEPROM_REGION_LENGTH__+0x21e>
     61c:	da 4c       	sbci	r29, 0xCA	; 202
     61e:	88 46       	sbci	r24, 0x68	; 104
     620:	7a 93       	st	-Y, r23
     622:	88 74       	andi	r24, 0x48	; 72
     624:	99 88       	ldd	r9, Y+17	; 0x11
     626:	00 7e       	andi	r16, 0xE0	; 224
     628:	0a 38       	cpi	r16, 0x8A	; 138
     62a:	3a d5       	rcall	.+2676   	; 0x10a0 <ECG_PROMPT+0x181>
     62c:	cc 44       	sbci	r28, 0x4C	; 76
     62e:	6a 13       	cpse	r22, r26
     630:	00 a0       	ldd	r0, Z+32	; 0x20
     632:	05 00       	.word	0x0005	; ????
     634:	18 4b       	sbci	r17, 0xB8	; 184
     636:	a1 0a       	sbc	r10, r17
     638:	c2 da       	rcall	.-2684   	; 0xfffffbbe <__eeprom_end+0xff7efbbe>
     63a:	4c d0       	rcall	.+152    	; 0x6d4 <__EEPROM_REGION_LENGTH__+0x2d4>
     63c:	22 91       	ld	r18, -Z
     63e:	83 01       	movw	r16, r6
     640:	a2 13       	cpse	r26, r18
     642:	b8 f8       	.word	0xf8b8	; ????
     644:	d2 06       	cpc	r13, r18
     646:	69 96       	adiw	r28, 0x19	; 25
     648:	89 29       	or	r24, r9
     64a:	26 91       	elpm	r18, Z
     64c:	49 82       	std	Y+1, r4	; 0x01
     64e:	94 89       	ldd	r25, Z+20	; 0x14
     650:	8d 18       	sub	r8, r13
     652:	05 a3       	std	Z+37, r16	; 0x25
     654:	12 c8       	rjmp	.-4060   	; 0xfffff67a <__eeprom_end+0xff7ef67a>
     656:	08 d3       	rcall	.+1552   	; 0xc68 <__stack+0x409>
     658:	0d 4b       	sbci	r16, 0xBD	; 189
     65a:	32 89       	ldd	r19, Z+18	; 0x12
     65c:	4c 22       	and	r4, r28
     65e:	97 16       	cp	r9, r23
     660:	c5 e2       	ldi	r28, 0x25	; 37
     662:	f0 e1       	ldi	r31, 0x10	; 16
     664:	10 a4       	ldd	r1, Z+40	; 0x28
     666:	0f 77       	andi	r16, 0x7F	; 127
     668:	2a 53       	subi	r18, 0x3A	; 58
     66a:	44 26       	eor	r4, r20
     66c:	91 8a       	std	Z+17, r9	; 0x11
     66e:	8c 4d       	sbci	r24, 0xDC	; 220
     670:	52 89       	ldd	r21, Z+18	; 0x12
     672:	4c 02       	muls	r20, r28
     674:	a5 11       	cpse	r26, r5
     676:	c8 08       	sbc	r12, r8
     678:	53 08       	sbc	r5, r3
     67a:	89 12       	cpse	r8, r25
     67c:	91 36       	cpi	r25, 0x61	; 97
     67e:	aa d0       	rcall	.+340    	; 0x7d4 <__EEPROM_REGION_LENGTH__+0x3d4>
     680:	28 34       	cpi	r18, 0x48	; 72
     682:	8a d5       	rcall	.+2836   	; 0x1198 <ECG_PROMPT+0x279>
     684:	00 a6       	std	Z+40, r0	; 0x28
     686:	07 01       	movw	r0, r14
     688:	cd 4a       	sbci	r28, 0xAD	; 173
     68a:	9c 0e       	add	r9, r28
     68c:	a7 14       	cp	r10, r7
     68e:	f8 d8       	rcall	.-3600   	; 0xfffff880 <__eeprom_end+0xff7ef880>
     690:	52 d1       	rcall	.+676    	; 0x936 <__stack+0xd7>
     692:	4c 9a       	sbi	0x09, 4	; 9
     694:	89 16       	cp	r8, r25
     696:	59 d1       	rcall	.+690    	; 0x94a <__stack+0xeb>
     698:	24 31       	cpi	r18, 0x14	; 20
     69a:	92 45       	sbci	r25, 0x52	; 82
     69c:	4a 36       	cpi	r20, 0x6A	; 106
     69e:	12 00       	.word	0x0012	; ????
     6a0:	a8 08       	sbc	r10, r8
     6a2:	25 a8       	ldd	r2, Z+53	; 0x35
     6a4:	4d 48       	sbci	r20, 0x8D	; 141
     6a6:	28 02       	muls	r18, r24
     6a8:	a9 1d       	adc	r26, r9
     6aa:	cc 08       	sbc	r12, r12
     6ac:	59 92       	st	Y+, r5
     6ae:	47 33       	cpi	r20, 0x37	; 55
     6b0:	b1 28       	or	r11, r1
     6b2:	44 8a       	std	Z+20, r4	; 0x14
     6b4:	28 49       	sbci	r18, 0x98	; 152
     6b6:	46 71       	andi	r20, 0x16	; 22
     6b8:	51 7c       	andi	r21, 0xC1	; 193
     6ba:	22 92       	st	-Z, r2
     6bc:	48 42       	sbci	r20, 0x28	; 40
     6be:	a4 90       	lpm	r10, Z
     6c0:	3c 36       	cpi	r19, 0x6C	; 108
     6c2:	1a 13       	cpse	r17, r26
     6c4:	01 aa       	std	Z+49, r0	; 0x31
     6c6:	0c 75       	andi	r16, 0x5C	; 92
     6c8:	5a cd       	rjmp	.-1356   	; 0x17e <__trampolines_end+0x12a>
     6ca:	88 92       	.word	0x9288	; ????
     6cc:	26 a1       	ldd	r18, Z+38	; 0x26
     6ce:	10 b5       	in	r17, 0x20	; 32
     6d0:	00 ab       	std	Z+48, r16	; 0x30
     6d2:	0e 68       	ori	r16, 0x8E	; 142
     6d4:	28 53       	subi	r18, 0x38	; 56
     6d6:	a9 88       	ldd	r10, Y+17	; 0x11
     6d8:	24 22       	and	r2, r20
     6da:	6d 22       	and	r6, r29
     6dc:	99 48       	sbci	r25, 0x89	; 137
     6de:	00 ac       	ldd	r0, Z+56	; 0x38
     6e0:	08 58       	subi	r16, 0x88	; 136
     6e2:	28 55       	subi	r18, 0x58	; 88
     6e4:	3c 88       	ldd	r3, Y+20	; 0x14
     6e6:	35 ad       	ldd	r19, Z+61	; 0x3d
     6e8:	07 24       	eor	r0, r7
     6ea:	38 4b       	sbci	r19, 0xB8	; 184
     6ec:	1c 02       	muls	r17, r28
     6ee:	ae 1c       	adc	r10, r14
     6f0:	cc 08       	sbc	r12, r12
     6f2:	59 92       	st	Y+, r5
     6f4:	47 33       	cpi	r20, 0x37	; 55
     6f6:	b1 28       	or	r11, r1
     6f8:	52 8a       	std	Z+18, r5	; 0x12
     6fa:	28 49       	sbci	r18, 0x98	; 152
     6fc:	46 9a       	sbi	0x08, 6	; 8
     6fe:	88 13       	cpse	r24, r24
     700:	25 49       	sbci	r18, 0x95	; 149
     702:	44 29       	or	r20, r4
     704:	24 96       	adiw	r28, 0x04	; 4
     706:	8d c6       	rjmp	.+3354   	; 0x1422 <OXYMETER_PROMPT+0x103>
     708:	44 00       	.word	0x0044	; ????
     70a:	af 06       	cpc	r10, r31
     70c:	15 a8       	ldd	r1, Z+53	; 0x35
     70e:	4d 14       	cp	r4, r13
     710:	b0 0b       	sbc	r27, r16
     712:	54 7a       	andi	r21, 0xA4	; 164
     714:	cf 48       	sbci	r28, 0x8F	; 143
     716:	42 4a       	sbci	r20, 0xA2	; 162
     718:	11 09       	sbc	r17, r1
     71a:	00 b1       	in	r16, 0x00	; 0
     71c:	0f b8       	out	0x0f, r0	; 15
     71e:	0a d5       	rcall	.+2580   	; 0x1134 <ECG_PROMPT+0x215>
     720:	89 d5       	rcall	.+2834   	; 0x1234 <ECG_PROMPT+0x315>
     722:	0e 07       	cpc	r16, r30
     724:	99 58       	subi	r25, 0x89	; 137
     726:	1d 78       	andi	r17, 0x8D	; 141
     728:	38 08       	sbc	r3, r8
     72a:	b2 0c       	add	r11, r2
     72c:	75 58       	subi	r23, 0x85	; 133
     72e:	cd 4c       	sbci	r28, 0xCD	; 205
     730:	24 14       	cp	r2, r4
     732:	91 d2       	rcall	.+1314   	; 0xc56 <__stack+0x3f7>
     734:	61 00       	.word	0x0061	; ????
     736:	b3 0c       	add	r11, r3
     738:	75 58       	subi	r23, 0x85	; 133
     73a:	cd 4c       	sbci	r28, 0xCD	; 205
     73c:	d4 44       	sbci	r29, 0x44	; 68
     73e:	42 8a       	std	Z+18, r4	; 0x12
     740:	64 02       	muls	r22, r20
     742:	b4 08       	sbc	r11, r4
     744:	33 aa       	std	Z+51, r3	; 0x33
     746:	4d 45       	sbci	r20, 0x5D	; 93
     748:	46 00       	.word	0x0046	; ????
     74a:	b5 0d       	add	r27, r5
     74c:	c8 da       	rcall	.-2672   	; 0xfffffcde <__eeprom_end+0xff7efcde>
     74e:	54 08       	sbc	r5, r4
     750:	f9 ed       	ldi	r31, 0xD9	; 217
     752:	70 90 90 95 	lds	r7, 0x9590	; 0x809590 <__bss_end+0x8f5c>
     756:	01 b6       	in	r0, 0x31	; 49
     758:	20 f8       	bld	r2, 0
     75a:	d8 d2       	rcall	.+1456   	; 0xd0c <__stack+0x4ad>
     75c:	1c 48       	sbci	r17, 0x8C	; 140
     75e:	11 52       	subi	r17, 0x21	; 33
     760:	84 14       	cp	r8, r4
     762:	21 45       	sbci	r18, 0x51	; 81
     764:	48 a1       	ldd	r20, Y+32	; 0x20
     766:	51 30       	cpi	r21, 0x01	; 1
     768:	14 0c       	add	r1, r4
     76a:	05 43       	sbci	r16, 0x35	; 53
     76c:	c1 50       	subi	r28, 0x01	; 1
     76e:	30 14       	cp	r3, r0
     770:	0c 05       	cpc	r16, r12
     772:	43 c1       	rjmp	.+646    	; 0x9fa <__stack+0x19b>
     774:	50 04       	cpc	r5, r0
     776:	00 b7       	in	r16, 0x30	; 48
     778:	06 22       	and	r0, r22
     77a:	4a 4b       	sbci	r20, 0xBA	; 186
     77c:	10 b8       	out	0x00, r1	; 0
     77e:	0b 45       	sbci	r16, 0x5B	; 91
     780:	c8 4c       	sbci	r28, 0xC8	; 200
     782:	05 25       	eor	r16, r5
     784:	21 c9       	rjmp	.-3518   	; 0xfffff9c8 <__eeprom_end+0xff7ef9c8>
     786:	04 00       	.word	0x0004	; ????
     788:	b9 08       	sbc	r11, r9
     78a:	74 5a       	subi	r23, 0xA4	; 164
     78c:	4d 1d       	adc	r20, r13
     78e:	46 3a       	cpi	r20, 0xA6	; 166
     790:	ba 0b       	sbc	r27, r26
     792:	75 58       	subi	r23, 0x85	; 133
     794:	cd 4c       	sbci	r28, 0xCD	; 205
     796:	24 b3       	in	r18, 0x14	; 20
     798:	89 64       	ori	r24, 0x49	; 73
     79a:	5c bb       	out	0x1c, r21	; 28
     79c:	0f 68       	ori	r16, 0x8F	; 143
     79e:	2a 53       	subi	r18, 0x3A	; 58
     7a0:	88 64       	ori	r24, 0x48	; 72
     7a2:	22 99       	sbic	0x04, 2	; 4
     7a4:	48 8b       	std	Y+16, r20	; 0x10
     7a6:	48 22       	and	r4, r24
     7a8:	12 01       	movw	r2, r4
     7aa:	bc 1e       	adc	r11, r28
     7ac:	cd 0a       	sbc	r12, r29
     7ae:	5d 09       	sbc	r21, r13
     7b0:	65 c4       	rjmp	.+2250   	; 0x107c <ECG_PROMPT+0x15d>
     7b2:	20 4d       	sbci	r18, 0xD0	; 208
     7b4:	2c 8b       	std	Y+20, r18	; 0x14
     7b6:	8b d4       	rcall	.+2326   	; 0x10ce <ECG_PROMPT+0x1af>
     7b8:	44 a1       	ldd	r20, Z+36	; 0x24
     7ba:	99 44       	sbci	r25, 0x49	; 73
     7bc:	42 0e       	add	r4, r18
     7be:	45 a4       	ldd	r4, Z+45	; 0x2d
     7c0:	12 d5       	rcall	.+2596   	; 0x11e6 <ECG_PROMPT+0x2c7>
     7c2:	90 4d       	sbci	r25, 0xD0	; 208
     7c4:	2a 0c       	add	r2, r10
     7c6:	4b 00       	.word	0x004b	; ????
     7c8:	bd 1c       	adc	r11, r13
     7ca:	cc 08       	sbc	r12, r12
     7cc:	5d 09       	sbc	r21, r13
     7ce:	63 34       	cpi	r22, 0x43	; 67
     7d0:	19 2d       	mov	r17, r9
     7d2:	2c 12       	cpse	r2, r28
     7d4:	8b e2       	ldi	r24, 0x2B	; 43
     7d6:	12 c9       	rjmp	.-3548   	; 0xfffff9fc <__eeprom_end+0xff7ef9fc>
     7d8:	4c 12       	cpse	r4, r28
     7da:	51 94       	neg	r5
     7dc:	28 06       	cpc	r2, r24
     7de:	d5 a4       	ldd	r13, Z+45	; 0x2d
     7e0:	b1 92       	st	Z+, r11
     7e2:	ac 00       	.word	0x00ac	; ????
     7e4:	be 1f       	adc	r27, r30
     7e6:	cd 08       	sbc	r12, r13
     7e8:	dd 4c       	sbci	r29, 0xCD	; 205
     7ea:	63 12       	cpse	r6, r19
     7ec:	99 58       	subi	r25, 0x89	; 137
     7ee:	16 96       	adiw	r26, 0x06	; 6
     7f0:	c9 45       	sbci	r28, 0x59	; 89
     7f2:	21 89       	ldd	r18, Z+17	; 0x11
     7f4:	96 d1       	rcall	.+812    	; 0xb22 <__stack+0x2c3>
     7f6:	28 42       	sbci	r18, 0x28	; 40
     7f8:	96 44       	sbci	r25, 0x46	; 70
     7fa:	c4 11       	cpse	r28, r4
     7fc:	55 89       	ldd	r21, Z+21	; 0x15
     7fe:	31 2a       	or	r3, r17
     800:	94 4a       	sbci	r25, 0xA4	; 164
     802:	00 bf       	out	0x30, r16	; 48
     804:	11 c7       	rjmp	.+3618   	; 0x1628 <OXYMETER_PROMPT+0x309>
     806:	da 54       	subi	r29, 0x4A	; 74
     808:	49 e5       	ldi	r20, 0x59	; 89
     80a:	50 45       	sbci	r21, 0x50	; 80
     80c:	e1 50       	subi	r30, 0x01	; 1
     80e:	2a a3       	std	Y+34, r18	; 0x22
     810:	1d 24       	eor	r1, r13
     812:	15 00       	.word	0x0015	; ????
     814:	c0 1b       	sub	r28, r16
     816:	0b 09       	sbc	r16, r11
     818:	d9 c5       	rjmp	.+2994   	; 0x13cc <OXYMETER_PROMPT+0xad>
     81a:	61 72       	andi	r22, 0x21	; 33
     81c:	60 1c       	adc	r6, r0
     81e:	79 0e       	add	r7, r25
     820:	99 97       	sbiw	r26, 0x29	; 41
     822:	25 d2       	rcall	.+1098   	; 0xc6e <__stack+0x40f>
     824:	c9 50       	subi	r28, 0x09	; 9
     826:	26 5b       	subi	r18, 0xB6	; 182
     828:	92 8a       	std	Z+18, r9	; 0x12
     82a:	0e 92       	st	-X, r0
     82c:	83 9d       	mul	r24, r3
     82e:	2e c1       	rjmp	.+604    	; 0xa8c <__stack+0x22d>
     830:	1b 0b       	sbc	r17, r27
     832:	09 59       	subi	r16, 0x99	; 153
     834:	c7 41       	sbci	r28, 0x17	; 23
     836:	72 48       	sbci	r23, 0x82	; 130
     838:	1c 7d       	andi	r17, 0xDC	; 220
     83a:	0e 99       	sbic	0x01, 6	; 1
     83c:	97 25       	eor	r25, r7
     83e:	d2 c9       	rjmp	.-3164   	; 0xfffffbe4 <__eeprom_end+0xff7efbe4>
     840:	50 26       	eor	r5, r16
     842:	5b 92       	.word	0x925b	; ????
     844:	8a 0e       	add	r8, r26
     846:	92 83       	std	Z+2, r25	; 0x02
     848:	9d 2e       	mov	r9, r29
     84a:	c2 1b       	sub	r28, r18
     84c:	0b 09       	sbc	r16, r11
     84e:	d9 c6       	rjmp	.+3506   	; 0x1602 <OXYMETER_PROMPT+0x2e3>
     850:	41 f3       	breq	.-48     	; 0x822 <__DATA_REGION_LENGTH__+0x22>
     852:	58 1c       	adc	r5, r8
     854:	71 0e       	add	r7, r17
     856:	99 97       	sbiw	r26, 0x29	; 41
     858:	25 d2       	rcall	.+1098   	; 0xca4 <__stack+0x445>
     85a:	c9 50       	subi	r28, 0x09	; 9
     85c:	26 5b       	subi	r18, 0xB6	; 182
     85e:	92 8a       	std	Z+18, r9	; 0x12
     860:	0e 92       	st	-X, r0
     862:	83 9d       	mul	r24, r3
     864:	2e c3       	rjmp	.+1628   	; 0xec2 <QR_CODE+0x1a3>
     866:	1b fb       	.word	0xfb1b	; ????
     868:	08 59       	subi	r16, 0x98	; 152
     86a:	4e a2       	std	Y+38, r4	; 0x26
     86c:	91 39       	cpi	r25, 0x91	; 145
     86e:	e2 1c       	adc	r14, r2
     870:	32 2f       	mov	r19, r18
     872:	4b a4       	ldd	r4, Y+43	; 0x2b
     874:	93 a1       	ldd	r25, Z+35	; 0x23
     876:	4c b6       	in	r4, 0x3c	; 60
     878:	24 15       	cp	r18, r4
     87a:	1d 24       	eor	r1, r13
     87c:	07 3b       	cpi	r16, 0xB7	; 183
     87e:	5d 00       	.word	0x005d	; ????
     880:	c4 1b       	sub	r28, r20
     882:	fb 08       	sbc	r15, r11
     884:	59 c9       	rjmp	.-3406   	; 0xfffffb38 <__eeprom_end+0xff7efb38>
     886:	84 32       	cpi	r24, 0x24	; 36
     888:	39 da       	rcall	.-2958   	; 0xfffffcfc <__eeprom_end+0xff7efcfc>
     88a:	1c 32       	cpi	r17, 0x2C	; 44
     88c:	2f 4b       	sbci	r18, 0xBF	; 191
     88e:	a4 93       	xch	Z, r26
     890:	a1 4c       	sbci	r26, 0xC1	; 193
     892:	b6 24       	eor	r11, r6
     894:	15 1d       	adc	r17, r5
     896:	24 07       	cpc	r18, r20
     898:	3b 5d       	subi	r19, 0xDB	; 219
     89a:	00 c5       	rjmp	.+2560   	; 0x129c <ECG_PROMPT+0x37d>
     89c:	1e 0b       	sbc	r17, r30
     89e:	09 59       	subi	r16, 0x99	; 153
     8a0:	ca 21       	and	r28, r10
     8a2:	a1 78       	andi	r26, 0x81	; 129
     8a4:	28 0e       	add	r2, r24
     8a6:	91 83       	std	Z+1, r25	; 0x01
     8a8:	e6 90       	elpm	r14, Z
     8aa:	79 59       	subi	r23, 0x99	; 153
     8ac:	22 9d       	mul	r18, r2
     8ae:	0c 65       	ori	r16, 0x5C	; 92
     8b0:	b2 25       	eor	r27, r2
     8b2:	a9 e8       	ldi	r26, 0x89	; 137
     8b4:	20 39       	cpi	r18, 0x90	; 144
     8b6:	d8 e9       	ldi	r29, 0x98	; 152
     8b8:	02 c6       	rjmp	.+3076   	; 0x14be <OXYMETER_PROMPT+0x19f>
     8ba:	1c ce       	rjmp	.-968    	; 0x4f4 <__EEPROM_REGION_LENGTH__+0xf4>
     8bc:	08 df       	rcall	.-496    	; 0x6ce <__EEPROM_REGION_LENGTH__+0x2ce>
     8be:	1d 68       	ori	r17, 0x8D	; 141
     8c0:	07 9a       	sbi	0x00, 7	; 0
     8c2:	44 0e       	add	r4, r20
     8c4:	11 c9       	rjmp	.-3550   	; 0xfffffae8 <__eeprom_end+0xff7efae8>
     8c6:	21 22       	and	r2, r17
     8c8:	39 44       	sbci	r19, 0x49	; 73
     8ca:	74 92       	xch	Z, r7
     8cc:	9d ee       	ldi	r25, 0xED	; 237
     8ce:	67 a1       	ldd	r22, Z+39	; 0x27
     8d0:	58 78       	andi	r21, 0x88	; 136
     8d2:	18 1e       	adc	r1, r24
     8d4:	02 c7       	rjmp	.+3588   	; 0x16da <OXYMETER_PROMPT+0x3bb>
     8d6:	1b 0a       	sbc	r1, r27
     8d8:	cb d8       	rcall	.-3690   	; 0xfffffa70 <__eeprom_end+0xff7efa70>
     8da:	15 4f       	sbci	r17, 0xF5	; 245
     8dc:	b3 89       	ldd	r27, Z+19	; 0x13
     8de:	b4 2e       	mov	r11, r20
     8e0:	87 c8       	rjmp	.-3826   	; 0xfffff9f0 <__eeprom_end+0xff7ef9f0>
     8e2:	21 73       	andi	r18, 0x31	; 49
     8e4:	88 54       	subi	r24, 0x48	; 72
     8e6:	32 1b       	sub	r19, r18
     8e8:	1d eb       	ldi	r17, 0xBD	; 189
     8ea:	71 90       	ld	r7, Z+
     8ec:	38 24       	eor	r3, r8
     8ee:	9e 01       	movw	r18, r28
     8f0:	c8 14       	cp	r12, r8
     8f2:	08 0b       	sbc	r16, r24
     8f4:	55 c5       	rjmp	.+2730   	; 0x13a0 <OXYMETER_PROMPT+0x81>
     8f6:	e5 90       	lpm	r14, Z+
     8f8:	38 f0       	brcs	.+14     	; 0x908 <__stack+0xa9>
     8fa:	70 20       	and	r7, r0
     8fc:	2b 5f       	subi	r18, 0xFB	; 251
     8fe:	2e 62       	ori	r18, 0x2E	; 46
     900:	e5 c3       	rjmp	.+1994   	; 0x10cc <ECG_PROMPT+0x1ad>
     902:	41 00       	.word	0x0041	; ????
     904:	c9 13       	cpse	r28, r25
     906:	08 0b       	sbc	r16, r24
     908:	d5 86       	std	Z+13, r13	; 0x0d
     90a:	a5 71       	andi	r26, 0x15	; 21
     90c:	e8 e1       	ldi	r30, 0x18	; 24
     90e:	40 56       	subi	r20, 0x60	; 96
     910:	be 5c       	subi	r27, 0xCE	; 206
     912:	c4 ca       	rjmp	.-2680   	; 0xfffffe9c <__eeprom_end+0xff7efe9c>
     914:	87 83       	std	Z+7, r24	; 0x07
     916:	00 ca       	rjmp	.-3072   	; 0xfffffd18 <__eeprom_end+0xff7efd18>
     918:	14 08       	sbc	r1, r4
     91a:	0b 55       	subi	r16, 0x5B	; 91
     91c:	86 87       	std	Z+14, r24	; 0x0e
     91e:	b1 38       	cpi	r27, 0x81	; 129
     920:	e8 70       	andi	r30, 0x08	; 8
     922:	20 2b       	or	r18, r16
     924:	5f 2e       	mov	r5, r31
     926:	62 e5       	ldi	r22, 0x52	; 82
     928:	c3 41       	sbci	r28, 0x13	; 19
     92a:	00 cb       	rjmp	.-2560   	; 0xffffff2c <__eeprom_end+0xff7eff2c>
     92c:	12 f8       	bld	r1, 2
     92e:	0a d5       	rcall	.+2580   	; 0x1344 <OXYMETER_PROMPT+0x25>
     930:	88 b4       	in	r8, 0x28	; 40
     932:	83 0e       	add	r8, r19
     934:	07 b2       	in	r0, 0x17	; 23
     936:	f2 e5       	ldi	r31, 0x52	; 82
     938:	22 56       	subi	r18, 0x62	; 98
     93a:	3e 1c       	adc	r3, r14
     93c:	04 cc       	rjmp	.-2040   	; 0x146 <__trampolines_end+0xf2>
     93e:	0b 03       	fmul	r16, r19
     940:	09 49       	sbci	r16, 0x99	; 153
     942:	84 64       	ori	r24, 0x44	; 68
     944:	41 89       	ldd	r20, Z+17	; 0x11
     946:	fe 07       	cpc	r31, r30
     948:	cd 0b       	sbc	r28, r29
     94a:	03 0b       	sbc	r16, r19
     94c:	49 45       	sbci	r20, 0x59	; 89
     94e:	a6 12       	cpse	r10, r22
     950:	fd 2f       	mov	r31, r29
     952:	00 ce       	rjmp	.-1024   	; 0x554 <__EEPROM_REGION_LENGTH__+0x154>
     954:	0d 05       	cpc	r16, r13
     956:	09 49       	sbci	r16, 0x99	; 153
     958:	c5 26       	eor	r12, r21
     95a:	b1 b0       	in	r11, 0x01	; 1
     95c:	4c ff       	.word	0xff4c	; ????
     95e:	13 00       	.word	0x0013	; ????
     960:	cf 0d       	add	r28, r15
     962:	f6 06       	cpc	r15, r22
     964:	49 88       	ldd	r4, Y+17	; 0x11
     966:	48 72       	andi	r20, 0x28	; 40
     968:	88 50       	subi	r24, 0x08	; 8
     96a:	ff 13       	cpse	r31, r31
     96c:	00 d0       	rcall	.+0      	; 0x96e <__stack+0x10f>
     96e:	19 cc       	rjmp	.-1998   	; 0x1a2 <__trampolines_end+0x14e>
     970:	08 59       	subi	r16, 0x98	; 152
     972:	99 0f       	add	r25, r25
     974:	41 e1       	ldi	r20, 0x11	; 17
     976:	4c 2a       	or	r4, r28
     978:	93 1e       	adc	r9, r19
     97a:	84 87       	std	Z+12, r24	; 0x0c
     97c:	a0 48       	sbci	r26, 0x80	; 128
     97e:	3a 92       	st	-Y, r3
     980:	ca 84       	ldd	r12, Y+10	; 0x0a
     982:	b3 43       	sbci	r27, 0x33	; 51
     984:	d0 08       	sbc	r13, r0
     986:	d1 1a       	sub	r13, r17
     988:	fa 0a       	sbc	r15, r26
     98a:	d9 4d       	sbci	r29, 0xD9	; 217
     98c:	82 91       	ld	r24, -Z
     98e:	39 78       	andi	r19, 0x89	; 137
     990:	6a 34       	cpi	r22, 0x4A	; 74
     992:	52 64       	ori	r21, 0x42	; 66
     994:	14 19       	sub	r17, r4
     996:	49 44       	sbci	r20, 0x49	; 73
     998:	12 d1       	rcall	.+548    	; 0xbbe <__stack+0x35f>
     99a:	24 34       	cpi	r18, 0x44	; 68
     99c:	09 d1       	rcall	.+530    	; 0xbb0 <__stack+0x351>
     99e:	75 00       	.word	0x0075	; ????
     9a0:	d2 1a       	sub	r13, r18
     9a2:	0b 0b       	sbc	r16, r27
     9a4:	5b c6       	rjmp	.+3254   	; 0x165c <OXYMETER_PROMPT+0x33d>
     9a6:	61 72       	andi	r22, 0x21	; 33
     9a8:	60 1c       	adc	r6, r0
     9aa:	b1 7a       	andi	r27, 0xA1	; 161
     9ac:	5b 92       	.word	0x925b	; ????
     9ae:	4a a6       	std	Y+42, r4	; 0x2a
     9b0:	75 7a       	andi	r23, 0xA5	; 165
     9b2:	75 22       	and	r7, r21
     9b4:	15 cd       	rjmp	.-1494   	; 0x3e0 <__trampolines_end+0x38c>
     9b6:	66 d7       	rcall	.+3788   	; 0x1884 <u8g2_DrawXBMP+0x3c>
     9b8:	1a 00       	.word	0x001a	; ????
     9ba:	d3 1a       	sub	r13, r19
     9bc:	0b 0b       	sbc	r16, r27
     9be:	db c7       	rjmp	.+4022   	; 0x1976 <u8g2_ClearBuffer+0x2>
     9c0:	41 72       	andi	r20, 0x21	; 33
     9c2:	48 1c       	adc	r4, r8
     9c4:	b5 7a       	andi	r27, 0xA5	; 165
     9c6:	5b 92       	.word	0x925b	; ????
     9c8:	4a a6       	std	Y+42, r4	; 0x2a
     9ca:	75 7a       	andi	r23, 0xA5	; 165
     9cc:	75 22       	and	r7, r21
     9ce:	15 cd       	rjmp	.-1494   	; 0x3fa <__trampolines_end+0x3a6>
     9d0:	66 d7       	rcall	.+3788   	; 0x189e <u8g2_DrawXBMP+0x56>
     9d2:	1a 00       	.word	0x001a	; ????
     9d4:	d4 1a       	sub	r13, r20
     9d6:	0b 0b       	sbc	r16, r27
     9d8:	db c6       	rjmp	.+3510   	; 0x1790 <u8g2_DrawHXBMP+0x32>
     9da:	41 f3       	breq	.-48     	; 0x9ac <__stack+0x14d>
     9dc:	58 1c       	adc	r5, r8
     9de:	ad 7a       	andi	r26, 0xAD	; 173
     9e0:	5b 92       	.word	0x925b	; ????
     9e2:	4a a6       	std	Y+42, r4	; 0x2a
     9e4:	75 7a       	andi	r23, 0xA5	; 165
     9e6:	75 22       	and	r7, r21
     9e8:	15 cd       	rjmp	.-1494   	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
     9ea:	66 d7       	rcall	.+3788   	; 0x18b8 <u8g2_DrawXBMP+0x70>
     9ec:	1a 00       	.word	0x001a	; ????
     9ee:	d5 19       	sub	r29, r5
     9f0:	fb 0a       	sbc	r15, r27
     9f2:	5b 4e       	sbci	r21, 0xEB	; 235
     9f4:	a2 91       	ld	r26, -Z
     9f6:	39 5a       	subi	r19, 0xA9	; 169
     9f8:	f5 b6       	in	r15, 0x35	; 53
     9fa:	24 95       	.word	0x9524	; ????
     9fc:	4c eb       	ldi	r20, 0xBC	; 188
     9fe:	f4 ea       	ldi	r31, 0xA4	; 164
     a00:	44 2a       	or	r4, r20
     a02:	9a cd       	rjmp	.-1228   	; 0x538 <__EEPROM_REGION_LENGTH__+0x138>
     a04:	ae 35       	cpi	r26, 0x5E	; 94
     a06:	00 d6       	rcall	.+3072   	; 0x1608 <OXYMETER_PROMPT+0x2e9>
     a08:	19 fb       	.word	0xfb19	; ????
     a0a:	0a db       	rcall	.-2540   	; 0x20 <__FUSE_REGION_LENGTH__+0x1e>
     a0c:	89 a4       	ldd	r8, Y+41	; 0x29
     a0e:	22 39       	cpi	r18, 0x92	; 146
     a10:	52 f5       	brpl	.+84     	; 0xa66 <__stack+0x207>
     a12:	b6 24       	eor	r11, r6
     a14:	95 4c       	sbci	r25, 0xC5	; 197
     a16:	eb f4       	brvc	.+58     	; 0xa52 <__stack+0x1f3>
     a18:	ea 44       	sbci	r30, 0x4A	; 74
     a1a:	2a 9a       	sbi	0x05, 2	; 5
     a1c:	cd ae       	std	Y+61, r12	; 0x3d
     a1e:	35 00       	.word	0x0035	; ????
     a20:	d7 12       	cpse	r13, r23
     a22:	99 08       	sbc	r9, r9
     a24:	d5 44       	sbci	r29, 0x45	; 69
     a26:	23 b3       	in	r18, 0x13	; 19
     a28:	c9 5a       	subi	r28, 0xA9	; 169
     a2a:	75 5a       	subi	r23, 0xA5	; 165
     a2c:	9b ac       	ldd	r9, Y+59	; 0x3b
     a2e:	4d a2       	std	Y+37, r4	; 0x25
     a30:	11 00       	.word	0x0011	; ????
     a32:	d8 1c       	adc	r13, r8
     a34:	cb 0a       	sbc	r12, r27
     a36:	db 95       	.word	0x95db	; ????
     a38:	42 87       	std	Z+10, r20	; 0x0a
     a3a:	d0 50       	subi	r29, 0x00	; 0
     a3c:	24 9c       	mul	r2, r4
     a3e:	cc 24       	eor	r12, r12
     a40:	34 11       	cpse	r19, r4
     a42:	49 46       	sbci	r20, 0x69	; 105
     a44:	91 4d       	sbci	r25, 0xD1	; 209
     a46:	86 22       	and	r8, r22
     a48:	e1 e8       	ldi	r30, 0x81	; 129
     a4a:	10 0a       	sbc	r1, r16
     a4c:	d5 00       	.word	0x00d5	; ????
     a4e:	d9 12       	cpse	r13, r25
     a50:	0a 0b       	sbc	r16, r26
     a52:	d9 c5       	rjmp	.+2994   	; 0x1606 <OXYMETER_PROMPT+0x2e7>
     a54:	41 72       	andi	r20, 0x21	; 33
     a56:	58 1c       	adc	r5, r8
     a58:	2e e6       	ldi	r18, 0x6E	; 110
     a5a:	9f 8b       	std	Y+23, r25	; 0x17
     a5c:	93 43       	sbci	r25, 0x33	; 51
     a5e:	cc 04       	cpc	r12, r12
     a60:	da 12       	cpse	r13, r26
     a62:	0a 0b       	sbc	r16, r26
     a64:	59 c7       	rjmp	.+3762   	; 0x1918 <u8g2_send_buffer+0x3c>
     a66:	21 f2       	breq	.-120    	; 0x9f0 <__stack+0x191>
     a68:	38 8a       	std	Y+16, r3	; 0x10
     a6a:	98 7f       	andi	r25, 0xF8	; 248
     a6c:	2e 4e       	sbci	r18, 0xEE	; 238
     a6e:	0e 31       	cpi	r16, 0x1E	; 30
     a70:	13 00       	.word	0x0013	; ????
     a72:	db 12       	cpse	r13, r27
     a74:	0a 0b       	sbc	r16, r26
     a76:	d9 c6       	rjmp	.+3506   	; 0x182a <u8g2_DrawHXBMP+0xcc>
     a78:	21 e3       	ldi	r18, 0x31	; 49
     a7a:	58 1c       	adc	r5, r8
     a7c:	2a e6       	ldi	r18, 0x6A	; 106
     a7e:	9f 8b       	std	Y+23, r25	; 0x17
     a80:	93 43       	sbci	r25, 0x33	; 51
     a82:	cc 04       	cpc	r12, r12
     a84:	dc 11       	cpse	r29, r12
     a86:	fa 0a       	sbc	r15, r26
     a88:	59 29       	or	r21, r9
     a8a:	8a e4       	ldi	r24, 0x4A	; 74
     a8c:	50 31       	cpi	r21, 0x10	; 16
     a8e:	ff 5c       	subi	r31, 0xCF	; 207
     a90:	9c 1c       	adc	r9, r12
     a92:	62 26       	eor	r6, r18
     a94:	00 dd       	rcall	.-1536   	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
     a96:	1c 0a       	sbc	r1, r28
     a98:	09 57       	subi	r16, 0x79	; 121
     a9a:	c7 21       	and	r28, r7
     a9c:	f2 38       	cpi	r31, 0x82	; 130
     a9e:	8a b8       	out	0x0a, r8	; 10
     aa0:	38 11       	cpse	r19, r8
     aa2:	ca 44       	sbci	r28, 0x4A	; 74
     aa4:	42 91       	ld	r20, -Z
     aa6:	94 4c       	sbci	r25, 0xC4	; 196
     aa8:	97 43       	sbci	r25, 0x37	; 55
     aaa:	e4 10       	cpse	r14, r4
     aac:	39 44       	sbci	r19, 0x49	; 73
     aae:	0e 11       	cpse	r16, r14
     ab0:	02 de       	rcall	.-1020   	; 0x6b6 <__EEPROM_REGION_LENGTH__+0x2b6>
     ab2:	11 c9       	rjmp	.-3550   	; 0xfffffcd6 <__eeprom_end+0xff7efcd6>
     ab4:	0a 57       	subi	r16, 0x7A	; 122
     ab6:	c8 4f       	sbci	r28, 0xF8	; 248
     ab8:	87 88       	ldd	r8, Z+23	; 0x17
     aba:	b0 ca       	rjmp	.-2720   	; 0x1c <__FUSE_REGION_LENGTH__+0x1a>
     abc:	78 a0       	ldd	r7, Y+32	; 0x20
     abe:	9c e4       	ldi	r25, 0x4C	; 76
     ac0:	ea 00       	.word	0x00ea	; ????
     ac2:	df 14       	cp	r13, r15
     ac4:	c8 0a       	sbc	r12, r24
     ac6:	d5 94       	asr	r13
     ac8:	2e 32       	cpi	r18, 0x2E	; 46
     aca:	89 4c       	sbci	r24, 0xC9	; 201
     acc:	22 19       	sub	r18, r2
     ace:	49 28       	or	r4, r9
     ad0:	42 5e       	subi	r20, 0xE2	; 226
     ad2:	28 92       	.word	0x9228	; ????
     ad4:	11 00       	.word	0x0011	; ????
     ad6:	e0 15       	cp	r30, r0
     ad8:	d8 0a       	sbc	r13, r24
     ada:	53 c5       	rjmp	.+2726   	; 0x1582 <OXYMETER_PROMPT+0x263>
     adc:	e5 90       	lpm	r14, Z+
     ade:	38 b4       	in	r3, 0x28	; 40
     ae0:	74 91       	lpm	r23, Z
     ae2:	49 47       	sbci	r20, 0x79	; 121
     ae4:	96 91       	elpm	r25, Z
     ae6:	44 26       	eor	r4, r20
     ae8:	39 4d       	sbci	r19, 0xD9	; 217
     aea:	06 e1       	ldi	r16, 0x16	; 22
     aec:	14 d8       	rcall	.-4056   	; 0xfffffb16 <__eeprom_end+0xff7efb16>
     aee:	0a d3       	rcall	.+1556   	; 0x1104 <ECG_PROMPT+0x1e5>
     af0:	86 a5       	ldd	r24, Z+46	; 0x2e
     af2:	71 70       	andi	r23, 0x01	; 1
     af4:	e9 22       	and	r14, r25
     af6:	93 8e       	std	Z+27, r9	; 0x1b
     af8:	2c 23       	and	r18, r28
     afa:	89 4c       	sbci	r24, 0xC9	; 201
     afc:	72 9a       	sbi	0x0e, 2	; 14
     afe:	0c e2       	ldi	r16, 0x2C	; 44
     b00:	15 d8       	rcall	.-4054   	; 0xfffffb2c <__eeprom_end+0xff7efb2c>
     b02:	0a d3       	rcall	.+1556   	; 0x1118 <ECG_PROMPT+0x1f9>
     b04:	85 87       	std	Z+13, r24	; 0x0d
     b06:	b1 38       	cpi	r27, 0x81	; 129
     b08:	b0 74       	andi	r27, 0x40	; 64
     b0a:	91 49       	sbci	r25, 0x91	; 145
     b0c:	47 96       	adiw	r24, 0x17	; 23
     b0e:	91 44       	sbci	r25, 0x41	; 65
     b10:	26 39       	cpi	r18, 0x96	; 150
     b12:	4d 06       	cpc	r4, r29
     b14:	e3 15       	cp	r30, r3
     b16:	c8 0a       	sbc	r12, r24
     b18:	53 4d       	sbci	r21, 0xD3	; 211
     b1a:	42 91       	ld	r20, -Z
     b1c:	39 b0       	in	r3, 0x09	; 9
     b1e:	74 91       	lpm	r23, Z
     b20:	49 47       	sbci	r20, 0x79	; 121
     b22:	96 91       	elpm	r25, Z
     b24:	44 26       	eor	r4, r20
     b26:	39 4d       	sbci	r19, 0xD9	; 217
     b28:	06 e4       	ldi	r16, 0x46	; 70
     b2a:	14 c8       	rjmp	.-4056   	; 0xfffffb54 <__eeprom_end+0xff7efb54>
     b2c:	0a d3       	rcall	.+1556   	; 0x1142 <ECG_PROMPT+0x223>
     b2e:	a8 49       	sbci	r26, 0x98	; 152
     b30:	e4 c0       	rjmp	.+456    	; 0xcfa <__stack+0x49b>
     b32:	d2 45       	sbci	r29, 0x52	; 82
     b34:	26 1d       	adc	r18, r6
     b36:	59 46       	sbci	r21, 0x69	; 105
     b38:	12 99       	sbic	0x02, 2	; 2
     b3a:	e4 34       	cpi	r30, 0x44	; 68
     b3c:	19 e5       	ldi	r17, 0x59	; 89
     b3e:	16 d8       	rcall	.-4052   	; 0xfffffb6c <__eeprom_end+0xff7efb6c>
     b40:	0a d3       	rcall	.+1556   	; 0x1156 <ECG_PROMPT+0x237>
     b42:	49 43       	sbci	r20, 0x39	; 57
     b44:	c1 50       	subi	r28, 0x01	; 1
     b46:	54 58       	subi	r21, 0x84	; 132
     b48:	ba c8       	rjmp	.-3724   	; 0xfffffcbe <__eeprom_end+0xff7efcbe>
     b4a:	a4 23       	and	r26, r20
     b4c:	cb 48       	sbci	r28, 0x8B	; 139
     b4e:	22 93       	st	-Z, r18
     b50:	9c 26       	eor	r9, r28
     b52:	03 e6       	ldi	r16, 0x63	; 99
     b54:	17 9d       	mul	r17, r7
     b56:	0a df       	rcall	.-492    	; 0x96c <__stack+0x10d>
     b58:	54 48       	sbci	r21, 0x84	; 132
     b5a:	87 8a       	std	Z+23, r8	; 0x17
     b5c:	4c 28       	or	r4, r12
     b5e:	3c 48       	sbci	r19, 0x8C	; 140
     b60:	0e 87       	std	Y+14, r16	; 0x0e
     b62:	90 58       	subi	r25, 0x80	; 128
     b64:	44 3a       	cpi	r20, 0xA4	; 164
     b66:	1c 42       	sbci	r17, 0x2C	; 44
     b68:	4c 00       	.word	0x004c	; ????
     b6a:	e7 13       	cpse	r30, r23
     b6c:	d8 ca       	rjmp	.-2640   	; 0x11e <__trampolines_end+0xca>
     b6e:	52 d1       	rcall	.+676    	; 0xe14 <QR_CODE+0xf5>
     b70:	2c a3       	std	Y+36, r18	; 0x24
     b72:	b2 f2       	brmi	.-84     	; 0xb20 <__stack+0x2c1>
     b74:	68 62       	ori	r22, 0x28	; 40
     b76:	a3 c6       	rjmp	.+3398   	; 0x18be <u8g2_DrawXBMP+0x76>
     b78:	85 21       	and	r24, r5
     b7a:	e1 0c       	add	r14, r1
     b7c:	00 e8       	ldi	r16, 0x80	; 128
     b7e:	13 d8       	rcall	.-4058   	; 0xfffffba6 <__eeprom_end+0xff7efba6>
     b80:	0a 55       	subi	r16, 0x5A	; 90
     b82:	c5 e5       	ldi	r28, 0x55	; 85
     b84:	90 38       	cpi	r25, 0x80	; 128
     b86:	98 66       	ori	r25, 0x68	; 104
     b88:	11 1e       	adc	r1, r17
     b8a:	0e e6       	ldi	r16, 0x6E	; 110
     b8c:	d1 c4       	rjmp	.+2466   	; 0x1530 <OXYMETER_PROMPT+0x211>
     b8e:	46 02       	muls	r20, r22
     b90:	e9 12       	cpse	r14, r25
     b92:	d8 0a       	sbc	r13, r24
     b94:	d5 86       	std	Z+13, r13	; 0x0d
     b96:	a5 71       	andi	r26, 0x15	; 21
     b98:	38 cd       	rjmp	.-1424   	; 0x60a <__EEPROM_REGION_LENGTH__+0x20a>
     b9a:	22 3c       	cpi	r18, 0xC2	; 194
     b9c:	1c cc       	rjmp	.-1992   	; 0x3d6 <__trampolines_end+0x382>
     b9e:	a3 89       	ldd	r26, Z+19	; 0x13
     ba0:	8d 04       	cpc	r8, r13
     ba2:	ea 13       	cpse	r30, r26
     ba4:	d8 0a       	sbc	r13, r24
     ba6:	55 86       	std	Z+13, r5	; 0x0d
     ba8:	87 b1       	in	r24, 0x07	; 7
     baa:	38 90       	.word	0x9038	; ????
     bac:	66 11       	cpse	r22, r6
     bae:	1e 0e       	add	r1, r30
     bb0:	e6 d1       	rcall	.+972    	; 0xf7e <ECG_PROMPT+0x5f>
     bb2:	c4 46       	sbci	r28, 0x64	; 100
     bb4:	02 eb       	ldi	r16, 0xB2	; 178
     bb6:	13 c8       	rjmp	.-4058   	; 0xfffffbde <__eeprom_end+0xff7efbde>
     bb8:	0a 55       	subi	r16, 0x5A	; 90
     bba:	49 64       	ori	r20, 0x49	; 73
     bbc:	12 39       	cpi	r17, 0x92	; 146
     bbe:	90 66       	ori	r25, 0x60	; 96
     bc0:	11 1e       	adc	r1, r17
     bc2:	0e e6       	ldi	r16, 0x6E	; 110
     bc4:	d1 c4       	rjmp	.+2466   	; 0x1568 <OXYMETER_PROMPT+0x249>
     bc6:	46 02       	muls	r20, r22
     bc8:	ec 0b       	sbc	r30, r28
     bca:	d3 08       	sbc	r13, r3
     bcc:	49 84       	ldd	r4, Y+9	; 0x09
     bce:	64 41       	sbci	r22, 0x14	; 20
     bd0:	89 fe       	.word	0xfe89	; ????
     bd2:	00 ed       	ldi	r16, 0xD0	; 208
     bd4:	0b d3       	rcall	.+1558   	; 0x11ec <ECG_PROMPT+0x2cd>
     bd6:	0a 49       	sbci	r16, 0x9A	; 154
     bd8:	45 a6       	std	Z+45, r4	; 0x2d
     bda:	12 fd       	sbrc	r17, 2
     bdc:	05 00       	.word	0x0005	; ????
     bde:	ee 0c       	add	r14, r14
     be0:	d5 08       	sbc	r13, r5
     be2:	49 c5       	rjmp	.+2706   	; 0x1676 <OXYMETER_PROMPT+0x357>
     be4:	26 b1       	in	r18, 0x06	; 6
     be6:	b0 4c       	sbci	r27, 0xC0	; 192
     be8:	7f 02       	muls	r23, r31
     bea:	ef 0b       	sbc	r30, r31
     bec:	c5 08       	sbc	r12, r5
     bee:	49 48       	sbci	r20, 0x89	; 137
     bf0:	28 62       	ori	r18, 0x28	; 40
     bf2:	99 fe       	.word	0xfe99	; ????
     bf4:	04 f0       	brlt	.+0      	; 0xbf6 <__stack+0x397>
     bf6:	11 c8       	rjmp	.-4062   	; 0xfffffc1a <__eeprom_end+0xff7efc1a>
     bf8:	0a d5       	rcall	.+2580   	; 0x160e <OXYMETER_PROMPT+0x2ef>
     bfa:	88 4b       	sbci	r24, 0xB8	; 184
     bfc:	e5 99       	sbic	0x1c, 5	; 28
     bfe:	65 54       	subi	r22, 0x45	; 69
     c00:	64 2c       	mov	r6, r4
     c02:	4d 6c       	ori	r20, 0xCD	; 205
     c04:	24 00       	.word	0x0024	; ????
     c06:	f1 10       	cpse	r15, r1
     c08:	c8 0a       	sbc	r12, r24
     c0a:	55 4d       	sbci	r21, 0xD5	; 213
     c0c:	42 91       	ld	r20, -Z
     c0e:	39 4c       	sbci	r19, 0xC9	; 201
     c10:	42 39       	cpi	r20, 0x92	; 146
     c12:	d0 88       	ldd	r13, Z+16	; 0x10
     c14:	7c 14       	cp	r7, r12
     c16:	f2 13       	cpse	r31, r18
     c18:	d8 0a       	sbc	r13, r24
     c1a:	55 c5       	rjmp	.+2730   	; 0x16c6 <OXYMETER_PROMPT+0x3a7>
     c1c:	e5 90       	lpm	r14, Z+
     c1e:	38 98       	cbi	0x07, 0	; 7
     c20:	66 19       	sub	r22, r6
     c22:	15 19       	sub	r17, r5
     c24:	4b 13       	cpse	r20, r27
     c26:	1b 09       	sbc	r17, r11
     c28:	00 f3       	brcs	.-64     	; 0xbea <__stack+0x38b>
     c2a:	12 d8       	rcall	.-4060   	; 0xfffffc50 <__eeprom_end+0xff7efc50>
     c2c:	0a 55       	subi	r16, 0x5A	; 90
     c2e:	86 a5       	ldd	r24, Z+46	; 0x2e
     c30:	71 14       	cp	r7, r1
     c32:	9a 65       	ori	r25, 0x5A	; 90
     c34:	54 64       	ori	r21, 0x44	; 68
     c36:	2c 4d       	sbci	r18, 0xDC	; 220
     c38:	6c 24       	eor	r6, r12
     c3a:	00 f4       	brcc	.+0      	; 0xc3c <__stack+0x3dd>
     c3c:	13 d8       	rcall	.-4058   	; 0xfffffc64 <__eeprom_end+0xff7efc64>
     c3e:	0a d5       	rcall	.+2580   	; 0x1654 <OXYMETER_PROMPT+0x335>
     c40:	85 87       	std	Z+13, r24	; 0x0d
     c42:	b1 38       	cpi	r27, 0x81	; 129
     c44:	94 66       	ori	r25, 0x64	; 100
     c46:	19 15       	cp	r17, r9
     c48:	19 4b       	sbci	r17, 0xB9	; 185
     c4a:	13 1b       	sub	r17, r19
     c4c:	09 00       	.word	0x0009	; ????
     c4e:	f5 13       	cpse	r31, r21
     c50:	c8 0a       	sbc	r12, r24
     c52:	55 4d       	sbci	r21, 0xD5	; 213
     c54:	42 91       	ld	r20, -Z
     c56:	39 94       	.word	0x9439	; ????
     c58:	66 19       	sub	r22, r6
     c5a:	15 19       	sub	r17, r5
     c5c:	4b 13       	cpse	r20, r27
     c5e:	1b 09       	sbc	r17, r11
     c60:	00 f6       	brcc	.-128    	; 0xbe2 <__stack+0x383>
     c62:	12 c8       	rjmp	.-4060   	; 0xfffffc88 <__eeprom_end+0xff7efc88>
     c64:	0a d5       	rcall	.+2580   	; 0x167a <OXYMETER_PROMPT+0x35b>
     c66:	a8 49       	sbci	r26, 0x98	; 152
     c68:	e4 50       	subi	r30, 0x04	; 4
     c6a:	9a 65       	ori	r25, 0x5A	; 90
     c6c:	54 64       	ori	r21, 0x44	; 68
     c6e:	2c 4d       	sbci	r18, 0xDC	; 220
     c70:	6c 24       	eor	r6, r12
     c72:	00 f7       	brcc	.-64     	; 0xc34 <__stack+0x3d5>
     c74:	0e 88       	ldd	r0, Y+22	; 0x16
     c76:	0a d5       	rcall	.+2580   	; 0x168c <OXYMETER_PROMPT+0x36d>
     c78:	89 e5       	ldi	r24, 0x59	; 89
     c7a:	c0 c3       	rjmp	.+1920   	; 0x13fc <OXYMETER_PROMPT+0xdd>
     c7c:	41 0e       	add	r4, r17
     c7e:	14 cb       	rjmp	.-2520   	; 0x2a8 <__trampolines_end+0x254>
     c80:	00 f8       	bld	r0, 0
     c82:	12 98       	cbi	0x02, 2	; 2
     c84:	0a 55       	subi	r16, 0x5A	; 90
     c86:	51 22       	and	r5, r17
     c88:	87 51       	subi	r24, 0x17	; 23
     c8a:	c9 22       	and	r12, r25
     c8c:	31 95       	neg	r19
     c8e:	0e 93       	st	-X, r16
     c90:	08 09       	sbc	r16, r8
     c92:	00 f9       	bld	r16, 0
     c94:	10 d8       	rcall	.-4064   	; 0xfffffcb6 <__eeprom_end+0xff7efcb6>
     c96:	0a 55       	subi	r16, 0x5A	; 90
     c98:	c5 e5       	ldi	r28, 0x55	; 85
     c9a:	90 38       	cpi	r25, 0x80	; 128
     c9c:	50 c8       	rjmp	.-3936   	; 0xfffffd3e <__eeprom_end+0xff7efd3e>
     c9e:	6f 07       	cpc	r22, r31
     ca0:	0a 45       	sbci	r16, 0x5A	; 90
     ca2:	00 fa       	bst	r0, 0
     ca4:	0f d8       	rcall	.-4066   	; 0xfffffcc4 <__eeprom_end+0xff7efcc4>
     ca6:	0a 55       	subi	r16, 0x5A	; 90
     ca8:	86 a5       	ldd	r24, Z+46	; 0x2e
     caa:	71 b0       	in	r7, 0x01	; 1
     cac:	90 df       	rcall	.-224    	; 0xbce <__stack+0x36f>
     cae:	0e 14       	cp	r0, r14
     cb0:	8a 00       	.word	0x008a	; ????
     cb2:	fb 10       	cpse	r15, r11
     cb4:	d8 0a       	sbc	r13, r24
     cb6:	d5 85       	ldd	r29, Z+13	; 0x0d
     cb8:	87 b1       	in	r24, 0x07	; 7
     cba:	38 4c       	sbci	r19, 0xC8	; 200
     cbc:	c8 6f       	ori	r28, 0xF8	; 248
     cbe:	07 0a       	sbc	r0, r23
     cc0:	45 00       	.word	0x0045	; ????
     cc2:	fc 0f       	add	r31, r28
     cc4:	c8 0a       	sbc	r12, r24
     cc6:	d5 a8       	ldd	r13, Z+53	; 0x35
     cc8:	49 e4       	ldi	r20, 0x49	; 73
     cca:	30 21       	and	r19, r0
     ccc:	bf 1d       	adc	r27, r15
     cce:	28 14       	cp	r2, r8
     cd0:	01 fd       	sbrc	r16, 1
     cd2:	19 18       	sub	r1, r9
     cd4:	c9 d2       	rcall	.+1426   	; 0x1268 <ECG_PROMPT+0x349>
     cd6:	86 a5       	ldd	r24, Z+46	; 0x2e
     cd8:	71 a8       	ldd	r7, Z+49	; 0x31
     cda:	90 28       	or	r9, r0
     cdc:	91 49       	sbci	r25, 0x91	; 145
     cde:	44 32       	cpi	r20, 0x24	; 36
     ce0:	89 4c       	sbci	r24, 0xC9	; 201
     ce2:	22 a3       	std	Z+34, r18	; 0x22
     ce4:	4e c5       	rjmp	.+2716   	; 0x1782 <u8g2_DrawHXBMP+0x24>
     ce6:	8a 53       	subi	r24, 0x3A	; 58
     ce8:	29 00       	.word	0x0029	; ????
     cea:	fe 13       	cpse	r31, r30
     cec:	08 cb       	rjmp	.-2544   	; 0x2fe <__trampolines_end+0x2aa>
     cee:	54 88       	ldd	r5, Z+20	; 0x14
     cf0:	b5 8c       	ldd	r11, Z+29	; 0x1d
     cf2:	2e a3       	std	Y+38, r18	; 0x26
     cf4:	22 63       	ori	r18, 0x32	; 50
     cf6:	e9 30       	cpi	r30, 0x09	; 9
     cf8:	91 8c       	ldd	r9, Z+25	; 0x19
     cfa:	c4 9a       	sbi	0x18, 4	; 24
     cfc:	01 ff       	sbrs	r16, 1
     cfe:	1a 08       	sbc	r1, r10
     d00:	c9 52       	subi	r28, 0x29	; 41
     d02:	49 64       	ori	r20, 0x49	; 73
     d04:	12 39       	cpi	r17, 0x92	; 146
     d06:	48 48       	sbci	r20, 0x88	; 136
     d08:	94 c8       	rjmp	.-3800   	; 0xfffffe32 <__eeprom_end+0xff7efe32>
     d0a:	24 22       	and	r2, r20
     d0c:	99 44       	sbci	r25, 0x49	; 73
     d0e:	26 91       	elpm	r18, Z
     d10:	51 a7       	std	Z+41, r21	; 0x29
     d12:	62 c5       	rjmp	.+2756   	; 0x17d8 <u8g2_DrawHXBMP+0x7a>
     d14:	a9 14       	cp	r10, r9
     d16:	00 00       	nop
     d18:	00 00       	nop
     d1a:	04 ff       	sbrs	r16, 4
     d1c:	ff 00       	.word	0x00ff	; ????
	...

00000d1f <QR_CODE>:
     d1f:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     d2f:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     d3f:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     d4f:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     d5f:	ff 00 e0 1f f8 07 00 ff ff 00 e0 1f f8 07 00 ff     ................
     d6f:	ff fc e7 e1 ff e7 3f ff ff fc e7 e1 ff e7 3f ff     ......?.......?.
     d7f:	ff 0c e6 7f 78 66 30 ff ff 0c e6 7f 78 67 30 ff     ....xf0.....xg0.
     d8f:	ff 0c 66 7e 86 67 30 ff ff 0c 66 7c 86 67 30 ff     ..f~.g0...f|.g0.
     d9f:	ff 0c 66 f8 99 67 30 ff ff fc e7 1f 80 e7 3f ff     ..f..g0.......?.
     daf:	ff fc e7 1f 80 e7 3f ff ff 00 e0 66 66 07 00 ff     ......?....ff...
     dbf:	ff 00 60 66 66 06 00 ff ff ff ff 87 61 fe ff ff     ..`ff.......a...
     dcf:	ff ff ff 87 61 fe ff ff ff f8 83 99 19 7e fc ff     ....a........~..
     ddf:	ff f0 81 99 19 7e fc ff ff e0 91 79 66 18 02 ff     .....~.....yf...
     def:	ff c0 99 79 66 18 03 ff ff 3c 60 e6 1f 20 33 ff     ...yf....<`.. 3.
     dff:	ff 3c 60 e6 1f 60 33 ff ff 4c fe 79 86 19 ff ff     .<`..`3..L.y....
     e0f:	ff cc fe 79 86 19 ff ff ff 00 e7 19 80 9f c3 ff     ...y............
     e1f:	ff 00 e7 19 80 9f c3 ff ff 0c fe f9 1f e6 f3 ff     ................
     e2f:	ff 0c fe f9 1f e6 f3 ff ff fc 01 00 7e e6 3f ff     ............~.?.
     e3f:	ff fc 01 00 7e e6 3f ff ff 0c 78 9e 07 60 33 ff     ....~.?...x..`3.
     e4f:	ff 0c 70 9e 07 20 32 ff ff 0c e1 87 1f 00 30 ff     ..p.. 2.......0.
     e5f:	ff 8c e3 87 1f 00 20 ff ff ff 7f 60 18 7e 03 ff     ...... ....`.~..
     e6f:	ff ff 7f 60 18 7e 02 ff ff 00 60 86 1f 66 f0 ff     ...`.~....`..f..
     e7f:	ff 00 60 86 1f 76 f0 ff ff fc 67 7e 78 7e cf ff     ..`..v....g~x~..
     e8f:	ff fc e7 7e 38 3e df ff ff 0c e6 67 06 00 3f ff     ...~8>.....g..?.
     e9f:	ff 0c e6 fb 27 8e 37 ff ff 0c e6 f9 67 9e 33 ff     ....'.7.....g.3.
     eaf:	ff 0c e6 01 1e 86 3d ff ff 0c e6 01 1e 86 3c ff     ......=.......<.
     ebf:	ff fc e7 86 e7 01 ff ff ff fc 67 86 e7 01 ff ff     ..........g.....
     ecf:	ff 00 60 e0 81 23 1f ff ff 00 60 e0 81 67 0f ff     ..`..#....`..g..
     edf:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     eef:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     eff:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     f0f:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................

00000f1f <ECG_PROMPT>:
     f1f:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     f2f:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     f3f:	ff ff ff ff ff ff 7f 00 fc ff 07 c0 ff ff ff ff     ................
     f4f:	ff ff 1f ff ff ff 0f 00 e0 ff 00 00 ff ff ff ff     ................
     f5f:	ff ff 1f ff ff ff 07 fe c0 3f e0 0f fc ff ff ff     .........?......
     f6f:	ff ff 1f ff ff ff c3 ff 07 1f fc 7f f8 ff ff ff     ................
     f7f:	ff ff 1f ff ff ff e0 ff 1f 0e ff ff f0 ff ff ff     ................
     f8f:	ff ff 1f ff ff ff f8 ff 3f 84 ff ff e1 ff ff ff     ........?.......
     f9f:	ff ff 1f ff ff 7f fc ff 7f c0 ff ff c3 ff ff ff     ................
     faf:	ff ff 0f fe ff 3f fc ff ff e0 ff ff c7 ff ff ff     .....?..........
     fbf:	ff ff 0f fe ff 3f fe ff ff f1 ff ff 8f ff ff ff     .....?..........
     fcf:	ff ff 0f fe ff 3f fe ff ff f9 ff ff 8f ff ff ff     .....?..........
     fdf:	ff ff 0f fe ff 1f ff ff ff ff ff ff 8f ff ff ff     ................
     fef:	ff ff 0f fe ff 1f ff ff ff ff ff ff 8f ff ff ff     ................
     fff:	ff ff 0f fe ff 1f ff ff ff ff ff ff 1f ff ff ff     ................
    100f:	ff ff 0f fe ff 1f ff ff ff ff ff ff 8f ff ff ff     ................
    101f:	ff ff 0f fe ff 1f fe ff ff ff ff ff 8f ff ff ff     ................
    102f:	ff ff 07 fe 9f 3f fe ff ff ff ff ff 8f 3f ff ff     .....?.......?..
    103f:	ff ff 07 fe 8f 3f fe ff ff ff ff ff 8f 3f fe ff     .....?.......?..
    104f:	ff ff 07 fe 0f 3f fe ff ff ff ff ff 87 1f fe ff     .....?..........
    105f:	ff ff 07 fc 0f 7f fc ff ff ff ff ff c7 1f fe ff     ................
    106f:	ff ff 47 fc 0f 7f fc ff ff ff ff ff c3 1f fe ff     ..G.............
    107f:	ff ff 47 fc 0f ff f8 ff ff ff ff ff e3 1f fe ff     ..G.............
    108f:	ff ff 47 fc 07 ff f0 ff ff ff ff ff e1 1f fc ff     ..G.............
    109f:	ff ff 47 fc 07 ff f1 ff ff ff ff ff f0 1f fc ff     ..G.............
    10af:	ff ff 47 fc 07 fe e3 ff ff ff ff ff f8 1f fc ff     ..G.............
    10bf:	ff ff 63 8c 07 fe c3 ff ff ff ff 7f fc 0f fc ff     ..c.............
    10cf:	ff ff 63 8c 07 fe 87 ff ff ff ff 3f fc 0f fc ff     ..c........?....
    10df:	ff ff 63 84 07 fe 0f ff ff ff ff 1f fe 0f f8 ff     ..c.............
    10ef:	ff ff 63 00 23 fe 1f fe ff ff ff 0f ff 8f f8 ff     ..c.#...........
    10ff:	ff ff e3 00 23 be 3f fc ff ff ff 87 bf 8f f8 ff     ....#.?.........
    110f:	ff cf e3 00 22 1e 7f f8 ff ff ff c3 1f 8f f8 ff     ...."...........
    111f:	ff c7 e3 20 62 1c fe f0 ff ff ff e1 0f c7 f8 ff     ... b...........
    112f:	ff 87 e3 20 60 0c fe e1 ff ff ff f0 0f c6 f8 ff     ... `...........
    113f:	ff 83 e3 70 70 0c fc c3 ff ff 3f f8 07 c6 f1 ff     ...pp.....?.....
    114f:	ff 83 f1 70 70 0c fc 07 ff ff 1f fe 07 c6 f1 ff     ...pp...........
    115f:	ff 81 f1 f0 70 cc f8 1f fe ff 0f ff 43 c4 f1 ff     ....p.......C...
    116f:	ff 80 f1 f8 70 c4 f8 1f fc ff 07 ff 63 c4 f1 ff     ....p.......c...
    117f:	00 88 f1 f9 70 c0 00 00 f8 ff 03 00 60 c0 01 00     ....p.......`...
    118f:	00 88 f1 ff f9 c0 01 00 f8 ff 03 00 70 e0 03 00     ............p...
    119f:	ff 8f f1 ff ff e0 ff ff ff ff ff ff ff e0 ff ff     ................
    11af:	ff 8f f1 ff ff e0 ff ff ff ff ff ff ff e0 ff ff     ................
    11bf:	ff 8f f1 ff ff e0 ff ff ff ff ff ff ff e0 ff ff     ................
    11cf:	ff 9f f1 ff ff e0 ff ff ff ff ff ff ff e0 ff ff     ................
    11df:	ff 1f f9 ff ff f0 ff ff ff ff ff ff ff e1 ff ff     ................
    11ef:	ff 1f f8 ff ff f0 ff ff ff ff ff ff ff e1 ff ff     ................
    11ff:	ff 1f f8 ff ff f1 ff ff ff ff ff ff ff f1 ff ff     ................
    120f:	ff 1f f8 ff ff f9 ff ff ff ff ff ff ff f3 ff ff     ................
    121f:	ff 1f f8 ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    122f:	ff 1f f8 ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    123f:	ff 1f f8 ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    124f:	ff 1f f8 ff ff ff fe fd ff ef ff ff e7 ff ef ff     ................
    125f:	ff 3f f8 bc f9 ff fc f9 ff e7 bf ff e7 ff ef ff     .?..............
    126f:	ff 3f fc 18 f9 ff fc f9 ff e7 3f ff e7 ff e7 ff     .?........?.....
    127f:	ff 3f 7c 1a 79 e6 e4 49 df 64 3f 97 07 d3 24 fb     .?|.y..I.d?...$.
    128f:	ff 3f 7c bb f9 f6 e4 69 9e 26 3f bb 67 99 66 f9     .?|....i.&?.g.f.
    129f:	ff 3f 7c b3 19 f6 e4 09 86 66 3c bb 67 99 6e fd     .?|......f<.g.n.
    12af:	ff 3f 3c b2 d9 f6 e4 c9 9b e6 3d bb 67 9b 64 fc     .?<.......=.g.d.
    12bf:	ff 3f bc 27 13 ce e4 19 83 60 7c c6 07 c3 e0 fc     .?.'.....`|.....
    12cf:	ff 3f fc ff ff ff ff ff ff ff ff ff ff ff ff fc     .?..............
    12df:	ff 3f fc ff ff ff ff ff ff ff ff ff ff ff ff fe     .?..............
    12ef:	ff 3f fc ff ff ff ff ff ff ff ff ff ff ff ff ff     .?..............
    12ff:	ff 7f fe ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    130f:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................

0000131f <OXYMETER_PROMPT>:
    131f:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    132f:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    133f:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    134f:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    135f:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    136f:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    137f:	ff ff ff ff ff ff ff ff ff ff ff fd ff ff ff ff     ................
    138f:	ff 1f fe ff 1f ff ff ff ff ff c0 fc ff ff ff ff     ................
    139f:	ff 01 f0 ff 01 e0 ff ff ff ff 88 fc ff ff ff ff     ................
    13af:	7f 00 c0 ff 00 80 ff ff ff ff 9c fc ff ff ff ff     ................
    13bf:	1f 00 80 3f 00 00 ff ff ff ff 9c 18 3e 0e ff ff     ...?........>...
    13cf:	0f 00 00 1e 00 00 fe ff ff ff 88 1c 0c 06 fe ff     ................
    13df:	07 e0 00 0c e0 01 fc ff ff ff c0 3c cc 07 fe ff     ...........<....
    13ef:	03 fc 07 00 fc 0f f8 ff ff ff f8 1c cc 07 fe ff     ................
    13ff:	03 ff 0f 00 fe 1f f8 ff ff ff fc cc cc e7 ff ff     ................
    140f:	81 ff 3f 00 ff 3f f0 ff ff ff fc 0c 8c c6 fe ff     ..?..?..........
    141f:	c1 ff 7f 80 ff 7f f0 ff ff ff fc 1c 1c 0e fe ff     ................
    142f:	c1 ff ff c0 ff ff e0 ff ff ff ff ff ff ff ff ff     ................
    143f:	e0 ff ff e1 ff ff e0 ff ff ff ff ff ff ff ff ff     ................
    144f:	e0 ff ff fb ff ff e0 ff ff ff ff ff ff ff ff ff     ................
    145f:	e0 ff ff ff ff ff e0 ff ff ff ff ff ff ff ff ff     ................
    146f:	e0 ff ff ff ff ff e0 ff ff ff ff ff ff ff ff ff     ................
    147f:	e0 ff ff ff 03 ff e0 ff ff ff ff ff ff ff ff ff     ................
    148f:	e0 ff ff ff 00 fc e0 ff ff ff ff ff ff ff ff ff     ................
    149f:	e0 ff ff 3f 00 f0 e0 ff ff ff ff ff ff ff ff ff     ...?............
    14af:	e0 ff ff 1f 00 e0 e0 ff ff ff ff ff ff ff ff ff     ................
    14bf:	c1 ff ff 1f 00 e0 e0 ff ff ff f3 fc ff ff ff ff     ................
    14cf:	c1 ff ff 0f 00 40 80 ff ff ff 63 fe ff ff ff ff     .....@....c.....
    14df:	c1 ff ff 0f 00 00 00 fc ff ff 67 fe ff ff ff ff     ..........g.....
    14ef:	83 ff ff 07 00 00 00 f8 ff ff 07 87 77 b6 ff ff     ............w...
    14ff:	03 ff ff 07 00 00 00 f0 ff ff 0f 03 73 86 ff ff     ............s...
    150f:	07 fe ff 07 00 00 00 e0 ff ff 8f 31 72 e6 ff ff     ...........1r...
    151f:	07 fe ff 07 00 00 00 c0 ff ff 9f 79 72 e6 ff ff     ...........yr...
    152f:	0f fc ff 07 00 00 00 c0 ff ff 9f 79 72 e6 ff ff     ...........yr...
    153f:	1f f8 ff 07 00 00 00 80 ff ff 9f 33 23 e6 ff ff     ...........3#...
    154f:	3f f0 ff 07 00 00 00 80 ff ff 9f 83 07 e6 ff ff     ?...............
    155f:	3f c0 ff 07 00 00 00 80 ff ff ff ff ff ff ff ff     ?...............
    156f:	7f 80 ff 0f 00 00 00 80 ff ff ff ff ff ff ff ff     ................
    157f:	ff 00 ff 0f 00 00 00 80 ff ff ff ff ff ff ff ff     ................
    158f:	ff 01 fe 1f 00 00 00 80 ff ff ff ff ff ff ff ff     ................
    159f:	ff 07 fc 1f 00 00 00 c0 ff ff ff ff ff ff ff ff     ................
    15af:	ff 0f f8 3f 00 00 00 c0 ff ff ff ff ff ff ff ff     ...?............
    15bf:	ff 1f e0 3f 00 00 00 c0 ff ff ff ff ff ff ff ff     ...?............
    15cf:	ff 3f c0 7f 00 00 00 e0 ff ff ff ff ff ff ff ff     .?..............
    15df:	ff 7f 80 7f 00 00 00 f0 ff ff ff ff ff ff ff ff     ................
    15ef:	ff ff 01 1f 00 00 00 f8 ff ff ff ff ff ff ff ff     ................
    15ff:	ff ff 03 0e 00 00 00 fc ff 1f c8 ff ff ff ff ff     ................
    160f:	ff ff 07 0c 00 00 00 fe ff 1f ce ff ff ff ff ff     ................
    161f:	ff ff 0f 00 00 00 80 ff ff 9f ff ff ff ff ff ff     ................
    162f:	ff ff 1f 00 03 00 e0 ff ff 9f df c4 83 e3 e5 ff     ................
    163f:	ff ff 3f 80 07 00 f8 ff ff 1f cf 80 81 c1 e0 ff     ..?.............
    164f:	ff ff 7f c0 07 00 ff ff ff 1f c8 98 c9 80 f8 ff     ................
    165f:	ff ff ff e0 0f c0 ff ff ff 1f cf 9c c1 80 fc ff     ................
    166f:	ff ff ff f1 0f f8 ff ff ff 9f cf 9c e1 fc f8 ff     ................
    167f:	ff ff ff ff 1f fe ff ff ff 9f cf 9c f9 d8 fc ff     ................
    168f:	ff ff ff ff bf ff ff ff ff 9f cf 9c c1 c1 fc ff     ................
    169f:	ff ff ff ff ff ff ff ff ff ff ff ff 98 ff ff ff     ................
    16af:	ff ff ff ff ff ff ff ff ff ff ff ff 9c ff ff ff     ................
    16bf:	ff ff ff ff ff ff ff ff ff ff ff ff c0 ff ff ff     ................
    16cf:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    16df:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    16ef:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    16ff:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    170f:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
	...

00001720 <__ctors_end>:
    1720:	11 24       	eor	r1, r1
    1722:	1f be       	out	0x3f, r1	; 63
    1724:	cf e5       	ldi	r28, 0x5F	; 95
    1726:	d8 e0       	ldi	r29, 0x08	; 8
    1728:	de bf       	out	0x3e, r29	; 62
    172a:	cd bf       	out	0x3d, r28	; 61

0000172c <__do_copy_data>:
    172c:	11 e0       	ldi	r17, 0x01	; 1
    172e:	a0 e6       	ldi	r26, 0x60	; 96
    1730:	b0 e0       	ldi	r27, 0x00	; 0
    1732:	e8 e9       	ldi	r30, 0x98	; 152
    1734:	f5 e3       	ldi	r31, 0x35	; 53
    1736:	02 c0       	rjmp	.+4      	; 0x173c <__do_copy_data+0x10>
    1738:	05 90       	lpm	r0, Z+
    173a:	0d 92       	st	X+, r0
    173c:	a8 39       	cpi	r26, 0x98	; 152
    173e:	b1 07       	cpc	r27, r17
    1740:	d9 f7       	brne	.-10     	; 0x1738 <__do_copy_data+0xc>

00001742 <__do_clear_bss>:
    1742:	26 e0       	ldi	r18, 0x06	; 6
    1744:	a8 e9       	ldi	r26, 0x98	; 152
    1746:	b1 e0       	ldi	r27, 0x01	; 1
    1748:	01 c0       	rjmp	.+2      	; 0x174c <.do_clear_bss_start>

0000174a <.do_clear_bss_loop>:
    174a:	1d 92       	st	X+, r1

0000174c <.do_clear_bss_start>:
    174c:	a4 33       	cpi	r26, 0x34	; 52
    174e:	b2 07       	cpc	r27, r18
    1750:	e1 f7       	brne	.-8      	; 0x174a <.do_clear_bss_loop>
    1752:	0e 94 dd 18 	call	0x31ba	; 0x31ba <main>
    1756:	0c 94 ca 1a 	jmp	0x3594	; 0x3594 <_exit>

0000175a <__bad_interrupt>:
    175a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000175e <u8g2_DrawHXBMP>:




void u8g2_DrawHXBMP(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, const uint8_t *b)
{
    175e:	2f 92       	push	r2
    1760:	3f 92       	push	r3
    1762:	4f 92       	push	r4
    1764:	5f 92       	push	r5
    1766:	6f 92       	push	r6
    1768:	7f 92       	push	r7
    176a:	8f 92       	push	r8
    176c:	9f 92       	push	r9
    176e:	af 92       	push	r10
    1770:	bf 92       	push	r11
    1772:	cf 92       	push	r12
    1774:	df 92       	push	r13
    1776:	ef 92       	push	r14
    1778:	ff 92       	push	r15
    177a:	0f 93       	push	r16
    177c:	1f 93       	push	r17
    177e:	cf 93       	push	r28
    1780:	df 93       	push	r29
    1782:	5c 01       	movw	r10, r24
    1784:	7b 01       	movw	r14, r22
    1786:	4a 01       	movw	r8, r20
    1788:	e9 01       	movw	r28, r18
    178a:	68 01       	movw	r12, r16
  uint8_t mask;
  uint8_t color = u8g2->draw_color;
    178c:	fc 01       	movw	r30, r24
    178e:	ec 58       	subi	r30, 0x8C	; 140
    1790:	ff 4f       	sbci	r31, 0xFF	; 255
    1792:	30 80       	ld	r3, Z
  uint8_t ncolor = (color == 0 ? 1 : 0);
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
    1794:	8a 01       	movw	r16, r20
    1796:	0f 5f       	subi	r16, 0xFF	; 255
    1798:	1f 4f       	sbci	r17, 0xFF	; 255
    179a:	9b 01       	movw	r18, r22
    179c:	2c 0f       	add	r18, r28
    179e:	3d 1f       	adc	r19, r29
    17a0:	0e 94 1e 12 	call	0x243c	; 0x243c <u8g2_IsIntersection>
    17a4:	88 23       	and	r24, r24
    17a6:	09 f4       	brne	.+2      	; 0x17aa <u8g2_DrawHXBMP+0x4c>
    17a8:	3c c0       	rjmp	.+120    	; 0x1822 <u8g2_DrawHXBMP+0xc4>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  mask = 1;
  while(len > 0)
    17aa:	20 97       	sbiw	r28, 0x00	; 0
    17ac:	b1 f1       	breq	.+108    	; 0x181a <u8g2_DrawHXBMP+0xbc>
    17ae:	11 e0       	ldi	r17, 0x01	; 1
  {
    if( u8x8_pgm_read(b) & mask ) {
      u8g2->draw_color = color;
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
    } else if( u8g2->bitmap_transparency == 0 ) {
    17b0:	35 01       	movw	r6, r10
    17b2:	83 e7       	ldi	r24, 0x73	; 115
    17b4:	68 0e       	add	r6, r24
    17b6:	71 1c       	adc	r7, r1
      u8g2->draw_color = ncolor;
    17b8:	25 01       	movw	r4, r10
    17ba:	e4 e7       	ldi	r30, 0x74	; 116
    17bc:	4e 0e       	add	r4, r30
    17be:	51 1c       	adc	r5, r1
    17c0:	22 24       	eor	r2, r2
    17c2:	23 94       	inc	r2
#endif /* U8G2_WITH_INTERSECTION */
  
  mask = 1;
  while(len > 0)
  {
    if( u8x8_pgm_read(b) & mask ) {
    17c4:	f6 01       	movw	r30, r12
    17c6:	84 91       	lpm	r24, Z
    17c8:	81 23       	and	r24, r17
    17ca:	59 f0       	breq	.+22     	; 0x17e2 <u8g2_DrawHXBMP+0x84>
      u8g2->draw_color = color;
    17cc:	f2 01       	movw	r30, r4
    17ce:	30 82       	st	Z, r3
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
    17d0:	00 e0       	ldi	r16, 0x00	; 0
    17d2:	21 e0       	ldi	r18, 0x01	; 1
    17d4:	30 e0       	ldi	r19, 0x00	; 0
    17d6:	a4 01       	movw	r20, r8
    17d8:	b7 01       	movw	r22, r14
    17da:	c5 01       	movw	r24, r10
    17dc:	0e 94 4f 11 	call	0x229e	; 0x229e <u8g2_DrawHVLine>
    17e0:	11 c0       	rjmp	.+34     	; 0x1804 <u8g2_DrawHXBMP+0xa6>
    } else if( u8g2->bitmap_transparency == 0 ) {
    17e2:	f3 01       	movw	r30, r6
    17e4:	80 81       	ld	r24, Z
    17e6:	81 11       	cpse	r24, r1
    17e8:	0d c0       	rjmp	.+26     	; 0x1804 <u8g2_DrawHXBMP+0xa6>
      u8g2->draw_color = ncolor;
    17ea:	82 2d       	mov	r24, r2
    17ec:	31 10       	cpse	r3, r1
    17ee:	80 e0       	ldi	r24, 0x00	; 0
    17f0:	f2 01       	movw	r30, r4
    17f2:	80 83       	st	Z, r24
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
    17f4:	00 e0       	ldi	r16, 0x00	; 0
    17f6:	21 e0       	ldi	r18, 0x01	; 1
    17f8:	30 e0       	ldi	r19, 0x00	; 0
    17fa:	a4 01       	movw	r20, r8
    17fc:	b7 01       	movw	r22, r14
    17fe:	c5 01       	movw	r24, r10
    1800:	0e 94 4f 11 	call	0x229e	; 0x229e <u8g2_DrawHVLine>
    }
   
    x++;
    1804:	ff ef       	ldi	r31, 0xFF	; 255
    1806:	ef 1a       	sub	r14, r31
    1808:	ff 0a       	sbc	r15, r31
    mask <<= 1;
    180a:	11 0f       	add	r17, r17
    if ( mask == 0 )
    180c:	21 f4       	brne	.+8      	; 0x1816 <u8g2_DrawHXBMP+0xb8>
    {
      mask = 1;
      b++;
    180e:	8f ef       	ldi	r24, 0xFF	; 255
    1810:	c8 1a       	sub	r12, r24
    1812:	d8 0a       	sbc	r13, r24
   
    x++;
    mask <<= 1;
    if ( mask == 0 )
    {
      mask = 1;
    1814:	11 e0       	ldi	r17, 0x01	; 1
      b++;
    }
    len--;
    1816:	21 97       	sbiw	r28, 0x01	; 1
  if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  mask = 1;
  while(len > 0)
    1818:	a9 f6       	brne	.-86     	; 0x17c4 <u8g2_DrawHXBMP+0x66>
      mask = 1;
      b++;
    }
    len--;
  }
  u8g2->draw_color = color;
    181a:	f5 01       	movw	r30, r10
    181c:	ec 58       	subi	r30, 0x8C	; 140
    181e:	ff 4f       	sbci	r31, 0xFF	; 255
    1820:	30 82       	st	Z, r3
}
    1822:	df 91       	pop	r29
    1824:	cf 91       	pop	r28
    1826:	1f 91       	pop	r17
    1828:	0f 91       	pop	r16
    182a:	ff 90       	pop	r15
    182c:	ef 90       	pop	r14
    182e:	df 90       	pop	r13
    1830:	cf 90       	pop	r12
    1832:	bf 90       	pop	r11
    1834:	af 90       	pop	r10
    1836:	9f 90       	pop	r9
    1838:	8f 90       	pop	r8
    183a:	7f 90       	pop	r7
    183c:	6f 90       	pop	r6
    183e:	5f 90       	pop	r5
    1840:	4f 90       	pop	r4
    1842:	3f 90       	pop	r3
    1844:	2f 90       	pop	r2
    1846:	08 95       	ret

00001848 <u8g2_DrawXBMP>:


void u8g2_DrawXBMP(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, const uint8_t *bitmap)
{
    1848:	4f 92       	push	r4
    184a:	5f 92       	push	r5
    184c:	6f 92       	push	r6
    184e:	7f 92       	push	r7
    1850:	8f 92       	push	r8
    1852:	9f 92       	push	r9
    1854:	af 92       	push	r10
    1856:	bf 92       	push	r11
    1858:	cf 92       	push	r12
    185a:	df 92       	push	r13
    185c:	ef 92       	push	r14
    185e:	ff 92       	push	r15
    1860:	0f 93       	push	r16
    1862:	1f 93       	push	r17
    1864:	cf 93       	push	r28
    1866:	df 93       	push	r29
    1868:	2c 01       	movw	r4, r24
    186a:	5b 01       	movw	r10, r22
    186c:	ea 01       	movw	r28, r20
    186e:	39 01       	movw	r6, r18
    1870:	68 01       	movw	r12, r16
  u8g2_uint_t blen;
  blen = w;
  blen += 7;
  blen >>= 3;
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
    1872:	8a 01       	movw	r16, r20
    1874:	0c 0d       	add	r16, r12
    1876:	1d 1d       	adc	r17, r13
    1878:	26 0f       	add	r18, r22
    187a:	37 1f       	adc	r19, r23
    187c:	0e 94 1e 12 	call	0x243c	; 0x243c <u8g2_IsIntersection>
    1880:	88 23       	and	r24, r24
    1882:	d9 f0       	breq	.+54     	; 0x18ba <u8g2_DrawXBMP+0x72>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  while( h > 0 )
    1884:	c1 14       	cp	r12, r1
    1886:	d1 04       	cpc	r13, r1
    1888:	c1 f0       	breq	.+48     	; 0x18ba <u8g2_DrawXBMP+0x72>

void u8g2_DrawXBMP(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, const uint8_t *bitmap)
{
  u8g2_uint_t blen;
  blen = w;
  blen += 7;
    188a:	43 01       	movw	r8, r6
    188c:	87 e0       	ldi	r24, 0x07	; 7
    188e:	88 0e       	add	r8, r24
    1890:	91 1c       	adc	r9, r1
  blen >>= 3;
    1892:	96 94       	lsr	r9
    1894:	87 94       	ror	r8
    1896:	96 94       	lsr	r9
    1898:	87 94       	ror	r8
    189a:	96 94       	lsr	r9
    189c:	87 94       	ror	r8
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  while( h > 0 )
  {
    u8g2_DrawHXBMP(u8g2, x, y, w, bitmap);
    189e:	87 01       	movw	r16, r14
    18a0:	93 01       	movw	r18, r6
    18a2:	ae 01       	movw	r20, r28
    18a4:	b5 01       	movw	r22, r10
    18a6:	c2 01       	movw	r24, r4
    18a8:	0e 94 af 0b 	call	0x175e	; 0x175e <u8g2_DrawHXBMP>
    bitmap += blen;
    18ac:	e8 0c       	add	r14, r8
    18ae:	f9 1c       	adc	r15, r9
    y++;
    18b0:	21 96       	adiw	r28, 0x01	; 1
    h--;
    18b2:	81 e0       	ldi	r24, 0x01	; 1
    18b4:	c8 1a       	sub	r12, r24
    18b6:	d1 08       	sbc	r13, r1
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  while( h > 0 )
    18b8:	91 f7       	brne	.-28     	; 0x189e <u8g2_DrawXBMP+0x56>
    u8g2_DrawHXBMP(u8g2, x, y, w, bitmap);
    bitmap += blen;
    y++;
    h--;
  }
}
    18ba:	df 91       	pop	r29
    18bc:	cf 91       	pop	r28
    18be:	1f 91       	pop	r17
    18c0:	0f 91       	pop	r16
    18c2:	ff 90       	pop	r15
    18c4:	ef 90       	pop	r14
    18c6:	df 90       	pop	r13
    18c8:	cf 90       	pop	r12
    18ca:	bf 90       	pop	r11
    18cc:	af 90       	pop	r10
    18ce:	9f 90       	pop	r9
    18d0:	8f 90       	pop	r8
    18d2:	7f 90       	pop	r7
    18d4:	6f 90       	pop	r6
    18d6:	5f 90       	pop	r5
    18d8:	4f 90       	pop	r4
    18da:	08 95       	ret

000018dc <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
    18dc:	af 92       	push	r10
    18de:	bf 92       	push	r11
    18e0:	cf 92       	push	r12
    18e2:	df 92       	push	r13
    18e4:	ef 92       	push	r14
    18e6:	ff 92       	push	r15
    18e8:	0f 93       	push	r16
    18ea:	1f 93       	push	r17
    18ec:	cf 93       	push	r28
    18ee:	df 93       	push	r29
    18f0:	7c 01       	movw	r14, r24
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
  src_max = u8g2->tile_buf_height;
    18f2:	dc 01       	movw	r26, r24
    18f4:	94 96       	adiw	r26, 0x24	; 36
    18f6:	bc 90       	ld	r11, X
    18f8:	94 97       	sbiw	r26, 0x24	; 36
  dest_row = u8g2->tile_curr_row;
    18fa:	95 96       	adiw	r26, 0x25	; 37
    18fc:	dc 91       	ld	r29, X
    18fe:	95 97       	sbiw	r26, 0x25	; 37
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
    1900:	ed 91       	ld	r30, X+
    1902:	fc 91       	ld	r31, X
    1904:	a1 88       	ldd	r10, Z+17	; 0x11
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
  src_max = u8g2->tile_buf_height;
  dest_row = u8g2->tile_curr_row;
    1906:	cd 2f       	mov	r28, r29
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
    1908:	c1 2c       	mov	r12, r1
    190a:	d1 2c       	mov	r13, r1
{
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
    190c:	d7 01       	movw	r26, r14
    190e:	ed 91       	ld	r30, X+
    1910:	fc 91       	ld	r31, X
    1912:	11 97       	sbiw	r26, 0x01	; 1
    1914:	20 89       	ldd	r18, Z+16	; 0x10
  offset = src_tile_row;
  ptr = u8g2->tile_buf_ptr;
    1916:	92 96       	adiw	r26, 0x22	; 34
    1918:	0d 91       	ld	r16, X+
    191a:	1c 91       	ld	r17, X
    191c:	93 97       	sbiw	r26, 0x23	; 35
  offset *= w;
  offset *= 8;
  ptr += offset;
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
    191e:	42 2f       	mov	r20, r18
    1920:	50 e0       	ldi	r21, 0x00	; 0
    1922:	44 0f       	add	r20, r20
    1924:	55 1f       	adc	r21, r21
    1926:	44 0f       	add	r20, r20
    1928:	55 1f       	adc	r21, r21
    192a:	44 0f       	add	r20, r20
    192c:	55 1f       	adc	r21, r21
    192e:	4c 9d       	mul	r20, r12
    1930:	c0 01       	movw	r24, r0
    1932:	4d 9d       	mul	r20, r13
    1934:	90 0d       	add	r25, r0
    1936:	5c 9d       	mul	r21, r12
    1938:	90 0d       	add	r25, r0
    193a:	11 24       	eor	r1, r1
    193c:	08 0f       	add	r16, r24
    193e:	19 1f       	adc	r17, r25
    1940:	4c 2f       	mov	r20, r28
    1942:	60 e0       	ldi	r22, 0x00	; 0
    1944:	c7 01       	movw	r24, r14
    1946:	0e 94 19 16 	call	0x2c32	; 0x2c32 <u8x8_DrawTile>
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
    src_row++;
    dest_row++;
    194a:	cf 5f       	subi	r28, 0xFF	; 255
  } while( src_row < src_max && dest_row < dest_max );
    194c:	8c 2f       	mov	r24, r28
    194e:	8d 1b       	sub	r24, r29
    1950:	8b 15       	cp	r24, r11
    1952:	28 f4       	brcc	.+10     	; 0x195e <u8g2_send_buffer+0x82>
    1954:	bf ef       	ldi	r27, 0xFF	; 255
    1956:	cb 1a       	sub	r12, r27
    1958:	db 0a       	sbc	r13, r27
    195a:	ca 15       	cp	r28, r10
    195c:	b8 f2       	brcs	.-82     	; 0x190c <u8g2_send_buffer+0x30>
}
    195e:	df 91       	pop	r29
    1960:	cf 91       	pop	r28
    1962:	1f 91       	pop	r17
    1964:	0f 91       	pop	r16
    1966:	ff 90       	pop	r15
    1968:	ef 90       	pop	r14
    196a:	df 90       	pop	r13
    196c:	cf 90       	pop	r12
    196e:	bf 90       	pop	r11
    1970:	af 90       	pop	r10
    1972:	08 95       	ret

00001974 <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
    1974:	fc 01       	movw	r30, r24
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
    1976:	a0 81       	ld	r26, Z
    1978:	b1 81       	ldd	r27, Z+1	; 0x01
    197a:	50 96       	adiw	r26, 0x10	; 16
    197c:	9c 91       	ld	r25, X
  cnt *= u8g2->tile_buf_height;
    197e:	44 a1       	ldd	r20, Z+36	; 0x24
    1980:	94 9f       	mul	r25, r20
    1982:	a0 01       	movw	r20, r0
    1984:	11 24       	eor	r1, r1
  cnt *= 8;
  memset(u8g2->tile_buf_ptr, 0, cnt);
    1986:	44 0f       	add	r20, r20
    1988:	55 1f       	adc	r21, r21
    198a:	44 0f       	add	r20, r20
    198c:	55 1f       	adc	r21, r21
    198e:	44 0f       	add	r20, r20
    1990:	55 1f       	adc	r21, r21
    1992:	60 e0       	ldi	r22, 0x00	; 0
    1994:	70 e0       	ldi	r23, 0x00	; 0
    1996:	82 a1       	ldd	r24, Z+34	; 0x22
    1998:	93 a1       	ldd	r25, Z+35	; 0x23
    199a:	0e 94 b8 1a 	call	0x3570	; 0x3570 <memset>
    199e:	08 95       	ret

000019a0 <u8g2_SendBuffer>:
  } while( src_row < src_max && dest_row < dest_max );
}

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
    19a0:	cf 93       	push	r28
    19a2:	df 93       	push	r29
    19a4:	ec 01       	movw	r28, r24
  u8g2_send_buffer(u8g2);
    19a6:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
    19aa:	ce 01       	movw	r24, r28
    19ac:	0e 94 5d 16 	call	0x2cba	; 0x2cba <u8x8_RefreshDisplay>
}
    19b0:	df 91       	pop	r29
    19b2:	cf 91       	pop	r28
    19b4:	08 95       	ret

000019b6 <u8g2_m_16_8_f>:
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1024];
  *page_cnt = 8;
    19b6:	28 e0       	ldi	r18, 0x08	; 8
    19b8:	fc 01       	movw	r30, r24
    19ba:	20 83       	st	Z, r18
  return buf;
  #endif
}
    19bc:	88 e9       	ldi	r24, 0x98	; 152
    19be:	91 e0       	ldi	r25, 0x01	; 1
    19c0:	08 95       	ret

000019c2 <u8g2_Setup_sh1106_i2c_128x64_noname_f>:
  buf = u8g2_m_16_8_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* sh1106 f */
void u8g2_Setup_sh1106_i2c_128x64_noname_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
    19c2:	cf 92       	push	r12
    19c4:	df 92       	push	r13
    19c6:	ef 92       	push	r14
    19c8:	ff 92       	push	r15
    19ca:	0f 93       	push	r16
    19cc:	1f 93       	push	r17
    19ce:	cf 93       	push	r28
    19d0:	df 93       	push	r29
    19d2:	1f 92       	push	r1
    19d4:	cd b7       	in	r28, 0x3d	; 61
    19d6:	de b7       	in	r29, 0x3e	; 62
    19d8:	7c 01       	movw	r14, r24
    19da:	6b 01       	movw	r12, r22
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_sh1106_128x64_noname, u8x8_cad_ssd13xx_fast_i2c, byte_cb, gpio_and_delay_cb);
    19dc:	89 01       	movw	r16, r18
    19de:	9a 01       	movw	r18, r20
    19e0:	4e e5       	ldi	r20, 0x5E	; 94
    19e2:	55 e1       	ldi	r21, 0x15	; 21
    19e4:	61 ef       	ldi	r22, 0xF1	; 241
    19e6:	76 e1       	ldi	r23, 0x16	; 22
    19e8:	0e 94 36 17 	call	0x2e6c	; 0x2e6c <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
    19ec:	ce 01       	movw	r24, r28
    19ee:	01 96       	adiw	r24, 0x01	; 1
    19f0:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <u8g2_m_16_8_f>
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
    19f4:	86 01       	movw	r16, r12
    19f6:	2a e0       	ldi	r18, 0x0A	; 10
    19f8:	33 e1       	ldi	r19, 0x13	; 19
    19fa:	49 81       	ldd	r20, Y+1	; 0x01
    19fc:	bc 01       	movw	r22, r24
    19fe:	c7 01       	movw	r24, r14
    1a00:	0e 94 47 14 	call	0x288e	; 0x288e <u8g2_SetupBuffer>
}
    1a04:	0f 90       	pop	r0
    1a06:	df 91       	pop	r29
    1a08:	cf 91       	pop	r28
    1a0a:	1f 91       	pop	r17
    1a0c:	0f 91       	pop	r16
    1a0e:	ff 90       	pop	r15
    1a10:	ef 90       	pop	r14
    1a12:	df 90       	pop	r13
    1a14:	cf 90       	pop	r12
    1a16:	08 95       	ret

00001a18 <u8g2_font_get_word>:
  return tmp;
}

void u8g2_SetFontPosCenter(u8g2_t *u8g2)
{
  u8g2->font_calc_vref = u8g2_font_calc_vref_center;
    1a18:	fc 01       	movw	r30, r24
    1a1a:	e6 0f       	add	r30, r22
    1a1c:	f1 1d       	adc	r31, r1
    1a1e:	84 91       	lpm	r24, Z
    1a20:	90 e0       	ldi	r25, 0x00	; 0
    1a22:	98 2f       	mov	r25, r24
    1a24:	88 27       	eor	r24, r24
    1a26:	31 96       	adiw	r30, 0x01	; 1
    1a28:	e4 91       	lpm	r30, Z
    1a2a:	8e 0f       	add	r24, r30
    1a2c:	91 1d       	adc	r25, r1
    1a2e:	08 95       	ret

00001a30 <u8g2_font_calc_vref_font>:
    1a30:	80 e0       	ldi	r24, 0x00	; 0
    1a32:	90 e0       	ldi	r25, 0x00	; 0
    1a34:	08 95       	ret

00001a36 <u8g2_font_calc_vref_top>:
    1a36:	80 59       	subi	r24, 0x90	; 144
    1a38:	9f 4f       	sbci	r25, 0xFF	; 255
    1a3a:	fc 01       	movw	r30, r24
    1a3c:	80 81       	ld	r24, Z
    1a3e:	08 2e       	mov	r0, r24
    1a40:	00 0c       	add	r0, r0
    1a42:	99 0b       	sbc	r25, r25
    1a44:	01 96       	adiw	r24, 0x01	; 1
    1a46:	08 95       	ret

00001a48 <u8g2_read_font_info>:
    1a48:	0f 93       	push	r16
    1a4a:	1f 93       	push	r17
    1a4c:	cf 93       	push	r28
    1a4e:	df 93       	push	r29
    1a50:	ec 01       	movw	r28, r24
    1a52:	8b 01       	movw	r16, r22
    1a54:	fb 01       	movw	r30, r22
    1a56:	84 91       	lpm	r24, Z
    1a58:	88 83       	st	Y, r24
    1a5a:	31 96       	adiw	r30, 0x01	; 1
    1a5c:	e4 91       	lpm	r30, Z
    1a5e:	e9 83       	std	Y+1, r30	; 0x01
    1a60:	fb 01       	movw	r30, r22
    1a62:	32 96       	adiw	r30, 0x02	; 2
    1a64:	e4 91       	lpm	r30, Z
    1a66:	ea 83       	std	Y+2, r30	; 0x02
    1a68:	fb 01       	movw	r30, r22
    1a6a:	33 96       	adiw	r30, 0x03	; 3
    1a6c:	e4 91       	lpm	r30, Z
    1a6e:	eb 83       	std	Y+3, r30	; 0x03
    1a70:	fb 01       	movw	r30, r22
    1a72:	34 96       	adiw	r30, 0x04	; 4
    1a74:	e4 91       	lpm	r30, Z
    1a76:	ec 83       	std	Y+4, r30	; 0x04
    1a78:	fb 01       	movw	r30, r22
    1a7a:	35 96       	adiw	r30, 0x05	; 5
    1a7c:	e4 91       	lpm	r30, Z
    1a7e:	ed 83       	std	Y+5, r30	; 0x05
    1a80:	fb 01       	movw	r30, r22
    1a82:	36 96       	adiw	r30, 0x06	; 6
    1a84:	e4 91       	lpm	r30, Z
    1a86:	ee 83       	std	Y+6, r30	; 0x06
    1a88:	fb 01       	movw	r30, r22
    1a8a:	37 96       	adiw	r30, 0x07	; 7
    1a8c:	e4 91       	lpm	r30, Z
    1a8e:	ef 83       	std	Y+7, r30	; 0x07
    1a90:	fb 01       	movw	r30, r22
    1a92:	38 96       	adiw	r30, 0x08	; 8
    1a94:	e4 91       	lpm	r30, Z
    1a96:	e8 87       	std	Y+8, r30	; 0x08
    1a98:	fb 01       	movw	r30, r22
    1a9a:	39 96       	adiw	r30, 0x09	; 9
    1a9c:	e4 91       	lpm	r30, Z
    1a9e:	e9 87       	std	Y+9, r30	; 0x09
    1aa0:	fb 01       	movw	r30, r22
    1aa2:	3a 96       	adiw	r30, 0x0a	; 10
    1aa4:	e4 91       	lpm	r30, Z
    1aa6:	ea 87       	std	Y+10, r30	; 0x0a
    1aa8:	fb 01       	movw	r30, r22
    1aaa:	3b 96       	adiw	r30, 0x0b	; 11
    1aac:	e4 91       	lpm	r30, Z
    1aae:	eb 87       	std	Y+11, r30	; 0x0b
    1ab0:	fb 01       	movw	r30, r22
    1ab2:	3c 96       	adiw	r30, 0x0c	; 12
    1ab4:	e4 91       	lpm	r30, Z
    1ab6:	ec 87       	std	Y+12, r30	; 0x0c
    1ab8:	fb 01       	movw	r30, r22
    1aba:	3d 96       	adiw	r30, 0x0d	; 13
    1abc:	e4 91       	lpm	r30, Z
    1abe:	ed 87       	std	Y+13, r30	; 0x0d
    1ac0:	fb 01       	movw	r30, r22
    1ac2:	3e 96       	adiw	r30, 0x0e	; 14
    1ac4:	e4 91       	lpm	r30, Z
    1ac6:	ee 87       	std	Y+14, r30	; 0x0e
    1ac8:	fb 01       	movw	r30, r22
    1aca:	3f 96       	adiw	r30, 0x0f	; 15
    1acc:	e4 91       	lpm	r30, Z
    1ace:	ef 87       	std	Y+15, r30	; 0x0f
    1ad0:	fb 01       	movw	r30, r22
    1ad2:	70 96       	adiw	r30, 0x10	; 16
    1ad4:	e4 91       	lpm	r30, Z
    1ad6:	e8 8b       	std	Y+16, r30	; 0x10
    1ad8:	61 e1       	ldi	r22, 0x11	; 17
    1ada:	c8 01       	movw	r24, r16
    1adc:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <u8g2_font_get_word>
    1ae0:	9a 8b       	std	Y+18, r25	; 0x12
    1ae2:	89 8b       	std	Y+17, r24	; 0x11
    1ae4:	63 e1       	ldi	r22, 0x13	; 19
    1ae6:	c8 01       	movw	r24, r16
    1ae8:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <u8g2_font_get_word>
    1aec:	9c 8b       	std	Y+20, r25	; 0x14
    1aee:	8b 8b       	std	Y+19, r24	; 0x13
    1af0:	65 e1       	ldi	r22, 0x15	; 21
    1af2:	c8 01       	movw	r24, r16
    1af4:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <u8g2_font_get_word>
    1af8:	9e 8b       	std	Y+22, r25	; 0x16
    1afa:	8d 8b       	std	Y+21, r24	; 0x15
    1afc:	df 91       	pop	r29
    1afe:	cf 91       	pop	r28
    1b00:	1f 91       	pop	r17
    1b02:	0f 91       	pop	r16
    1b04:	08 95       	ret

00001b06 <u8g2_font_decode_get_unsigned_bits>:
    1b06:	dc 01       	movw	r26, r24
    1b08:	1a 96       	adiw	r26, 0x0a	; 10
    1b0a:	9c 91       	ld	r25, X
    1b0c:	1a 97       	sbiw	r26, 0x0a	; 10
    1b0e:	ed 91       	ld	r30, X+
    1b10:	fc 91       	ld	r31, X
    1b12:	11 97       	sbiw	r26, 0x01	; 1
    1b14:	24 91       	lpm	r18, Z
    1b16:	30 e0       	ldi	r19, 0x00	; 0
    1b18:	09 2e       	mov	r0, r25
    1b1a:	02 c0       	rjmp	.+4      	; 0x1b20 <u8g2_font_decode_get_unsigned_bits+0x1a>
    1b1c:	35 95       	asr	r19
    1b1e:	27 95       	ror	r18
    1b20:	0a 94       	dec	r0
    1b22:	e2 f7       	brpl	.-8      	; 0x1b1c <u8g2_font_decode_get_unsigned_bits+0x16>
    1b24:	89 2f       	mov	r24, r25
    1b26:	86 0f       	add	r24, r22
    1b28:	88 30       	cpi	r24, 0x08	; 8
    1b2a:	10 f4       	brcc	.+4      	; 0x1b30 <u8g2_font_decode_get_unsigned_bits+0x2a>
    1b2c:	e2 2f       	mov	r30, r18
    1b2e:	0f c0       	rjmp	.+30     	; 0x1b4e <u8g2_font_decode_get_unsigned_bits+0x48>
    1b30:	31 96       	adiw	r30, 0x01	; 1
    1b32:	11 96       	adiw	r26, 0x01	; 1
    1b34:	fc 93       	st	X, r31
    1b36:	ee 93       	st	-X, r30
    1b38:	e4 91       	lpm	r30, Z
    1b3a:	f0 e0       	ldi	r31, 0x00	; 0
    1b3c:	38 e0       	ldi	r19, 0x08	; 8
    1b3e:	39 1b       	sub	r19, r25
    1b40:	02 c0       	rjmp	.+4      	; 0x1b46 <u8g2_font_decode_get_unsigned_bits+0x40>
    1b42:	ee 0f       	add	r30, r30
    1b44:	ff 1f       	adc	r31, r31
    1b46:	3a 95       	dec	r19
    1b48:	e2 f7       	brpl	.-8      	; 0x1b42 <u8g2_font_decode_get_unsigned_bits+0x3c>
    1b4a:	e2 2b       	or	r30, r18
    1b4c:	88 50       	subi	r24, 0x08	; 8
    1b4e:	1a 96       	adiw	r26, 0x0a	; 10
    1b50:	8c 93       	st	X, r24
    1b52:	81 e0       	ldi	r24, 0x01	; 1
    1b54:	90 e0       	ldi	r25, 0x00	; 0
    1b56:	02 c0       	rjmp	.+4      	; 0x1b5c <u8g2_font_decode_get_unsigned_bits+0x56>
    1b58:	88 0f       	add	r24, r24
    1b5a:	99 1f       	adc	r25, r25
    1b5c:	6a 95       	dec	r22
    1b5e:	e2 f7       	brpl	.-8      	; 0x1b58 <u8g2_font_decode_get_unsigned_bits+0x52>
    1b60:	81 50       	subi	r24, 0x01	; 1
    1b62:	8e 23       	and	r24, r30
    1b64:	08 95       	ret

00001b66 <u8g2_font_setup_decode>:
    1b66:	0f 93       	push	r16
    1b68:	1f 93       	push	r17
    1b6a:	cf 93       	push	r28
    1b6c:	df 93       	push	r29
    1b6e:	8c 01       	movw	r16, r24
    1b70:	ec 01       	movw	r28, r24
    1b72:	c8 5b       	subi	r28, 0xB8	; 184
    1b74:	df 4f       	sbci	r29, 0xFF	; 255
    1b76:	79 83       	std	Y+1, r23	; 0x01
    1b78:	68 83       	st	Y, r22
    1b7a:	1a 86       	std	Y+10, r1	; 0x0a
    1b7c:	fc 01       	movw	r30, r24
    1b7e:	e5 5a       	subi	r30, 0xA5	; 165
    1b80:	ff 4f       	sbci	r31, 0xFF	; 255
    1b82:	60 81       	ld	r22, Z
    1b84:	ce 01       	movw	r24, r28
    1b86:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <u8g2_font_decode_get_unsigned_bits>
    1b8a:	88 87       	std	Y+8, r24	; 0x08
    1b8c:	f8 01       	movw	r30, r16
    1b8e:	e4 5a       	subi	r30, 0xA4	; 164
    1b90:	ff 4f       	sbci	r31, 0xFF	; 255
    1b92:	60 81       	ld	r22, Z
    1b94:	ce 01       	movw	r24, r28
    1b96:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <u8g2_font_decode_get_unsigned_bits>
    1b9a:	89 87       	std	Y+9, r24	; 0x09
    1b9c:	f8 01       	movw	r30, r16
    1b9e:	ec 58       	subi	r30, 0x8C	; 140
    1ba0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba2:	80 81       	ld	r24, Z
    1ba4:	8c 87       	std	Y+12, r24	; 0x0c
    1ba6:	91 e0       	ldi	r25, 0x01	; 1
    1ba8:	81 11       	cpse	r24, r1
    1baa:	90 e0       	ldi	r25, 0x00	; 0
    1bac:	9d 87       	std	Y+13, r25	; 0x0d
    1bae:	df 91       	pop	r29
    1bb0:	cf 91       	pop	r28
    1bb2:	1f 91       	pop	r17
    1bb4:	0f 91       	pop	r16
    1bb6:	08 95       	ret

00001bb8 <u8g2_font_decode_get_signed_bits>:
    1bb8:	cf 93       	push	r28
    1bba:	c6 2f       	mov	r28, r22
    1bbc:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <u8g2_font_decode_get_unsigned_bits>
    1bc0:	c1 50       	subi	r28, 0x01	; 1
    1bc2:	21 e0       	ldi	r18, 0x01	; 1
    1bc4:	30 e0       	ldi	r19, 0x00	; 0
    1bc6:	02 c0       	rjmp	.+4      	; 0x1bcc <u8g2_font_decode_get_signed_bits+0x14>
    1bc8:	22 0f       	add	r18, r18
    1bca:	33 1f       	adc	r19, r19
    1bcc:	ca 95       	dec	r28
    1bce:	e2 f7       	brpl	.-8      	; 0x1bc8 <u8g2_font_decode_get_signed_bits+0x10>
    1bd0:	82 1b       	sub	r24, r18
    1bd2:	cf 91       	pop	r28
    1bd4:	08 95       	ret

00001bd6 <u8g2_add_vector_y>:
    1bd6:	21 30       	cpi	r18, 0x01	; 1
    1bd8:	49 f0       	breq	.+18     	; 0x1bec <u8g2_add_vector_y+0x16>
    1bda:	18 f0       	brcs	.+6      	; 0x1be2 <u8g2_add_vector_y+0xc>
    1bdc:	22 30       	cpi	r18, 0x02	; 2
    1bde:	59 f0       	breq	.+22     	; 0x1bf6 <u8g2_add_vector_y+0x20>
    1be0:	0f c0       	rjmp	.+30     	; 0x1c00 <u8g2_add_vector_y+0x2a>
    1be2:	84 0f       	add	r24, r20
    1be4:	91 1d       	adc	r25, r1
    1be6:	47 fd       	sbrc	r20, 7
    1be8:	9a 95       	dec	r25
    1bea:	08 95       	ret
    1bec:	86 0f       	add	r24, r22
    1bee:	91 1d       	adc	r25, r1
    1bf0:	67 fd       	sbrc	r22, 7
    1bf2:	9a 95       	dec	r25
    1bf4:	08 95       	ret
    1bf6:	84 1b       	sub	r24, r20
    1bf8:	91 09       	sbc	r25, r1
    1bfa:	47 fd       	sbrc	r20, 7
    1bfc:	93 95       	inc	r25
    1bfe:	08 95       	ret
    1c00:	86 1b       	sub	r24, r22
    1c02:	91 09       	sbc	r25, r1
    1c04:	67 fd       	sbrc	r22, 7
    1c06:	93 95       	inc	r25
    1c08:	08 95       	ret

00001c0a <u8g2_add_vector_x>:
    1c0a:	21 30       	cpi	r18, 0x01	; 1
    1c0c:	49 f0       	breq	.+18     	; 0x1c20 <u8g2_add_vector_x+0x16>
    1c0e:	18 f0       	brcs	.+6      	; 0x1c16 <u8g2_add_vector_x+0xc>
    1c10:	22 30       	cpi	r18, 0x02	; 2
    1c12:	59 f0       	breq	.+22     	; 0x1c2a <u8g2_add_vector_x+0x20>
    1c14:	0f c0       	rjmp	.+30     	; 0x1c34 <u8g2_add_vector_x+0x2a>
    1c16:	86 0f       	add	r24, r22
    1c18:	91 1d       	adc	r25, r1
    1c1a:	67 fd       	sbrc	r22, 7
    1c1c:	9a 95       	dec	r25
    1c1e:	08 95       	ret
    1c20:	84 1b       	sub	r24, r20
    1c22:	91 09       	sbc	r25, r1
    1c24:	47 fd       	sbrc	r20, 7
    1c26:	93 95       	inc	r25
    1c28:	08 95       	ret
    1c2a:	86 1b       	sub	r24, r22
    1c2c:	91 09       	sbc	r25, r1
    1c2e:	67 fd       	sbrc	r22, 7
    1c30:	93 95       	inc	r25
    1c32:	08 95       	ret
    1c34:	84 0f       	add	r24, r20
    1c36:	91 1d       	adc	r25, r1
    1c38:	47 fd       	sbrc	r20, 7
    1c3a:	9a 95       	dec	r25
    1c3c:	08 95       	ret

00001c3e <u8g2_font_decode_len>:
    1c3e:	2f 92       	push	r2
    1c40:	3f 92       	push	r3
    1c42:	4f 92       	push	r4
    1c44:	5f 92       	push	r5
    1c46:	6f 92       	push	r6
    1c48:	7f 92       	push	r7
    1c4a:	8f 92       	push	r8
    1c4c:	9f 92       	push	r9
    1c4e:	af 92       	push	r10
    1c50:	bf 92       	push	r11
    1c52:	cf 92       	push	r12
    1c54:	df 92       	push	r13
    1c56:	ef 92       	push	r14
    1c58:	ff 92       	push	r15
    1c5a:	0f 93       	push	r16
    1c5c:	1f 93       	push	r17
    1c5e:	cf 93       	push	r28
    1c60:	df 93       	push	r29
    1c62:	4c 01       	movw	r8, r24
    1c64:	d6 2f       	mov	r29, r22
    1c66:	34 2e       	mov	r3, r20
    1c68:	fc 01       	movw	r30, r24
    1c6a:	e8 5b       	subi	r30, 0xB8	; 184
    1c6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c6e:	56 80       	ldd	r5, Z+6	; 0x06
    1c70:	17 81       	ldd	r17, Z+7	; 0x07
    1c72:	7f 01       	movw	r14, r30
    1c74:	3c 01       	movw	r6, r24
    1c76:	e4 e7       	ldi	r30, 0x74	; 116
    1c78:	6e 0e       	add	r6, r30
    1c7a:	71 1c       	adc	r7, r1
    1c7c:	f7 01       	movw	r30, r14
    1c7e:	c0 85       	ldd	r28, Z+8	; 0x08
    1c80:	c5 19       	sub	r28, r5
    1c82:	2d 2e       	mov	r2, r29
    1c84:	cd 17       	cp	r28, r29
    1c86:	08 f4       	brcc	.+2      	; 0x1c8a <u8g2_font_decode_len+0x4c>
    1c88:	2c 2e       	mov	r2, r28
    1c8a:	f7 01       	movw	r30, r14
    1c8c:	c4 80       	ldd	r12, Z+4	; 0x04
    1c8e:	d5 80       	ldd	r13, Z+5	; 0x05
    1c90:	06 85       	ldd	r16, Z+14	; 0x0e
    1c92:	41 2e       	mov	r4, r17
    1c94:	20 2f       	mov	r18, r16
    1c96:	41 2f       	mov	r20, r17
    1c98:	65 2d       	mov	r22, r5
    1c9a:	82 81       	ldd	r24, Z+2	; 0x02
    1c9c:	93 81       	ldd	r25, Z+3	; 0x03
    1c9e:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <u8g2_add_vector_x>
    1ca2:	5c 01       	movw	r10, r24
    1ca4:	20 2f       	mov	r18, r16
    1ca6:	41 2f       	mov	r20, r17
    1ca8:	65 2d       	mov	r22, r5
    1caa:	c6 01       	movw	r24, r12
    1cac:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <u8g2_add_vector_y>
    1cb0:	33 20       	and	r3, r3
    1cb2:	61 f0       	breq	.+24     	; 0x1ccc <u8g2_font_decode_len+0x8e>
    1cb4:	f7 01       	movw	r30, r14
    1cb6:	24 85       	ldd	r18, Z+12	; 0x0c
    1cb8:	f3 01       	movw	r30, r6
    1cba:	20 83       	st	Z, r18
    1cbc:	22 2d       	mov	r18, r2
    1cbe:	30 e0       	ldi	r19, 0x00	; 0
    1cc0:	ac 01       	movw	r20, r24
    1cc2:	b5 01       	movw	r22, r10
    1cc4:	c4 01       	movw	r24, r8
    1cc6:	0e 94 4f 11 	call	0x229e	; 0x229e <u8g2_DrawHVLine>
    1cca:	0e c0       	rjmp	.+28     	; 0x1ce8 <u8g2_font_decode_len+0xaa>
    1ccc:	f7 01       	movw	r30, r14
    1cce:	23 85       	ldd	r18, Z+11	; 0x0b
    1cd0:	21 11       	cpse	r18, r1
    1cd2:	0a c0       	rjmp	.+20     	; 0x1ce8 <u8g2_font_decode_len+0xaa>
    1cd4:	25 85       	ldd	r18, Z+13	; 0x0d
    1cd6:	f3 01       	movw	r30, r6
    1cd8:	20 83       	st	Z, r18
    1cda:	22 2d       	mov	r18, r2
    1cdc:	30 e0       	ldi	r19, 0x00	; 0
    1cde:	ac 01       	movw	r20, r24
    1ce0:	b5 01       	movw	r22, r10
    1ce2:	c4 01       	movw	r24, r8
    1ce4:	0e 94 4f 11 	call	0x229e	; 0x229e <u8g2_DrawHVLine>
    1ce8:	dc 17       	cp	r29, r28
    1cea:	20 f0       	brcs	.+8      	; 0x1cf4 <u8g2_font_decode_len+0xb6>
    1cec:	dc 1b       	sub	r29, r28
    1cee:	1f 5f       	subi	r17, 0xFF	; 255
    1cf0:	51 2c       	mov	r5, r1
    1cf2:	c4 cf       	rjmp	.-120    	; 0x1c7c <u8g2_font_decode_len+0x3e>
    1cf4:	f4 01       	movw	r30, r8
    1cf6:	e8 5b       	subi	r30, 0xB8	; 184
    1cf8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cfa:	d5 0d       	add	r29, r5
    1cfc:	d6 83       	std	Z+6, r29	; 0x06
    1cfe:	47 82       	std	Z+7, r4	; 0x07
    1d00:	df 91       	pop	r29
    1d02:	cf 91       	pop	r28
    1d04:	1f 91       	pop	r17
    1d06:	0f 91       	pop	r16
    1d08:	ff 90       	pop	r15
    1d0a:	ef 90       	pop	r14
    1d0c:	df 90       	pop	r13
    1d0e:	cf 90       	pop	r12
    1d10:	bf 90       	pop	r11
    1d12:	af 90       	pop	r10
    1d14:	9f 90       	pop	r9
    1d16:	8f 90       	pop	r8
    1d18:	7f 90       	pop	r7
    1d1a:	6f 90       	pop	r6
    1d1c:	5f 90       	pop	r5
    1d1e:	4f 90       	pop	r4
    1d20:	3f 90       	pop	r3
    1d22:	2f 90       	pop	r2
    1d24:	08 95       	ret

00001d26 <u8g2_font_decode_glyph>:
    1d26:	6f 92       	push	r6
    1d28:	7f 92       	push	r7
    1d2a:	8f 92       	push	r8
    1d2c:	9f 92       	push	r9
    1d2e:	af 92       	push	r10
    1d30:	bf 92       	push	r11
    1d32:	cf 92       	push	r12
    1d34:	df 92       	push	r13
    1d36:	ef 92       	push	r14
    1d38:	ff 92       	push	r15
    1d3a:	0f 93       	push	r16
    1d3c:	1f 93       	push	r17
    1d3e:	cf 93       	push	r28
    1d40:	df 93       	push	r29
    1d42:	ec 01       	movw	r28, r24
    1d44:	7c 01       	movw	r14, r24
    1d46:	88 e4       	ldi	r24, 0x48	; 72
    1d48:	e8 0e       	add	r14, r24
    1d4a:	f1 1c       	adc	r15, r1
    1d4c:	ce 01       	movw	r24, r28
    1d4e:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <u8g2_font_setup_decode>
    1d52:	fe 01       	movw	r30, r28
    1d54:	ef 5a       	subi	r30, 0xAF	; 175
    1d56:	ff 4f       	sbci	r31, 0xFF	; 255
    1d58:	60 80       	ld	r6, Z
    1d5a:	3c 96       	adiw	r30, 0x0c	; 12
    1d5c:	60 81       	ld	r22, Z
    1d5e:	c7 01       	movw	r24, r14
    1d60:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <u8g2_font_decode_get_signed_bits>
    1d64:	98 2e       	mov	r9, r24
    1d66:	fe 01       	movw	r30, r28
    1d68:	e2 5a       	subi	r30, 0xA2	; 162
    1d6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d6c:	60 81       	ld	r22, Z
    1d6e:	c7 01       	movw	r24, r14
    1d70:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <u8g2_font_decode_get_signed_bits>
    1d74:	18 2f       	mov	r17, r24
    1d76:	fe 01       	movw	r30, r28
    1d78:	e1 5a       	subi	r30, 0xA1	; 161
    1d7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d7c:	60 81       	ld	r22, Z
    1d7e:	c7 01       	movw	r24, r14
    1d80:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <u8g2_font_decode_get_signed_bits>
    1d84:	78 2e       	mov	r7, r24
    1d86:	f7 01       	movw	r30, r14
    1d88:	80 84       	ldd	r8, Z+8	; 0x08
    1d8a:	18 14       	cp	r1, r8
    1d8c:	0c f0       	brlt	.+2      	; 0x1d90 <u8g2_font_decode_glyph+0x6a>
    1d8e:	a4 c0       	rjmp	.+328    	; 0x1ed8 <u8g2_font_decode_glyph+0x1b2>
    1d90:	06 85       	ldd	r16, Z+14	; 0x0e
    1d92:	16 0d       	add	r17, r6
    1d94:	11 95       	neg	r17
    1d96:	20 2f       	mov	r18, r16
    1d98:	41 2f       	mov	r20, r17
    1d9a:	69 2d       	mov	r22, r9
    1d9c:	82 81       	ldd	r24, Z+2	; 0x02
    1d9e:	93 81       	ldd	r25, Z+3	; 0x03
    1da0:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <u8g2_add_vector_x>
    1da4:	6c 01       	movw	r12, r24
    1da6:	f7 01       	movw	r30, r14
    1da8:	93 83       	std	Z+3, r25	; 0x03
    1daa:	82 83       	std	Z+2, r24	; 0x02
    1dac:	20 2f       	mov	r18, r16
    1dae:	41 2f       	mov	r20, r17
    1db0:	69 2d       	mov	r22, r9
    1db2:	84 81       	ldd	r24, Z+4	; 0x04
    1db4:	95 81       	ldd	r25, Z+5	; 0x05
    1db6:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <u8g2_add_vector_y>
    1dba:	f7 01       	movw	r30, r14
    1dbc:	95 83       	std	Z+5, r25	; 0x05
    1dbe:	84 83       	std	Z+4, r24	; 0x04
    1dc0:	01 30       	cpi	r16, 0x01	; 1
    1dc2:	89 f0       	breq	.+34     	; 0x1de6 <u8g2_font_decode_glyph+0xc0>
    1dc4:	28 f0       	brcs	.+10     	; 0x1dd0 <u8g2_font_decode_glyph+0xaa>
    1dc6:	02 30       	cpi	r16, 0x02	; 2
    1dc8:	f9 f0       	breq	.+62     	; 0x1e08 <u8g2_font_decode_glyph+0xe2>
    1dca:	03 30       	cpi	r16, 0x03	; 3
    1dcc:	99 f1       	breq	.+102    	; 0x1e34 <u8g2_font_decode_glyph+0x10e>
    1dce:	43 c0       	rjmp	.+134    	; 0x1e56 <u8g2_font_decode_glyph+0x130>
    1dd0:	96 01       	movw	r18, r12
    1dd2:	28 0d       	add	r18, r8
    1dd4:	31 1d       	adc	r19, r1
    1dd6:	87 fc       	sbrc	r8, 7
    1dd8:	3a 95       	dec	r19
    1dda:	8c 01       	movw	r16, r24
    1ddc:	06 0d       	add	r16, r6
    1dde:	11 1d       	adc	r17, r1
    1de0:	67 fc       	sbrc	r6, 7
    1de2:	1a 95       	dec	r17
    1de4:	3a c0       	rjmp	.+116    	; 0x1e5a <u8g2_font_decode_glyph+0x134>
    1de6:	41 e0       	ldi	r20, 0x01	; 1
    1de8:	50 e0       	ldi	r21, 0x00	; 0
    1dea:	46 19       	sub	r20, r6
    1dec:	51 09       	sbc	r21, r1
    1dee:	67 fc       	sbrc	r6, 7
    1df0:	53 95       	inc	r21
    1df2:	96 01       	movw	r18, r12
    1df4:	2f 5f       	subi	r18, 0xFF	; 255
    1df6:	3f 4f       	sbci	r19, 0xFF	; 255
    1df8:	8c 01       	movw	r16, r24
    1dfa:	08 0d       	add	r16, r8
    1dfc:	11 1d       	adc	r17, r1
    1dfe:	87 fc       	sbrc	r8, 7
    1e00:	1a 95       	dec	r17
    1e02:	c4 0e       	add	r12, r20
    1e04:	d5 1e       	adc	r13, r21
    1e06:	29 c0       	rjmp	.+82     	; 0x1e5a <u8g2_font_decode_glyph+0x134>
    1e08:	41 e0       	ldi	r20, 0x01	; 1
    1e0a:	50 e0       	ldi	r21, 0x00	; 0
    1e0c:	ba 01       	movw	r22, r20
    1e0e:	68 19       	sub	r22, r8
    1e10:	71 09       	sbc	r23, r1
    1e12:	87 fc       	sbrc	r8, 7
    1e14:	73 95       	inc	r23
    1e16:	96 01       	movw	r18, r12
    1e18:	2f 5f       	subi	r18, 0xFF	; 255
    1e1a:	3f 4f       	sbci	r19, 0xFF	; 255
    1e1c:	46 19       	sub	r20, r6
    1e1e:	51 09       	sbc	r21, r1
    1e20:	67 fc       	sbrc	r6, 7
    1e22:	53 95       	inc	r21
    1e24:	8c 01       	movw	r16, r24
    1e26:	0f 5f       	subi	r16, 0xFF	; 255
    1e28:	1f 4f       	sbci	r17, 0xFF	; 255
    1e2a:	84 0f       	add	r24, r20
    1e2c:	95 1f       	adc	r25, r21
    1e2e:	c6 0e       	add	r12, r22
    1e30:	d7 1e       	adc	r13, r23
    1e32:	13 c0       	rjmp	.+38     	; 0x1e5a <u8g2_font_decode_glyph+0x134>
    1e34:	96 01       	movw	r18, r12
    1e36:	26 0d       	add	r18, r6
    1e38:	31 1d       	adc	r19, r1
    1e3a:	67 fc       	sbrc	r6, 7
    1e3c:	3a 95       	dec	r19
    1e3e:	41 e0       	ldi	r20, 0x01	; 1
    1e40:	50 e0       	ldi	r21, 0x00	; 0
    1e42:	48 19       	sub	r20, r8
    1e44:	51 09       	sbc	r21, r1
    1e46:	87 fc       	sbrc	r8, 7
    1e48:	53 95       	inc	r21
    1e4a:	8c 01       	movw	r16, r24
    1e4c:	0f 5f       	subi	r16, 0xFF	; 255
    1e4e:	1f 4f       	sbci	r17, 0xFF	; 255
    1e50:	84 0f       	add	r24, r20
    1e52:	95 1f       	adc	r25, r21
    1e54:	02 c0       	rjmp	.+4      	; 0x1e5a <u8g2_font_decode_glyph+0x134>
    1e56:	8c 01       	movw	r16, r24
    1e58:	96 01       	movw	r18, r12
    1e5a:	ac 01       	movw	r20, r24
    1e5c:	b6 01       	movw	r22, r12
    1e5e:	ce 01       	movw	r24, r28
    1e60:	0e 94 1e 12 	call	0x243c	; 0x243c <u8g2_IsIntersection>
    1e64:	88 23       	and	r24, r24
    1e66:	c1 f1       	breq	.+112    	; 0x1ed8 <u8g2_font_decode_glyph+0x1b2>
    1e68:	fe 01       	movw	r30, r28
    1e6a:	e8 5b       	subi	r30, 0xB8	; 184
    1e6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e6e:	16 82       	std	Z+6, r1	; 0x06
    1e70:	17 82       	std	Z+7, r1	; 0x07
    1e72:	4e 01       	movw	r8, r28
    1e74:	f9 e5       	ldi	r31, 0x59	; 89
    1e76:	8f 0e       	add	r8, r31
    1e78:	91 1c       	adc	r9, r1
    1e7a:	5e 01       	movw	r10, r28
    1e7c:	8a e5       	ldi	r24, 0x5A	; 90
    1e7e:	a8 0e       	add	r10, r24
    1e80:	b1 1c       	adc	r11, r1
    1e82:	6e 01       	movw	r12, r28
    1e84:	e8 e4       	ldi	r30, 0x48	; 72
    1e86:	ce 0e       	add	r12, r30
    1e88:	d1 1c       	adc	r13, r1
    1e8a:	f4 01       	movw	r30, r8
    1e8c:	60 81       	ld	r22, Z
    1e8e:	c7 01       	movw	r24, r14
    1e90:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <u8g2_font_decode_get_unsigned_bits>
    1e94:	08 2f       	mov	r16, r24
    1e96:	f5 01       	movw	r30, r10
    1e98:	60 81       	ld	r22, Z
    1e9a:	c7 01       	movw	r24, r14
    1e9c:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <u8g2_font_decode_get_unsigned_bits>
    1ea0:	18 2f       	mov	r17, r24
    1ea2:	40 e0       	ldi	r20, 0x00	; 0
    1ea4:	60 2f       	mov	r22, r16
    1ea6:	ce 01       	movw	r24, r28
    1ea8:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <u8g2_font_decode_len>
    1eac:	41 e0       	ldi	r20, 0x01	; 1
    1eae:	61 2f       	mov	r22, r17
    1eb0:	ce 01       	movw	r24, r28
    1eb2:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <u8g2_font_decode_len>
    1eb6:	61 e0       	ldi	r22, 0x01	; 1
    1eb8:	c7 01       	movw	r24, r14
    1eba:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <u8g2_font_decode_get_unsigned_bits>
    1ebe:	81 11       	cpse	r24, r1
    1ec0:	f0 cf       	rjmp	.-32     	; 0x1ea2 <u8g2_font_decode_glyph+0x17c>
    1ec2:	f6 01       	movw	r30, r12
    1ec4:	87 81       	ldd	r24, Z+7	; 0x07
    1ec6:	86 15       	cp	r24, r6
    1ec8:	04 f3       	brlt	.-64     	; 0x1e8a <u8g2_font_decode_glyph+0x164>
    1eca:	fe 01       	movw	r30, r28
    1ecc:	ec 58       	subi	r30, 0x8C	; 140
    1ece:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed0:	c8 5b       	subi	r28, 0xB8	; 184
    1ed2:	df 4f       	sbci	r29, 0xFF	; 255
    1ed4:	8c 85       	ldd	r24, Y+12	; 0x0c
    1ed6:	80 83       	st	Z, r24
    1ed8:	87 2d       	mov	r24, r7
    1eda:	df 91       	pop	r29
    1edc:	cf 91       	pop	r28
    1ede:	1f 91       	pop	r17
    1ee0:	0f 91       	pop	r16
    1ee2:	ff 90       	pop	r15
    1ee4:	ef 90       	pop	r14
    1ee6:	df 90       	pop	r13
    1ee8:	cf 90       	pop	r12
    1eea:	bf 90       	pop	r11
    1eec:	af 90       	pop	r10
    1eee:	9f 90       	pop	r9
    1ef0:	8f 90       	pop	r8
    1ef2:	7f 90       	pop	r7
    1ef4:	6f 90       	pop	r6
    1ef6:	08 95       	ret

00001ef8 <u8g2_font_get_glyph_data>:
    1ef8:	ef 92       	push	r14
    1efa:	ff 92       	push	r15
    1efc:	0f 93       	push	r16
    1efe:	1f 93       	push	r17
    1f00:	cf 93       	push	r28
    1f02:	df 93       	push	r29
    1f04:	fc 01       	movw	r30, r24
    1f06:	ec 5b       	subi	r30, 0xBC	; 188
    1f08:	ff 4f       	sbci	r31, 0xFF	; 255
    1f0a:	c0 81       	ld	r28, Z
    1f0c:	d1 81       	ldd	r29, Z+1	; 0x01
    1f0e:	67 96       	adiw	r28, 0x17	; 23
    1f10:	6f 3f       	cpi	r22, 0xFF	; 255
    1f12:	71 05       	cpc	r23, r1
    1f14:	11 f0       	breq	.+4      	; 0x1f1a <u8g2_font_get_glyph_data+0x22>
    1f16:	08 f0       	brcs	.+2      	; 0x1f1a <u8g2_font_get_glyph_data+0x22>
    1f18:	35 c0       	rjmp	.+106    	; 0x1f84 <u8g2_font_get_glyph_data+0x8c>
    1f1a:	61 36       	cpi	r22, 0x61	; 97
    1f1c:	71 05       	cpc	r23, r1
    1f1e:	30 f0       	brcs	.+12     	; 0x1f2c <u8g2_font_get_glyph_data+0x34>
    1f20:	b6 96       	adiw	r30, 0x26	; 38
    1f22:	80 81       	ld	r24, Z
    1f24:	91 81       	ldd	r25, Z+1	; 0x01
    1f26:	c8 0f       	add	r28, r24
    1f28:	d9 1f       	adc	r29, r25
    1f2a:	0a c0       	rjmp	.+20     	; 0x1f40 <u8g2_font_get_glyph_data+0x48>
    1f2c:	61 34       	cpi	r22, 0x41	; 65
    1f2e:	71 05       	cpc	r23, r1
    1f30:	38 f0       	brcs	.+14     	; 0x1f40 <u8g2_font_get_glyph_data+0x48>
    1f32:	fc 01       	movw	r30, r24
    1f34:	e8 59       	subi	r30, 0x98	; 152
    1f36:	ff 4f       	sbci	r31, 0xFF	; 255
    1f38:	80 81       	ld	r24, Z
    1f3a:	91 81       	ldd	r25, Z+1	; 0x01
    1f3c:	c8 0f       	add	r28, r24
    1f3e:	d9 1f       	adc	r29, r25
    1f40:	ce 01       	movw	r24, r28
    1f42:	01 96       	adiw	r24, 0x01	; 1
    1f44:	fc 01       	movw	r30, r24
    1f46:	24 91       	lpm	r18, Z
    1f48:	22 23       	and	r18, r18
    1f4a:	09 f4       	brne	.+2      	; 0x1f4e <u8g2_font_get_glyph_data+0x56>
    1f4c:	5a c0       	rjmp	.+180    	; 0x2002 <u8g2_font_get_glyph_data+0x10a>
    1f4e:	fe 01       	movw	r30, r28
    1f50:	24 91       	lpm	r18, Z
    1f52:	30 e0       	ldi	r19, 0x00	; 0
    1f54:	62 17       	cp	r22, r18
    1f56:	73 07       	cpc	r23, r19
    1f58:	51 f4       	brne	.+20     	; 0x1f6e <u8g2_font_get_glyph_data+0x76>
    1f5a:	06 c0       	rjmp	.+12     	; 0x1f68 <u8g2_font_get_glyph_data+0x70>
    1f5c:	fe 01       	movw	r30, r28
    1f5e:	24 91       	lpm	r18, Z
    1f60:	30 e0       	ldi	r19, 0x00	; 0
    1f62:	62 17       	cp	r22, r18
    1f64:	73 07       	cpc	r23, r19
    1f66:	19 f4       	brne	.+6      	; 0x1f6e <u8g2_font_get_glyph_data+0x76>
    1f68:	ce 01       	movw	r24, r28
    1f6a:	02 96       	adiw	r24, 0x02	; 2
    1f6c:	52 c0       	rjmp	.+164    	; 0x2012 <u8g2_font_get_glyph_data+0x11a>
    1f6e:	fc 01       	movw	r30, r24
    1f70:	84 91       	lpm	r24, Z
    1f72:	c8 0f       	add	r28, r24
    1f74:	d1 1d       	adc	r29, r1
    1f76:	ce 01       	movw	r24, r28
    1f78:	01 96       	adiw	r24, 0x01	; 1
    1f7a:	fc 01       	movw	r30, r24
    1f7c:	24 91       	lpm	r18, Z
    1f7e:	21 11       	cpse	r18, r1
    1f80:	ed cf       	rjmp	.-38     	; 0x1f5c <u8g2_font_get_glyph_data+0x64>
    1f82:	42 c0       	rjmp	.+132    	; 0x2008 <u8g2_font_get_glyph_data+0x110>
    1f84:	8b 01       	movw	r16, r22
    1f86:	fc 01       	movw	r30, r24
    1f88:	e4 59       	subi	r30, 0x94	; 148
    1f8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f8c:	80 81       	ld	r24, Z
    1f8e:	91 81       	ldd	r25, Z+1	; 0x01
    1f90:	c8 0f       	add	r28, r24
    1f92:	d9 1f       	adc	r29, r25
    1f94:	7e 01       	movw	r14, r28
    1f96:	60 e0       	ldi	r22, 0x00	; 0
    1f98:	c7 01       	movw	r24, r14
    1f9a:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <u8g2_font_get_word>
    1f9e:	c8 0f       	add	r28, r24
    1fa0:	d9 1f       	adc	r29, r25
    1fa2:	62 e0       	ldi	r22, 0x02	; 2
    1fa4:	c7 01       	movw	r24, r14
    1fa6:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <u8g2_font_get_word>
    1faa:	f4 e0       	ldi	r31, 0x04	; 4
    1fac:	ef 0e       	add	r14, r31
    1fae:	f1 1c       	adc	r15, r1
    1fb0:	80 17       	cp	r24, r16
    1fb2:	91 07       	cpc	r25, r17
    1fb4:	80 f3       	brcs	.-32     	; 0x1f96 <u8g2_font_get_glyph_data+0x9e>
    1fb6:	fe 01       	movw	r30, r28
    1fb8:	84 91       	lpm	r24, Z
    1fba:	90 e0       	ldi	r25, 0x00	; 0
    1fbc:	98 2f       	mov	r25, r24
    1fbe:	88 27       	eor	r24, r24
    1fc0:	31 96       	adiw	r30, 0x01	; 1
    1fc2:	e4 91       	lpm	r30, Z
    1fc4:	8e 2b       	or	r24, r30
    1fc6:	00 97       	sbiw	r24, 0x00	; 0
    1fc8:	11 f1       	breq	.+68     	; 0x200e <u8g2_font_get_glyph_data+0x116>
    1fca:	08 17       	cp	r16, r24
    1fcc:	19 07       	cpc	r17, r25
    1fce:	39 f4       	brne	.+14     	; 0x1fde <u8g2_font_get_glyph_data+0xe6>
    1fd0:	03 c0       	rjmp	.+6      	; 0x1fd8 <u8g2_font_get_glyph_data+0xe0>
    1fd2:	08 17       	cp	r16, r24
    1fd4:	19 07       	cpc	r17, r25
    1fd6:	19 f4       	brne	.+6      	; 0x1fde <u8g2_font_get_glyph_data+0xe6>
    1fd8:	ce 01       	movw	r24, r28
    1fda:	03 96       	adiw	r24, 0x03	; 3
    1fdc:	1a c0       	rjmp	.+52     	; 0x2012 <u8g2_font_get_glyph_data+0x11a>
    1fde:	fe 01       	movw	r30, r28
    1fe0:	32 96       	adiw	r30, 0x02	; 2
    1fe2:	e4 91       	lpm	r30, Z
    1fe4:	ce 0f       	add	r28, r30
    1fe6:	d1 1d       	adc	r29, r1
    1fe8:	fe 01       	movw	r30, r28
    1fea:	84 91       	lpm	r24, Z
    1fec:	90 e0       	ldi	r25, 0x00	; 0
    1fee:	98 2f       	mov	r25, r24
    1ff0:	88 27       	eor	r24, r24
    1ff2:	31 96       	adiw	r30, 0x01	; 1
    1ff4:	e4 91       	lpm	r30, Z
    1ff6:	8e 2b       	or	r24, r30
    1ff8:	00 97       	sbiw	r24, 0x00	; 0
    1ffa:	59 f7       	brne	.-42     	; 0x1fd2 <u8g2_font_get_glyph_data+0xda>
    1ffc:	80 e0       	ldi	r24, 0x00	; 0
    1ffe:	90 e0       	ldi	r25, 0x00	; 0
    2000:	08 c0       	rjmp	.+16     	; 0x2012 <u8g2_font_get_glyph_data+0x11a>
    2002:	80 e0       	ldi	r24, 0x00	; 0
    2004:	90 e0       	ldi	r25, 0x00	; 0
    2006:	05 c0       	rjmp	.+10     	; 0x2012 <u8g2_font_get_glyph_data+0x11a>
    2008:	80 e0       	ldi	r24, 0x00	; 0
    200a:	90 e0       	ldi	r25, 0x00	; 0
    200c:	02 c0       	rjmp	.+4      	; 0x2012 <u8g2_font_get_glyph_data+0x11a>
    200e:	80 e0       	ldi	r24, 0x00	; 0
    2010:	90 e0       	ldi	r25, 0x00	; 0
    2012:	df 91       	pop	r29
    2014:	cf 91       	pop	r28
    2016:	1f 91       	pop	r17
    2018:	0f 91       	pop	r16
    201a:	ff 90       	pop	r15
    201c:	ef 90       	pop	r14
    201e:	08 95       	ret

00002020 <u8g2_DrawGlyph>:
    2020:	cf 92       	push	r12
    2022:	df 92       	push	r13
    2024:	ef 92       	push	r14
    2026:	ff 92       	push	r15
    2028:	0f 93       	push	r16
    202a:	1f 93       	push	r17
    202c:	cf 93       	push	r28
    202e:	df 93       	push	r29
    2030:	ec 01       	movw	r28, r24
    2032:	7b 01       	movw	r14, r22
    2034:	8a 01       	movw	r16, r20
    2036:	69 01       	movw	r12, r18
    2038:	fc 01       	movw	r30, r24
    203a:	ea 5a       	subi	r30, 0xAA	; 170
    203c:	ff 4f       	sbci	r31, 0xFF	; 255
    203e:	80 81       	ld	r24, Z
    2040:	81 30       	cpi	r24, 0x01	; 1
    2042:	89 f0       	breq	.+34     	; 0x2066 <u8g2_DrawGlyph+0x46>
    2044:	28 f0       	brcs	.+10     	; 0x2050 <u8g2_DrawGlyph+0x30>
    2046:	82 30       	cpi	r24, 0x02	; 2
    2048:	c9 f0       	breq	.+50     	; 0x207c <u8g2_DrawGlyph+0x5c>
    204a:	83 30       	cpi	r24, 0x03	; 3
    204c:	11 f1       	breq	.+68     	; 0x2092 <u8g2_DrawGlyph+0x72>
    204e:	2b c0       	rjmp	.+86     	; 0x20a6 <u8g2_DrawGlyph+0x86>
    2050:	fe 01       	movw	r30, r28
    2052:	ea 5b       	subi	r30, 0xBA	; 186
    2054:	ff 4f       	sbci	r31, 0xFF	; 255
    2056:	01 90       	ld	r0, Z+
    2058:	f0 81       	ld	r31, Z
    205a:	e0 2d       	mov	r30, r0
    205c:	ce 01       	movw	r24, r28
    205e:	09 95       	icall
    2060:	08 0f       	add	r16, r24
    2062:	19 1f       	adc	r17, r25
    2064:	20 c0       	rjmp	.+64     	; 0x20a6 <u8g2_DrawGlyph+0x86>
    2066:	fe 01       	movw	r30, r28
    2068:	ea 5b       	subi	r30, 0xBA	; 186
    206a:	ff 4f       	sbci	r31, 0xFF	; 255
    206c:	01 90       	ld	r0, Z+
    206e:	f0 81       	ld	r31, Z
    2070:	e0 2d       	mov	r30, r0
    2072:	ce 01       	movw	r24, r28
    2074:	09 95       	icall
    2076:	e8 1a       	sub	r14, r24
    2078:	f9 0a       	sbc	r15, r25
    207a:	15 c0       	rjmp	.+42     	; 0x20a6 <u8g2_DrawGlyph+0x86>
    207c:	fe 01       	movw	r30, r28
    207e:	ea 5b       	subi	r30, 0xBA	; 186
    2080:	ff 4f       	sbci	r31, 0xFF	; 255
    2082:	01 90       	ld	r0, Z+
    2084:	f0 81       	ld	r31, Z
    2086:	e0 2d       	mov	r30, r0
    2088:	ce 01       	movw	r24, r28
    208a:	09 95       	icall
    208c:	08 1b       	sub	r16, r24
    208e:	19 0b       	sbc	r17, r25
    2090:	0a c0       	rjmp	.+20     	; 0x20a6 <u8g2_DrawGlyph+0x86>
    2092:	fe 01       	movw	r30, r28
    2094:	ea 5b       	subi	r30, 0xBA	; 186
    2096:	ff 4f       	sbci	r31, 0xFF	; 255
    2098:	01 90       	ld	r0, Z+
    209a:	f0 81       	ld	r31, Z
    209c:	e0 2d       	mov	r30, r0
    209e:	ce 01       	movw	r24, r28
    20a0:	09 95       	icall
    20a2:	e8 0e       	add	r14, r24
    20a4:	f9 1e       	adc	r15, r25
    20a6:	fe 01       	movw	r30, r28
    20a8:	e6 5b       	subi	r30, 0xB6	; 182
    20aa:	ff 4f       	sbci	r31, 0xFF	; 255
    20ac:	f1 82       	std	Z+1, r15	; 0x01
    20ae:	e0 82       	st	Z, r14
    20b0:	32 96       	adiw	r30, 0x02	; 2
    20b2:	11 83       	std	Z+1, r17	; 0x01
    20b4:	00 83       	st	Z, r16
    20b6:	b6 01       	movw	r22, r12
    20b8:	ce 01       	movw	r24, r28
    20ba:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <u8g2_font_get_glyph_data>
    20be:	00 97       	sbiw	r24, 0x00	; 0
    20c0:	41 f0       	breq	.+16     	; 0x20d2 <u8g2_DrawGlyph+0xb2>
    20c2:	bc 01       	movw	r22, r24
    20c4:	ce 01       	movw	r24, r28
    20c6:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <u8g2_font_decode_glyph>
    20ca:	08 2e       	mov	r0, r24
    20cc:	00 0c       	add	r0, r0
    20ce:	99 0b       	sbc	r25, r25
    20d0:	02 c0       	rjmp	.+4      	; 0x20d6 <u8g2_DrawGlyph+0xb6>
    20d2:	80 e0       	ldi	r24, 0x00	; 0
    20d4:	90 e0       	ldi	r25, 0x00	; 0
    20d6:	df 91       	pop	r29
    20d8:	cf 91       	pop	r28
    20da:	1f 91       	pop	r17
    20dc:	0f 91       	pop	r16
    20de:	ff 90       	pop	r15
    20e0:	ef 90       	pop	r14
    20e2:	df 90       	pop	r13
    20e4:	cf 90       	pop	r12
    20e6:	08 95       	ret

000020e8 <u8g2_draw_string>:
    20e8:	8f 92       	push	r8
    20ea:	9f 92       	push	r9
    20ec:	af 92       	push	r10
    20ee:	bf 92       	push	r11
    20f0:	cf 92       	push	r12
    20f2:	df 92       	push	r13
    20f4:	ef 92       	push	r14
    20f6:	ff 92       	push	r15
    20f8:	0f 93       	push	r16
    20fa:	1f 93       	push	r17
    20fc:	cf 93       	push	r28
    20fe:	df 93       	push	r29
    2100:	ec 01       	movw	r28, r24
    2102:	5b 01       	movw	r10, r22
    2104:	6a 01       	movw	r12, r20
    2106:	e2 2e       	mov	r14, r18
    2108:	f3 2e       	mov	r15, r19
    210a:	0e 94 84 14 	call	0x2908	; 0x2908 <u8x8_utf8_init>
    210e:	0e 2d       	mov	r16, r14
    2110:	1f 2d       	mov	r17, r15
    2112:	e1 2c       	mov	r14, r1
    2114:	f1 2c       	mov	r15, r1
    2116:	4e 01       	movw	r8, r28
    2118:	26 e5       	ldi	r18, 0x56	; 86
    211a:	82 0e       	add	r8, r18
    211c:	91 1c       	adc	r9, r1
    211e:	f8 01       	movw	r30, r16
    2120:	61 91       	ld	r22, Z+
    2122:	8f 01       	movw	r16, r30
    2124:	ea 81       	ldd	r30, Y+2	; 0x02
    2126:	fb 81       	ldd	r31, Y+3	; 0x03
    2128:	ce 01       	movw	r24, r28
    212a:	09 95       	icall
    212c:	8f 3f       	cpi	r24, 0xFF	; 255
    212e:	ff ef       	ldi	r31, 0xFF	; 255
    2130:	9f 07       	cpc	r25, r31
    2132:	19 f1       	breq	.+70     	; 0x217a <u8g2_draw_string+0x92>
    2134:	8e 3f       	cpi	r24, 0xFE	; 254
    2136:	2f ef       	ldi	r18, 0xFF	; 255
    2138:	92 07       	cpc	r25, r18
    213a:	89 f3       	breq	.-30     	; 0x211e <u8g2_draw_string+0x36>
    213c:	9c 01       	movw	r18, r24
    213e:	a6 01       	movw	r20, r12
    2140:	b5 01       	movw	r22, r10
    2142:	ce 01       	movw	r24, r28
    2144:	0e 94 10 10 	call	0x2020	; 0x2020 <u8g2_DrawGlyph>
    2148:	9c 01       	movw	r18, r24
    214a:	f4 01       	movw	r30, r8
    214c:	90 81       	ld	r25, Z
    214e:	91 30       	cpi	r25, 0x01	; 1
    2150:	49 f0       	breq	.+18     	; 0x2164 <u8g2_draw_string+0x7c>
    2152:	28 f0       	brcs	.+10     	; 0x215e <u8g2_draw_string+0x76>
    2154:	92 30       	cpi	r25, 0x02	; 2
    2156:	49 f0       	breq	.+18     	; 0x216a <u8g2_draw_string+0x82>
    2158:	93 30       	cpi	r25, 0x03	; 3
    215a:	51 f0       	breq	.+20     	; 0x2170 <u8g2_draw_string+0x88>
    215c:	0b c0       	rjmp	.+22     	; 0x2174 <u8g2_draw_string+0x8c>
    215e:	a2 0e       	add	r10, r18
    2160:	b3 1e       	adc	r11, r19
    2162:	08 c0       	rjmp	.+16     	; 0x2174 <u8g2_draw_string+0x8c>
    2164:	c2 0e       	add	r12, r18
    2166:	d3 1e       	adc	r13, r19
    2168:	05 c0       	rjmp	.+10     	; 0x2174 <u8g2_draw_string+0x8c>
    216a:	a2 1a       	sub	r10, r18
    216c:	b3 0a       	sbc	r11, r19
    216e:	02 c0       	rjmp	.+4      	; 0x2174 <u8g2_draw_string+0x8c>
    2170:	c2 1a       	sub	r12, r18
    2172:	d3 0a       	sbc	r13, r19
    2174:	e2 0e       	add	r14, r18
    2176:	f3 1e       	adc	r15, r19
    2178:	d2 cf       	rjmp	.-92     	; 0x211e <u8g2_draw_string+0x36>
    217a:	c7 01       	movw	r24, r14
    217c:	df 91       	pop	r29
    217e:	cf 91       	pop	r28
    2180:	1f 91       	pop	r17
    2182:	0f 91       	pop	r16
    2184:	ff 90       	pop	r15
    2186:	ef 90       	pop	r14
    2188:	df 90       	pop	r13
    218a:	cf 90       	pop	r12
    218c:	bf 90       	pop	r11
    218e:	af 90       	pop	r10
    2190:	9f 90       	pop	r9
    2192:	8f 90       	pop	r8
    2194:	08 95       	ret

00002196 <u8g2_DrawStr>:
    2196:	e7 e7       	ldi	r30, 0x77	; 119
    2198:	f4 e1       	ldi	r31, 0x14	; 20
    219a:	dc 01       	movw	r26, r24
    219c:	13 96       	adiw	r26, 0x03	; 3
    219e:	fc 93       	st	X, r31
    21a0:	ee 93       	st	-X, r30
    21a2:	12 97       	sbiw	r26, 0x02	; 2
    21a4:	0e 94 74 10 	call	0x20e8	; 0x20e8 <u8g2_draw_string>
    21a8:	08 95       	ret

000021aa <u8g2_UpdateRefHeight>:
    21aa:	fc 01       	movw	r30, r24
    21ac:	ec 5b       	subi	r30, 0xBC	; 188
    21ae:	ff 4f       	sbci	r31, 0xFF	; 255
    21b0:	20 81       	ld	r18, Z
    21b2:	31 81       	ldd	r19, Z+1	; 0x01
    21b4:	23 2b       	or	r18, r19
    21b6:	e1 f1       	breq	.+120    	; 0x2230 <u8g2_UpdateRefHeight+0x86>
    21b8:	b0 96       	adiw	r30, 0x20	; 32
    21ba:	20 81       	ld	r18, Z
    21bc:	3c 96       	adiw	r30, 0x0c	; 12
    21be:	20 83       	st	Z, r18
    21c0:	3b 97       	sbiw	r30, 0x0b	; 11
    21c2:	40 81       	ld	r20, Z
    21c4:	3c 96       	adiw	r30, 0x0c	; 12
    21c6:	40 83       	st	Z, r20
    21c8:	32 97       	sbiw	r30, 0x02	; 2
    21ca:	30 81       	ld	r19, Z
    21cc:	33 23       	and	r19, r19
    21ce:	81 f1       	breq	.+96     	; 0x2230 <u8g2_UpdateRefHeight+0x86>
    21d0:	31 30       	cpi	r19, 0x01	; 1
    21d2:	79 f4       	brne	.+30     	; 0x21f2 <u8g2_UpdateRefHeight+0x48>
    21d4:	39 97       	sbiw	r30, 0x09	; 9
    21d6:	30 81       	ld	r19, Z
    21d8:	23 17       	cp	r18, r19
    21da:	14 f4       	brge	.+4      	; 0x21e0 <u8g2_UpdateRefHeight+0x36>
    21dc:	3a 96       	adiw	r30, 0x0a	; 10
    21de:	30 83       	st	Z, r19
    21e0:	fc 01       	movw	r30, r24
    21e2:	e9 59       	subi	r30, 0x99	; 153
    21e4:	ff 4f       	sbci	r31, 0xFF	; 255
    21e6:	20 81       	ld	r18, Z
    21e8:	24 17       	cp	r18, r20
    21ea:	14 f5       	brge	.+68     	; 0x2230 <u8g2_UpdateRefHeight+0x86>
    21ec:	3a 96       	adiw	r30, 0x0a	; 10
    21ee:	20 83       	st	Z, r18
    21f0:	08 95       	ret
    21f2:	fc 01       	movw	r30, r24
    21f4:	ef 59       	subi	r30, 0x9F	; 159
    21f6:	ff 4f       	sbci	r31, 0xFF	; 255
    21f8:	e0 81       	ld	r30, Z
    21fa:	dc 01       	movw	r26, r24
    21fc:	ad 59       	subi	r26, 0x9D	; 157
    21fe:	bf 4f       	sbci	r27, 0xFF	; 255
    2200:	5c 91       	ld	r21, X
    2202:	02 2e       	mov	r0, r18
    2204:	00 0c       	add	r0, r0
    2206:	33 0b       	sbc	r19, r19
    2208:	65 2f       	mov	r22, r21
    220a:	05 2e       	mov	r0, r21
    220c:	00 0c       	add	r0, r0
    220e:	77 0b       	sbc	r23, r23
    2210:	6e 0f       	add	r22, r30
    2212:	71 1d       	adc	r23, r1
    2214:	e7 fd       	sbrc	r30, 7
    2216:	7a 95       	dec	r23
    2218:	26 17       	cp	r18, r22
    221a:	37 07       	cpc	r19, r23
    221c:	1c f4       	brge	.+6      	; 0x2224 <u8g2_UpdateRefHeight+0x7a>
    221e:	1d 96       	adiw	r26, 0x0d	; 13
    2220:	e5 0f       	add	r30, r21
    2222:	ec 93       	st	X, r30
    2224:	54 17       	cp	r21, r20
    2226:	24 f4       	brge	.+8      	; 0x2230 <u8g2_UpdateRefHeight+0x86>
    2228:	fc 01       	movw	r30, r24
    222a:	ef 58       	subi	r30, 0x8F	; 143
    222c:	ff 4f       	sbci	r31, 0xFF	; 255
    222e:	50 83       	st	Z, r21
    2230:	08 95       	ret

00002232 <u8g2_SetFontPosBaseline>:
    2232:	8a 5b       	subi	r24, 0xBA	; 186
    2234:	9f 4f       	sbci	r25, 0xFF	; 255
    2236:	28 e1       	ldi	r18, 0x18	; 24
    2238:	3d e0       	ldi	r19, 0x0D	; 13
    223a:	fc 01       	movw	r30, r24
    223c:	31 83       	std	Z+1, r19	; 0x01
    223e:	20 83       	st	Z, r18
    2240:	08 95       	ret

00002242 <u8g2_SetFontPosTop>:
    2242:	8a 5b       	subi	r24, 0xBA	; 186
    2244:	9f 4f       	sbci	r25, 0xFF	; 255
    2246:	2b e1       	ldi	r18, 0x1B	; 27
    2248:	3d e0       	ldi	r19, 0x0D	; 13
    224a:	fc 01       	movw	r30, r24
    224c:	31 83       	std	Z+1, r19	; 0x01
    224e:	20 83       	st	Z, r18
    2250:	08 95       	ret

00002252 <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
    2252:	cf 93       	push	r28
    2254:	df 93       	push	r29
  if ( u8g2->font != font )
    2256:	fc 01       	movw	r30, r24
    2258:	ec 5b       	subi	r30, 0xBC	; 188
    225a:	ff 4f       	sbci	r31, 0xFF	; 255
    225c:	20 81       	ld	r18, Z
    225e:	31 81       	ldd	r19, Z+1	; 0x01
    2260:	26 17       	cp	r18, r22
    2262:	37 07       	cpc	r19, r23
    2264:	51 f0       	breq	.+20     	; 0x227a <u8g2_SetFont+0x28>
    2266:	ec 01       	movw	r28, r24
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
    2268:	71 83       	std	Z+1, r23	; 0x01
    226a:	60 83       	st	Z, r22
    u8g2_read_font_info(&(u8g2->font_info), font);
    226c:	89 5a       	subi	r24, 0xA9	; 169
    226e:	9f 4f       	sbci	r25, 0xFF	; 255
    2270:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
    2274:	ce 01       	movw	r24, r28
    2276:	0e 94 d5 10 	call	0x21aa	; 0x21aa <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
    227a:	df 91       	pop	r29
    227c:	cf 91       	pop	r28
    227e:	08 95       	ret

00002280 <u8g2_draw_hv_line_2dir>:
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+1, y+len) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 1);
}
    2280:	0f 93       	push	r16
    2282:	dc 01       	movw	r26, r24
    2284:	9a 96       	adiw	r26, 0x2a	; 42
    2286:	ed 91       	ld	r30, X+
    2288:	fc 91       	ld	r31, X
    228a:	9b 97       	sbiw	r26, 0x2b	; 43
    228c:	4e 1b       	sub	r20, r30
    228e:	5f 0b       	sbc	r21, r31
    2290:	5e 96       	adiw	r26, 0x1e	; 30
    2292:	ed 91       	ld	r30, X+
    2294:	fc 91       	ld	r31, X
    2296:	5f 97       	sbiw	r26, 0x1f	; 31
    2298:	09 95       	icall
    229a:	0f 91       	pop	r16
    229c:	08 95       	ret

0000229e <u8g2_DrawHVLine>:
    229e:	ef 92       	push	r14
    22a0:	ff 92       	push	r15
    22a2:	0f 93       	push	r16
    22a4:	1f 93       	push	r17
    22a6:	cf 93       	push	r28
    22a8:	df 93       	push	r29
    22aa:	da 01       	movw	r26, r20
    22ac:	fc 01       	movw	r30, r24
    22ae:	e2 59       	subi	r30, 0x92	; 146
    22b0:	ff 4f       	sbci	r31, 0xFF	; 255
    22b2:	50 81       	ld	r21, Z
    22b4:	55 23       	and	r21, r21
    22b6:	09 f4       	brne	.+2      	; 0x22ba <u8g2_DrawHVLine+0x1c>
    22b8:	83 c0       	rjmp	.+262    	; 0x23c0 <u8g2_DrawHVLine+0x122>
    22ba:	21 15       	cp	r18, r1
    22bc:	31 05       	cpc	r19, r1
    22be:	09 f4       	brne	.+2      	; 0x22c2 <u8g2_DrawHVLine+0x24>
    22c0:	7f c0       	rjmp	.+254    	; 0x23c0 <u8g2_DrawHVLine+0x122>
    22c2:	22 30       	cpi	r18, 0x02	; 2
    22c4:	31 05       	cpc	r19, r1
    22c6:	70 f0       	brcs	.+28     	; 0x22e4 <u8g2_DrawHVLine+0x46>
    22c8:	02 30       	cpi	r16, 0x02	; 2
    22ca:	29 f4       	brne	.+10     	; 0x22d6 <u8g2_DrawHVLine+0x38>
    22cc:	6f 5f       	subi	r22, 0xFF	; 255
    22ce:	7f 4f       	sbci	r23, 0xFF	; 255
    22d0:	62 1b       	sub	r22, r18
    22d2:	73 0b       	sbc	r23, r19
    22d4:	0b c0       	rjmp	.+22     	; 0x22ec <u8g2_DrawHVLine+0x4e>
    22d6:	03 30       	cpi	r16, 0x03	; 3
    22d8:	29 f4       	brne	.+10     	; 0x22e4 <u8g2_DrawHVLine+0x46>
    22da:	11 96       	adiw	r26, 0x01	; 1
    22dc:	a2 1b       	sub	r26, r18
    22de:	b3 0b       	sbc	r27, r19
    22e0:	f1 e0       	ldi	r31, 0x01	; 1
    22e2:	37 c0       	rjmp	.+110    	; 0x2352 <u8g2_DrawHVLine+0xb4>
    22e4:	f0 2f       	mov	r31, r16
    22e6:	f1 70       	andi	r31, 0x01	; 1
    22e8:	00 fd       	sbrc	r16, 0
    22ea:	33 c0       	rjmp	.+102    	; 0x2352 <u8g2_DrawHVLine+0xb4>
    22ec:	ec 01       	movw	r28, r24
    22ee:	48 ad       	ldd	r20, Y+56	; 0x38
    22f0:	59 ad       	ldd	r21, Y+57	; 0x39
    22f2:	a4 17       	cp	r26, r20
    22f4:	b5 07       	cpc	r27, r21
    22f6:	08 f4       	brcc	.+2      	; 0x22fa <u8g2_DrawHVLine+0x5c>
    22f8:	63 c0       	rjmp	.+198    	; 0x23c0 <u8g2_DrawHVLine+0x122>
    22fa:	4a ad       	ldd	r20, Y+58	; 0x3a
    22fc:	5b ad       	ldd	r21, Y+59	; 0x3b
    22fe:	a4 17       	cp	r26, r20
    2300:	b5 07       	cpc	r27, r21
    2302:	08 f0       	brcs	.+2      	; 0x2306 <u8g2_DrawHVLine+0x68>
    2304:	5d c0       	rjmp	.+186    	; 0x23c0 <u8g2_DrawHVLine+0x122>
    2306:	4e a9       	ldd	r20, Y+54	; 0x36
    2308:	5f a9       	ldd	r21, Y+55	; 0x37
    230a:	ec a9       	ldd	r30, Y+52	; 0x34
    230c:	fd a9       	ldd	r31, Y+53	; 0x35
    230e:	26 0f       	add	r18, r22
    2310:	37 1f       	adc	r19, r23
    2312:	26 17       	cp	r18, r22
    2314:	37 07       	cpc	r19, r23
    2316:	40 f4       	brcc	.+16     	; 0x2328 <u8g2_DrawHVLine+0x8a>
    2318:	64 17       	cp	r22, r20
    231a:	75 07       	cpc	r23, r21
    231c:	20 f4       	brcc	.+8      	; 0x2326 <u8g2_DrawHVLine+0x88>
    231e:	9a 01       	movw	r18, r20
    2320:	21 50       	subi	r18, 0x01	; 1
    2322:	31 09       	sbc	r19, r1
    2324:	05 c0       	rjmp	.+10     	; 0x2330 <u8g2_DrawHVLine+0x92>
    2326:	bf 01       	movw	r22, r30
    2328:	64 17       	cp	r22, r20
    232a:	75 07       	cpc	r23, r21
    232c:	08 f0       	brcs	.+2      	; 0x2330 <u8g2_DrawHVLine+0x92>
    232e:	48 c0       	rjmp	.+144    	; 0x23c0 <u8g2_DrawHVLine+0x122>
    2330:	e2 17       	cp	r30, r18
    2332:	f3 07       	cpc	r31, r19
    2334:	08 f0       	brcs	.+2      	; 0x2338 <u8g2_DrawHVLine+0x9a>
    2336:	44 c0       	rjmp	.+136    	; 0x23c0 <u8g2_DrawHVLine+0x122>
    2338:	6e 17       	cp	r22, r30
    233a:	7f 07       	cpc	r23, r31
    233c:	08 f4       	brcc	.+2      	; 0x2340 <u8g2_DrawHVLine+0xa2>
    233e:	bf 01       	movw	r22, r30
    2340:	24 17       	cp	r18, r20
    2342:	35 07       	cpc	r19, r21
    2344:	08 f4       	brcc	.+2      	; 0x2348 <u8g2_DrawHVLine+0xaa>
    2346:	a9 01       	movw	r20, r18
    2348:	9a 01       	movw	r18, r20
    234a:	26 1b       	sub	r18, r22
    234c:	37 0b       	sbc	r19, r23
    234e:	f0 e0       	ldi	r31, 0x00	; 0
    2350:	2d c0       	rjmp	.+90     	; 0x23ac <u8g2_DrawHVLine+0x10e>
    2352:	ec 01       	movw	r28, r24
    2354:	4c a9       	ldd	r20, Y+52	; 0x34
    2356:	5d a9       	ldd	r21, Y+53	; 0x35
    2358:	64 17       	cp	r22, r20
    235a:	75 07       	cpc	r23, r21
    235c:	88 f1       	brcs	.+98     	; 0x23c0 <u8g2_DrawHVLine+0x122>
    235e:	4e a9       	ldd	r20, Y+54	; 0x36
    2360:	5f a9       	ldd	r21, Y+55	; 0x37
    2362:	64 17       	cp	r22, r20
    2364:	75 07       	cpc	r23, r21
    2366:	60 f5       	brcc	.+88     	; 0x23c0 <u8g2_DrawHVLine+0x122>
    2368:	4a ad       	ldd	r20, Y+58	; 0x3a
    236a:	5b ad       	ldd	r21, Y+59	; 0x3b
    236c:	08 ad       	ldd	r16, Y+56	; 0x38
    236e:	19 ad       	ldd	r17, Y+57	; 0x39
    2370:	2a 0f       	add	r18, r26
    2372:	3b 1f       	adc	r19, r27
    2374:	2a 17       	cp	r18, r26
    2376:	3b 07       	cpc	r19, r27
    2378:	40 f4       	brcc	.+16     	; 0x238a <u8g2_DrawHVLine+0xec>
    237a:	a4 17       	cp	r26, r20
    237c:	b5 07       	cpc	r27, r21
    237e:	20 f4       	brcc	.+8      	; 0x2388 <u8g2_DrawHVLine+0xea>
    2380:	9a 01       	movw	r18, r20
    2382:	21 50       	subi	r18, 0x01	; 1
    2384:	31 09       	sbc	r19, r1
    2386:	04 c0       	rjmp	.+8      	; 0x2390 <u8g2_DrawHVLine+0xf2>
    2388:	d8 01       	movw	r26, r16
    238a:	a4 17       	cp	r26, r20
    238c:	b5 07       	cpc	r27, r21
    238e:	c0 f4       	brcc	.+48     	; 0x23c0 <u8g2_DrawHVLine+0x122>
    2390:	02 17       	cp	r16, r18
    2392:	13 07       	cpc	r17, r19
    2394:	a8 f4       	brcc	.+42     	; 0x23c0 <u8g2_DrawHVLine+0x122>
    2396:	a0 17       	cp	r26, r16
    2398:	b1 07       	cpc	r27, r17
    239a:	08 f4       	brcc	.+2      	; 0x239e <u8g2_DrawHVLine+0x100>
    239c:	d8 01       	movw	r26, r16
    239e:	24 17       	cp	r18, r20
    23a0:	35 07       	cpc	r19, r21
    23a2:	08 f4       	brcc	.+2      	; 0x23a6 <u8g2_DrawHVLine+0x108>
    23a4:	a9 01       	movw	r20, r18
    23a6:	9a 01       	movw	r18, r20
    23a8:	2a 1b       	sub	r18, r26
    23aa:	3b 0b       	sbc	r19, r27
    23ac:	ec 01       	movw	r28, r24
    23ae:	48 a1       	ldd	r20, Y+32	; 0x20
    23b0:	59 a1       	ldd	r21, Y+33	; 0x21
    23b2:	ea 01       	movw	r28, r20
    23b4:	ec 80       	ldd	r14, Y+4	; 0x04
    23b6:	fd 80       	ldd	r15, Y+5	; 0x05
    23b8:	0f 2f       	mov	r16, r31
    23ba:	ad 01       	movw	r20, r26
    23bc:	f7 01       	movw	r30, r14
    23be:	09 95       	icall
    23c0:	df 91       	pop	r29
    23c2:	cf 91       	pop	r28
    23c4:	1f 91       	pop	r17
    23c6:	0f 91       	pop	r16
    23c8:	ff 90       	pop	r15
    23ca:	ef 90       	pop	r14
    23cc:	08 95       	ret

000023ce <u8g2_DrawPixel>:

void u8g2_DrawPixel(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y)
{
    23ce:	0f 93       	push	r16
    23d0:	fc 01       	movw	r30, r24
#ifdef U8G2_WITH_INTERSECTION
  if ( y < u8g2->user_y0 )
    23d2:	80 ad       	ldd	r24, Z+56	; 0x38
    23d4:	91 ad       	ldd	r25, Z+57	; 0x39
    23d6:	48 17       	cp	r20, r24
    23d8:	59 07       	cpc	r21, r25
    23da:	a8 f0       	brcs	.+42     	; 0x2406 <u8g2_DrawPixel+0x38>
    return;
  if ( y >= u8g2->user_y1 )
    23dc:	82 ad       	ldd	r24, Z+58	; 0x3a
    23de:	93 ad       	ldd	r25, Z+59	; 0x3b
    23e0:	48 17       	cp	r20, r24
    23e2:	59 07       	cpc	r21, r25
    23e4:	80 f4       	brcc	.+32     	; 0x2406 <u8g2_DrawPixel+0x38>
    return;
  if ( x < u8g2->user_x0 )
    23e6:	84 a9       	ldd	r24, Z+52	; 0x34
    23e8:	95 a9       	ldd	r25, Z+53	; 0x35
    23ea:	68 17       	cp	r22, r24
    23ec:	79 07       	cpc	r23, r25
    23ee:	58 f0       	brcs	.+22     	; 0x2406 <u8g2_DrawPixel+0x38>
    return;
  if ( x >= u8g2->user_x1 )
    23f0:	86 a9       	ldd	r24, Z+54	; 0x36
    23f2:	97 a9       	ldd	r25, Z+55	; 0x37
    23f4:	68 17       	cp	r22, r24
    23f6:	79 07       	cpc	r23, r25
    23f8:	30 f4       	brcc	.+12     	; 0x2406 <u8g2_DrawPixel+0x38>
    23fa:	cf 01       	movw	r24, r30
    return;
#endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, 1, 0);
    23fc:	00 e0       	ldi	r16, 0x00	; 0
    23fe:	21 e0       	ldi	r18, 0x01	; 1
    2400:	30 e0       	ldi	r19, 0x00	; 0
    2402:	0e 94 4f 11 	call	0x229e	; 0x229e <u8g2_DrawHVLine>
}
    2406:	0f 91       	pop	r16
    2408:	08 95       	ret

0000240a <u8g2_is_intersection_decision_tree>:
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
  if ( v0 < a1 )		// v0 <= a1
    240a:	46 17       	cp	r20, r22
    240c:	57 07       	cpc	r21, r23
    240e:	48 f4       	brcc	.+18     	; 0x2422 <u8g2_is_intersection_decision_tree+0x18>
  {
    if ( v1 > a0 )	// v1 >= a0
    2410:	82 17       	cp	r24, r18
    2412:	93 07       	cpc	r25, r19
    2414:	78 f0       	brcs	.+30     	; 0x2434 <u8g2_is_intersection_decision_tree+0x2a>
    {
      return 1;
    2416:	81 e0       	ldi	r24, 0x01	; 1
    2418:	24 17       	cp	r18, r20
    241a:	35 07       	cpc	r19, r21
    241c:	70 f0       	brcs	.+28     	; 0x243a <u8g2_is_intersection_decision_tree+0x30>
    241e:	80 e0       	ldi	r24, 0x00	; 0
    2420:	08 95       	ret
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
    2422:	82 17       	cp	r24, r18
    2424:	93 07       	cpc	r25, r19
    2426:	40 f4       	brcc	.+16     	; 0x2438 <u8g2_is_intersection_decision_tree+0x2e>
{
  if ( v0 < a1 )		// v0 <= a1
  {
    if ( v1 > a0 )	// v1 >= a0
    {
      return 1;
    2428:	81 e0       	ldi	r24, 0x01	; 1
    242a:	24 17       	cp	r18, r20
    242c:	35 07       	cpc	r19, r21
    242e:	28 f0       	brcs	.+10     	; 0x243a <u8g2_is_intersection_decision_tree+0x30>
    2430:	80 e0       	ldi	r24, 0x00	; 0
    2432:	08 95       	ret
    2434:	81 e0       	ldi	r24, 0x01	; 1
    2436:	08 95       	ret
	return 0;
      }
    }
    else
    {
      return 0;
    2438:	80 e0       	ldi	r24, 0x00	; 0
    }
  }
}
    243a:	08 95       	ret

0000243c <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
    243c:	cf 92       	push	r12
    243e:	df 92       	push	r13
    2440:	ef 92       	push	r14
    2442:	ff 92       	push	r15
    2444:	0f 93       	push	r16
    2446:	1f 93       	push	r17
    2448:	cf 93       	push	r28
    244a:	df 93       	push	r29
    244c:	ec 01       	movw	r28, r24
    244e:	7b 01       	movw	r14, r22
    2450:	69 01       	movw	r12, r18
    2452:	98 01       	movw	r18, r16
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
    2454:	6a ad       	ldd	r22, Y+58	; 0x3a
    2456:	7b ad       	ldd	r23, Y+59	; 0x3b
    2458:	88 ad       	ldd	r24, Y+56	; 0x38
    245a:	99 ad       	ldd	r25, Y+57	; 0x39
    245c:	0e 94 05 12 	call	0x240a	; 0x240a <u8g2_is_intersection_decision_tree>
    2460:	88 23       	and	r24, r24
    2462:	41 f0       	breq	.+16     	; 0x2474 <u8g2_IsIntersection+0x38>
    return 0; 
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
    2464:	6e a9       	ldd	r22, Y+54	; 0x36
    2466:	7f a9       	ldd	r23, Y+55	; 0x37
    2468:	96 01       	movw	r18, r12
    246a:	a7 01       	movw	r20, r14
    246c:	8c a9       	ldd	r24, Y+52	; 0x34
    246e:	9d a9       	ldd	r25, Y+53	; 0x35
    2470:	0e 94 05 12 	call	0x240a	; 0x240a <u8g2_is_intersection_decision_tree>
}
    2474:	df 91       	pop	r29
    2476:	cf 91       	pop	r28
    2478:	1f 91       	pop	r17
    247a:	0f 91       	pop	r16
    247c:	ff 90       	pop	r15
    247e:	ef 90       	pop	r14
    2480:	df 90       	pop	r13
    2482:	cf 90       	pop	r12
    2484:	08 95       	ret

00002486 <u8g2_DrawLine>:

#include "u8g2.h"


void u8g2_DrawLine(u8g2_t *u8g2, u8g2_uint_t x1, u8g2_uint_t y1, u8g2_uint_t x2, u8g2_uint_t y2)
{
    2486:	3f 92       	push	r3
    2488:	4f 92       	push	r4
    248a:	5f 92       	push	r5
    248c:	6f 92       	push	r6
    248e:	7f 92       	push	r7
    2490:	8f 92       	push	r8
    2492:	9f 92       	push	r9
    2494:	af 92       	push	r10
    2496:	bf 92       	push	r11
    2498:	cf 92       	push	r12
    249a:	df 92       	push	r13
    249c:	ef 92       	push	r14
    249e:	ff 92       	push	r15
    24a0:	0f 93       	push	r16
    24a2:	1f 93       	push	r17
    24a4:	cf 93       	push	r28
    24a6:	df 93       	push	r29
    24a8:	3c 01       	movw	r6, r24
    24aa:	eb 01       	movw	r28, r22
    24ac:	6a 01       	movw	r12, r20
    24ae:	59 01       	movw	r10, r18

  uint8_t swapxy = 0;
  
  /* no intersection check at the moment, should be added... */

  if ( x1 > x2 ) dx = x1-x2; else dx = x2-x1;
    24b0:	26 17       	cp	r18, r22
    24b2:	37 07       	cpc	r19, r23
    24b4:	20 f4       	brcc	.+8      	; 0x24be <u8g2_DrawLine+0x38>
    24b6:	4b 01       	movw	r8, r22
    24b8:	82 1a       	sub	r8, r18
    24ba:	93 0a       	sbc	r9, r19
    24bc:	03 c0       	rjmp	.+6      	; 0x24c4 <u8g2_DrawLine+0x3e>
    24be:	49 01       	movw	r8, r18
    24c0:	86 1a       	sub	r8, r22
    24c2:	97 0a       	sbc	r9, r23
  if ( y1 > y2 ) dy = y1-y2; else dy = y2-y1;
    24c4:	0c 15       	cp	r16, r12
    24c6:	1d 05       	cpc	r17, r13
    24c8:	38 f4       	brcc	.+14     	; 0x24d8 <u8g2_DrawLine+0x52>
    24ca:	26 01       	movw	r4, r12
    24cc:	40 1a       	sub	r4, r16
    24ce:	51 0a       	sbc	r5, r17

  if ( dy > dx ) 
    24d0:	84 14       	cp	r8, r4
    24d2:	95 04       	cpc	r9, r5
    24d4:	a8 f0       	brcs	.+42     	; 0x2500 <u8g2_DrawLine+0x7a>
    24d6:	66 c0       	rjmp	.+204    	; 0x25a4 <u8g2_DrawLine+0x11e>
  uint8_t swapxy = 0;
  
  /* no intersection check at the moment, should be added... */

  if ( x1 > x2 ) dx = x1-x2; else dx = x2-x1;
  if ( y1 > y2 ) dy = y1-y2; else dy = y2-y1;
    24d8:	28 01       	movw	r4, r16
    24da:	4c 18       	sub	r4, r12
    24dc:	5d 08       	sbc	r5, r13

  if ( dy > dx ) 
    24de:	84 14       	cp	r8, r4
    24e0:	95 04       	cpc	r9, r5
    24e2:	08 f0       	brcs	.+2      	; 0x24e6 <u8g2_DrawLine+0x60>
    24e4:	7b c0       	rjmp	.+246    	; 0x25dc <u8g2_DrawLine+0x156>
    24e6:	9a 2d       	mov	r25, r10
    24e8:	8b 2d       	mov	r24, r11
  {
    swapxy = 1;
    tmp = dx; dx =dy; dy = tmp;
    tmp = x1; x1 =y1; y1 = tmp;
    tmp = x2; x2 =y2; y2 = tmp;
    24ea:	58 01       	movw	r10, r16
    24ec:	09 2f       	mov	r16, r25
    24ee:	18 2f       	mov	r17, r24
  /* no intersection check at the moment, should be added... */

  if ( x1 > x2 ) dx = x1-x2; else dx = x2-x1;
  if ( y1 > y2 ) dy = y1-y2; else dy = y2-y1;

  if ( dy > dx ) 
    24f0:	9c 2f       	mov	r25, r28
    24f2:	8d 2f       	mov	r24, r29
  {
    swapxy = 1;
    tmp = dx; dx =dy; dy = tmp;
    tmp = x1; x1 =y1; y1 = tmp;
    24f4:	e6 01       	movw	r28, r12
    24f6:	c9 2e       	mov	r12, r25
    24f8:	d8 2e       	mov	r13, r24
  if ( x1 > x2 ) dx = x1-x2; else dx = x2-x1;
  if ( y1 > y2 ) dy = y1-y2; else dy = y2-y1;

  if ( dy > dx ) 
  {
    swapxy = 1;
    24fa:	33 24       	eor	r3, r3
    24fc:	33 94       	inc	r3
    24fe:	0c c0       	rjmp	.+24     	; 0x2518 <u8g2_DrawLine+0x92>
  /* no intersection check at the moment, should be added... */

  if ( x1 > x2 ) dx = x1-x2; else dx = x2-x1;
  if ( y1 > y2 ) dy = y1-y2; else dy = y2-y1;

  if ( dy > dx ) 
    2500:	9c 2d       	mov	r25, r12
    2502:	8d 2d       	mov	r24, r13
  {
    swapxy = 1;
    tmp = dx; dx =dy; dy = tmp;
    tmp = x1; x1 =y1; y1 = tmp;
    tmp = x2; x2 =y2; y2 = tmp;
    2504:	65 01       	movw	r12, r10

  if ( dy > dx ) 
  {
    swapxy = 1;
    tmp = dx; dx =dy; dy = tmp;
    tmp = x1; x1 =y1; y1 = tmp;
    2506:	a9 2e       	mov	r10, r25
    2508:	b8 2e       	mov	r11, r24
  /* no intersection check at the moment, should be added... */

  if ( x1 > x2 ) dx = x1-x2; else dx = x2-x1;
  if ( y1 > y2 ) dy = y1-y2; else dy = y2-y1;

  if ( dy > dx ) 
    250a:	9c 2f       	mov	r25, r28
    250c:	8d 2f       	mov	r24, r29
  {
    swapxy = 1;
    tmp = dx; dx =dy; dy = tmp;
    tmp = x1; x1 =y1; y1 = tmp;
    tmp = x2; x2 =y2; y2 = tmp;
    250e:	e8 01       	movw	r28, r16

  if ( dy > dx ) 
  {
    swapxy = 1;
    tmp = dx; dx =dy; dy = tmp;
    tmp = x1; x1 =y1; y1 = tmp;
    2510:	09 2f       	mov	r16, r25
    2512:	18 2f       	mov	r17, r24
  if ( x1 > x2 ) dx = x1-x2; else dx = x2-x1;
  if ( y1 > y2 ) dy = y1-y2; else dy = y2-y1;

  if ( dy > dx ) 
  {
    swapxy = 1;
    2514:	33 24       	eor	r3, r3
    2516:	33 94       	inc	r3
  if ( x1 > x2 ) 
  {
    tmp = x1; x1 =x2; x2 = tmp;
    tmp = y1; y1 =y2; y2 = tmp;
  }
  err = dx >> 1;
    2518:	72 01       	movw	r14, r4
    251a:	f6 94       	lsr	r15
    251c:	e7 94       	ror	r14
  if ( y2 > y1 ) ystep = 1; else ystep = -1;
    251e:	c0 16       	cp	r12, r16
    2520:	d1 06       	cpc	r13, r17
    2522:	18 f0       	brcs	.+6      	; 0x252a <u8g2_DrawLine+0xa4>
    2524:	0f ef       	ldi	r16, 0xFF	; 255
    2526:	1f ef       	ldi	r17, 0xFF	; 255
    2528:	02 c0       	rjmp	.+4      	; 0x252e <u8g2_DrawLine+0xa8>
    252a:	01 e0       	ldi	r16, 0x01	; 1
    252c:	10 e0       	ldi	r17, 0x00	; 0

#ifndef  U8G2_16BIT
  if ( x2 == 255 )
    x2--;
#else
  if ( x2 == 0xffff )
    252e:	8f ef       	ldi	r24, 0xFF	; 255
    2530:	a8 16       	cp	r10, r24
    2532:	b8 06       	cpc	r11, r24
    2534:	31 f4       	brne	.+12     	; 0x2542 <u8g2_DrawLine+0xbc>
    x2--;
    2536:	0f 2e       	mov	r0, r31
    2538:	fe ef       	ldi	r31, 0xFE	; 254
    253a:	af 2e       	mov	r10, r31
    253c:	bb 24       	eor	r11, r11
    253e:	ba 94       	dec	r11
    2540:	f0 2d       	mov	r31, r0
#endif

  for( x = x1; x <= x2; x++ )
    2542:	ac 16       	cp	r10, r28
    2544:	bd 06       	cpc	r11, r29
    2546:	08 f4       	brcc	.+2      	; 0x254a <u8g2_DrawLine+0xc4>
    2548:	53 c0       	rjmp	.+166    	; 0x25f0 <u8g2_DrawLine+0x16a>
  {
    if ( swapxy == 0 ) 
    254a:	31 10       	cpse	r3, r1
    254c:	06 c0       	rjmp	.+12     	; 0x255a <u8g2_DrawLine+0xd4>
      u8g2_DrawPixel(u8g2, x, y); 
    254e:	a6 01       	movw	r20, r12
    2550:	be 01       	movw	r22, r28
    2552:	c3 01       	movw	r24, r6
    2554:	0e 94 e7 11 	call	0x23ce	; 0x23ce <u8g2_DrawPixel>
    2558:	05 c0       	rjmp	.+10     	; 0x2564 <u8g2_DrawLine+0xde>
    else 
      u8g2_DrawPixel(u8g2, y, x); 
    255a:	ae 01       	movw	r20, r28
    255c:	b6 01       	movw	r22, r12
    255e:	c3 01       	movw	r24, r6
    2560:	0e 94 e7 11 	call	0x23ce	; 0x23ce <u8g2_DrawPixel>
    err -= (u8g2_uint_t)dy;
    2564:	c7 01       	movw	r24, r14
    2566:	88 19       	sub	r24, r8
    2568:	99 09       	sbc	r25, r9
    256a:	7c 01       	movw	r14, r24
    if ( err < 0 ) 
    256c:	22 f4       	brpl	.+8      	; 0x2576 <u8g2_DrawLine+0xf0>
    {
      y += (u8g2_uint_t)ystep;
    256e:	c0 0e       	add	r12, r16
    2570:	d1 1e       	adc	r13, r17
      err += (u8g2_uint_t)dx;
    2572:	e4 0c       	add	r14, r4
    2574:	f5 1c       	adc	r15, r5
#else
  if ( x2 == 0xffff )
    x2--;
#endif

  for( x = x1; x <= x2; x++ )
    2576:	21 96       	adiw	r28, 0x01	; 1
    2578:	ac 16       	cp	r10, r28
    257a:	bd 06       	cpc	r11, r29
    257c:	30 f7       	brcc	.-52     	; 0x254a <u8g2_DrawLine+0xc4>
    257e:	38 c0       	rjmp	.+112    	; 0x25f0 <u8g2_DrawLine+0x16a>
  if ( x1 > x2 ) 
  {
    tmp = x1; x1 =x2; x2 = tmp;
    tmp = y1; y1 =y2; y2 = tmp;
  }
  err = dx >> 1;
    2580:	74 01       	movw	r14, r8
    2582:	f6 94       	lsr	r15
    2584:	e7 94       	ror	r14
    2586:	94 2d       	mov	r25, r4
    2588:	85 2d       	mov	r24, r5
    258a:	24 01       	movw	r4, r8
  uint8_t swapxy = 0;
  
  /* no intersection check at the moment, should be added... */

  if ( x1 > x2 ) dx = x1-x2; else dx = x2-x1;
  if ( y1 > y2 ) dy = y1-y2; else dy = y2-y1;
    258c:	89 2e       	mov	r8, r25
    258e:	98 2e       	mov	r9, r24
  if ( x1 > x2 ) 
  {
    tmp = x1; x1 =x2; x2 = tmp;
    tmp = y1; y1 =y2; y2 = tmp;
  }
  err = dx >> 1;
    2590:	68 01       	movw	r12, r16
    2592:	9c 2f       	mov	r25, r28
    2594:	8d 2f       	mov	r24, r29
    2596:	e5 01       	movw	r28, r10
    2598:	a9 2e       	mov	r10, r25
    259a:	b8 2e       	mov	r11, r24
    259c:	31 2c       	mov	r3, r1
  if ( y2 > y1 ) ystep = 1; else ystep = -1;
    259e:	01 e0       	ldi	r16, 0x01	; 1
    25a0:	10 e0       	ldi	r17, 0x00	; 0
    25a2:	c5 cf       	rjmp	.-118    	; 0x252e <u8g2_DrawLine+0xa8>
    swapxy = 1;
    tmp = dx; dx =dy; dy = tmp;
    tmp = x1; x1 =y1; y1 = tmp;
    tmp = x2; x2 =y2; y2 = tmp;
  }
  if ( x1 > x2 ) 
    25a4:	ac 16       	cp	r10, r28
    25a6:	bd 06       	cpc	r11, r29
    25a8:	58 f3       	brcs	.-42     	; 0x2580 <u8g2_DrawLine+0xfa>
    25aa:	94 2d       	mov	r25, r4
    25ac:	85 2d       	mov	r24, r5
    25ae:	24 01       	movw	r4, r8
  uint8_t swapxy = 0;
  
  /* no intersection check at the moment, should be added... */

  if ( x1 > x2 ) dx = x1-x2; else dx = x2-x1;
  if ( y1 > y2 ) dy = y1-y2; else dy = y2-y1;
    25b0:	89 2e       	mov	r8, r25
    25b2:	98 2e       	mov	r9, r24
    swapxy = 1;
    tmp = dx; dx =dy; dy = tmp;
    tmp = x1; x1 =y1; y1 = tmp;
    tmp = x2; x2 =y2; y2 = tmp;
  }
  if ( x1 > x2 ) 
    25b4:	31 2c       	mov	r3, r1
    25b6:	b0 cf       	rjmp	.-160    	; 0x2518 <u8g2_DrawLine+0x92>
  {
    tmp = x1; x1 =x2; x2 = tmp;
    tmp = y1; y1 =y2; y2 = tmp;
  }
  err = dx >> 1;
    25b8:	74 01       	movw	r14, r8
    25ba:	f6 94       	lsr	r15
    25bc:	e7 94       	ror	r14
    25be:	94 2d       	mov	r25, r4
    25c0:	85 2d       	mov	r24, r5
    25c2:	24 01       	movw	r4, r8
  uint8_t swapxy = 0;
  
  /* no intersection check at the moment, should be added... */

  if ( x1 > x2 ) dx = x1-x2; else dx = x2-x1;
  if ( y1 > y2 ) dy = y1-y2; else dy = y2-y1;
    25c4:	89 2e       	mov	r8, r25
    25c6:	98 2e       	mov	r9, r24
  if ( x1 > x2 ) 
  {
    tmp = x1; x1 =x2; x2 = tmp;
    tmp = y1; y1 =y2; y2 = tmp;
  }
  err = dx >> 1;
    25c8:	68 01       	movw	r12, r16
    25ca:	9c 2f       	mov	r25, r28
    25cc:	8d 2f       	mov	r24, r29
    25ce:	e5 01       	movw	r28, r10
    25d0:	a9 2e       	mov	r10, r25
    25d2:	b8 2e       	mov	r11, r24
    25d4:	31 2c       	mov	r3, r1
  if ( y2 > y1 ) ystep = 1; else ystep = -1;
    25d6:	0f ef       	ldi	r16, 0xFF	; 255
    25d8:	1f ef       	ldi	r17, 0xFF	; 255
    25da:	a9 cf       	rjmp	.-174    	; 0x252e <u8g2_DrawLine+0xa8>
    swapxy = 1;
    tmp = dx; dx =dy; dy = tmp;
    tmp = x1; x1 =y1; y1 = tmp;
    tmp = x2; x2 =y2; y2 = tmp;
  }
  if ( x1 > x2 ) 
    25dc:	ac 16       	cp	r10, r28
    25de:	bd 06       	cpc	r11, r29
    25e0:	58 f3       	brcs	.-42     	; 0x25b8 <u8g2_DrawLine+0x132>
    25e2:	94 2d       	mov	r25, r4
    25e4:	85 2d       	mov	r24, r5
    25e6:	24 01       	movw	r4, r8
  uint8_t swapxy = 0;
  
  /* no intersection check at the moment, should be added... */

  if ( x1 > x2 ) dx = x1-x2; else dx = x2-x1;
  if ( y1 > y2 ) dy = y1-y2; else dy = y2-y1;
    25e8:	89 2e       	mov	r8, r25
    25ea:	98 2e       	mov	r9, r24
    swapxy = 1;
    tmp = dx; dx =dy; dy = tmp;
    tmp = x1; x1 =y1; y1 = tmp;
    tmp = x2; x2 =y2; y2 = tmp;
  }
  if ( x1 > x2 ) 
    25ec:	31 2c       	mov	r3, r1
    25ee:	94 cf       	rjmp	.-216    	; 0x2518 <u8g2_DrawLine+0x92>
    {
      y += (u8g2_uint_t)ystep;
      err += (u8g2_uint_t)dx;
    }
  }
}
    25f0:	df 91       	pop	r29
    25f2:	cf 91       	pop	r28
    25f4:	1f 91       	pop	r17
    25f6:	0f 91       	pop	r16
    25f8:	ff 90       	pop	r15
    25fa:	ef 90       	pop	r14
    25fc:	df 90       	pop	r13
    25fe:	cf 90       	pop	r12
    2600:	bf 90       	pop	r11
    2602:	af 90       	pop	r10
    2604:	9f 90       	pop	r9
    2606:	8f 90       	pop	r8
    2608:	7f 90       	pop	r7
    260a:	6f 90       	pop	r6
    260c:	5f 90       	pop	r5
    260e:	4f 90       	pop	r4
    2610:	3f 90       	pop	r3
    2612:	08 95       	ret

00002614 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
    2614:	cf 92       	push	r12
    2616:	df 92       	push	r13
    2618:	ff 92       	push	r15
    261a:	0f 93       	push	r16
    261c:	1f 93       	push	r17
    261e:	cf 93       	push	r28
    2620:	df 93       	push	r29
    2622:	6c 01       	movw	r12, r24
    2624:	d9 01       	movw	r26, r18
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
    2626:	34 2f       	mov	r19, r20
    2628:	37 70       	andi	r19, 0x07	; 7
  mask = 1;
  mask <<= bit_pos;
    262a:	81 e0       	ldi	r24, 0x01	; 1
    262c:	90 e0       	ldi	r25, 0x00	; 0
    262e:	03 2e       	mov	r0, r19
    2630:	02 c0       	rjmp	.+4      	; 0x2636 <u8g2_ll_hvline_vertical_top_lsb+0x22>
    2632:	88 0f       	add	r24, r24
    2634:	99 1f       	adc	r25, r25
    2636:	0a 94       	dec	r0
    2638:	e2 f7       	brpl	.-8      	; 0x2632 <u8g2_ll_hvline_vertical_top_lsb+0x1e>
    263a:	18 2f       	mov	r17, r24

  or_mask = 0;
  xor_mask = 0;
  if ( u8g2->draw_color <= 1 )
    263c:	f6 01       	movw	r30, r12
    263e:	ec 58       	subi	r30, 0x8C	; 140
    2640:	ff 4f       	sbci	r31, 0xFF	; 255
    2642:	20 81       	ld	r18, Z
    2644:	22 30       	cpi	r18, 0x02	; 2
    2646:	20 f4       	brcc	.+8      	; 0x2650 <u8g2_ll_hvline_vertical_top_lsb+0x3c>
    or_mask  = mask;
  if ( u8g2->draw_color != 1 )
    2648:	21 30       	cpi	r18, 0x01	; 1
    264a:	21 f0       	breq	.+8      	; 0x2654 <u8g2_ll_hvline_vertical_top_lsb+0x40>
  mask <<= bit_pos;

  or_mask = 0;
  xor_mask = 0;
  if ( u8g2->draw_color <= 1 )
    or_mask  = mask;
    264c:	28 2f       	mov	r18, r24
    264e:	04 c0       	rjmp	.+8      	; 0x2658 <u8g2_ll_hvline_vertical_top_lsb+0x44>
  bit_pos = y;		/* overflow truncate is ok here... */
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
  mask = 1;
  mask <<= bit_pos;

  or_mask = 0;
    2650:	20 e0       	ldi	r18, 0x00	; 0
    2652:	02 c0       	rjmp	.+4      	; 0x2658 <u8g2_ll_hvline_vertical_top_lsb+0x44>
  xor_mask = 0;
  if ( u8g2->draw_color <= 1 )
    or_mask  = mask;
    2654:	28 2f       	mov	r18, r24
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
  mask = 1;
  mask <<= bit_pos;

  or_mask = 0;
  xor_mask = 0;
    2656:	10 e0       	ldi	r17, 0x00	; 0
  if ( u8g2->draw_color != 1 )
    xor_mask = mask;


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
  offset &= ~7;
    2658:	48 7f       	andi	r20, 0xF8	; 248
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
  ptr = u8g2->tile_buf_ptr;
    265a:	e6 01       	movw	r28, r12
    265c:	8a a1       	ldd	r24, Y+34	; 0x22
    265e:	9b a1       	ldd	r25, Y+35	; 0x23
    xor_mask = mask;


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
  offset &= ~7;
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
    2660:	e8 81       	ld	r30, Y
    2662:	f9 81       	ldd	r31, Y+1	; 0x01
  ptr = u8g2->tile_buf_ptr;
  ptr += offset;
  ptr += x;
    2664:	f0 88       	ldd	r15, Z+16	; 0x10
    2666:	f4 9e       	mul	r15, r20
    2668:	f0 01       	movw	r30, r0
    266a:	f5 9e       	mul	r15, r21
    266c:	f0 0d       	add	r31, r0
    266e:	11 24       	eor	r1, r1
    2670:	6e 0f       	add	r22, r30
    2672:	7f 1f       	adc	r23, r31
    2674:	fc 01       	movw	r30, r24
    2676:	e6 0f       	add	r30, r22
    2678:	f7 1f       	adc	r31, r23
  
  if ( dir == 0 )
    267a:	01 11       	cpse	r16, r1
    267c:	0a c0       	rjmp	.+20     	; 0x2692 <u8g2_ll_hvline_vertical_top_lsb+0x7e>
    267e:	ae 0f       	add	r26, r30
    2680:	bf 1f       	adc	r27, r31
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
	*ptr ^= xor_mask;
    2682:	80 81       	ld	r24, Z
    2684:	82 2b       	or	r24, r18
    2686:	81 27       	eor	r24, r17
    2688:	81 93       	st	Z+, r24
	ptr++;
	len--;
      } while( len != 0 );
    268a:	ea 17       	cp	r30, r26
    268c:	fb 07       	cpc	r31, r27
    268e:	c9 f7       	brne	.-14     	; 0x2682 <u8g2_ll_hvline_vertical_top_lsb+0x6e>
    2690:	22 c0       	rjmp	.+68     	; 0x26d6 <u8g2_ll_hvline_vertical_top_lsb+0xc2>

      if ( bit_pos == 0 )
      {
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
		
	if ( u8g2->draw_color <= 1 )
    2692:	a6 01       	movw	r20, r12
    2694:	4c 58       	subi	r20, 0x8C	; 140
    2696:	5f 4f       	sbci	r21, 0xFF	; 255
    {
#ifdef __unix
      assert(ptr < max_ptr);
#endif
      *ptr |= or_mask;
      *ptr ^= xor_mask;
    2698:	90 81       	ld	r25, Z
    269a:	92 2b       	or	r25, r18
    269c:	91 27       	eor	r25, r17
    269e:	90 83       	st	Z, r25
      
      bit_pos++;
    26a0:	3f 5f       	subi	r19, 0xFF	; 255
      bit_pos &= 7;
    26a2:	37 70       	andi	r19, 0x07	; 7

      len--;
    26a4:	11 97       	sbiw	r26, 0x01	; 1

      if ( bit_pos == 0 )
    26a6:	31 11       	cpse	r19, r1
    26a8:	0e c0       	rjmp	.+28     	; 0x26c6 <u8g2_ll_hvline_vertical_top_lsb+0xb2>
      {
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
    26aa:	e6 01       	movw	r28, r12
    26ac:	8e a1       	ldd	r24, Y+38	; 0x26
    26ae:	9f a1       	ldd	r25, Y+39	; 0x27
    26b0:	e8 0f       	add	r30, r24
    26b2:	f9 1f       	adc	r31, r25
		
	if ( u8g2->draw_color <= 1 )
    26b4:	ea 01       	movw	r28, r20
    26b6:	98 81       	ld	r25, Y
    26b8:	92 30       	cpi	r25, 0x02	; 2
    26ba:	40 f4       	brcc	.+16     	; 0x26cc <u8g2_ll_hvline_vertical_top_lsb+0xb8>
	  or_mask  = 1;
	if ( u8g2->draw_color != 1 )
    26bc:	91 30       	cpi	r25, 0x01	; 1
    26be:	41 f0       	breq	.+16     	; 0x26d0 <u8g2_ll_hvline_vertical_top_lsb+0xbc>
	  xor_mask = 1;
    26c0:	11 e0       	ldi	r17, 0x01	; 1
      if ( bit_pos == 0 )
      {
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
		
	if ( u8g2->draw_color <= 1 )
	  or_mask  = 1;
    26c2:	21 e0       	ldi	r18, 0x01	; 1
    26c4:	06 c0       	rjmp	.+12     	; 0x26d2 <u8g2_ll_hvline_vertical_top_lsb+0xbe>
	if ( u8g2->draw_color != 1 )
	  xor_mask = 1;
      }
      else
      {
	or_mask <<= 1;
    26c6:	22 0f       	add	r18, r18
	xor_mask <<= 1;
    26c8:	11 0f       	add	r17, r17
    26ca:	03 c0       	rjmp	.+6      	; 0x26d2 <u8g2_ll_hvline_vertical_top_lsb+0xbe>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
		
	if ( u8g2->draw_color <= 1 )
	  or_mask  = 1;
	if ( u8g2->draw_color != 1 )
	  xor_mask = 1;
    26cc:	11 e0       	ldi	r17, 0x01	; 1
    26ce:	01 c0       	rjmp	.+2      	; 0x26d2 <u8g2_ll_hvline_vertical_top_lsb+0xbe>
      if ( bit_pos == 0 )
      {
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
		
	if ( u8g2->draw_color <= 1 )
	  or_mask  = 1;
    26d0:	21 e0       	ldi	r18, 0x01	; 1
      else
      {
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
    26d2:	10 97       	sbiw	r26, 0x00	; 0
    26d4:	09 f7       	brne	.-62     	; 0x2698 <u8g2_ll_hvline_vertical_top_lsb+0x84>
  }
}
    26d6:	df 91       	pop	r29
    26d8:	cf 91       	pop	r28
    26da:	1f 91       	pop	r17
    26dc:	0f 91       	pop	r16
    26de:	ff 90       	pop	r15
    26e0:	df 90       	pop	r13
    26e2:	cf 90       	pop	r12
    26e4:	08 95       	ret

000026e6 <u8g2_update_dimension_common>:
  u8g2->clip_x0 = clip_x0;
  u8g2->clip_y0 = clip_y0;
  u8g2->clip_x1 = clip_x1;
  u8g2->clip_y1 = clip_y1;
  u8g2->cb->update_page_win(u8g2);
}
    26e6:	cf 93       	push	r28
    26e8:	df 93       	push	r29
    26ea:	fc 01       	movw	r30, r24
    26ec:	a0 81       	ld	r26, Z
    26ee:	b1 81       	ldd	r27, Z+1	; 0x01
    26f0:	84 a1       	ldd	r24, Z+36	; 0x24
    26f2:	90 e0       	ldi	r25, 0x00	; 0
    26f4:	9c 01       	movw	r18, r24
    26f6:	22 0f       	add	r18, r18
    26f8:	33 1f       	adc	r19, r19
    26fa:	22 0f       	add	r18, r18
    26fc:	33 1f       	adc	r19, r19
    26fe:	22 0f       	add	r18, r18
    2700:	33 1f       	adc	r19, r19
    2702:	31 a7       	std	Z+41, r19	; 0x29
    2704:	20 a7       	std	Z+40, r18	; 0x28
    2706:	50 96       	adiw	r26, 0x10	; 16
    2708:	2c 91       	ld	r18, X
    270a:	50 97       	sbiw	r26, 0x10	; 16
    270c:	30 e0       	ldi	r19, 0x00	; 0
    270e:	22 0f       	add	r18, r18
    2710:	33 1f       	adc	r19, r19
    2712:	22 0f       	add	r18, r18
    2714:	33 1f       	adc	r19, r19
    2716:	22 0f       	add	r18, r18
    2718:	33 1f       	adc	r19, r19
    271a:	37 a3       	std	Z+39, r19	; 0x27
    271c:	26 a3       	std	Z+38, r18	; 0x26
    271e:	75 a1       	ldd	r23, Z+37	; 0x25
    2720:	47 2f       	mov	r20, r23
    2722:	50 e0       	ldi	r21, 0x00	; 0
    2724:	9a 01       	movw	r18, r20
    2726:	22 0f       	add	r18, r18
    2728:	33 1f       	adc	r19, r19
    272a:	22 0f       	add	r18, r18
    272c:	33 1f       	adc	r19, r19
    272e:	22 0f       	add	r18, r18
    2730:	33 1f       	adc	r19, r19
    2732:	33 a7       	std	Z+43, r19	; 0x2b
    2734:	22 a7       	std	Z+42, r18	; 0x2a
    2736:	51 96       	adiw	r26, 0x11	; 17
    2738:	6c 91       	ld	r22, X
    273a:	51 97       	sbiw	r26, 0x11	; 17
    273c:	48 0f       	add	r20, r24
    273e:	59 1f       	adc	r21, r25
    2740:	c6 2f       	mov	r28, r22
    2742:	d0 e0       	ldi	r29, 0x00	; 0
    2744:	c4 17       	cp	r28, r20
    2746:	d5 07       	cpc	r29, r21
    2748:	18 f4       	brcc	.+6      	; 0x2750 <u8g2_update_dimension_common+0x6a>
    274a:	ce 01       	movw	r24, r28
    274c:	87 1b       	sub	r24, r23
    274e:	91 09       	sbc	r25, r1
    2750:	35 a7       	std	Z+45, r19	; 0x2d
    2752:	24 a7       	std	Z+44, r18	; 0x2c
    2754:	88 0f       	add	r24, r24
    2756:	99 1f       	adc	r25, r25
    2758:	88 0f       	add	r24, r24
    275a:	99 1f       	adc	r25, r25
    275c:	88 0f       	add	r24, r24
    275e:	99 1f       	adc	r25, r25
    2760:	82 0f       	add	r24, r18
    2762:	93 1f       	adc	r25, r19
    2764:	97 a7       	std	Z+47, r25	; 0x2f
    2766:	86 a7       	std	Z+46, r24	; 0x2e
    2768:	54 96       	adiw	r26, 0x14	; 20
    276a:	8d 91       	ld	r24, X+
    276c:	9c 91       	ld	r25, X
    276e:	55 97       	sbiw	r26, 0x15	; 21
    2770:	91 ab       	std	Z+49, r25	; 0x31
    2772:	80 ab       	std	Z+48, r24	; 0x30
    2774:	56 96       	adiw	r26, 0x16	; 22
    2776:	8d 91       	ld	r24, X+
    2778:	9c 91       	ld	r25, X
    277a:	57 97       	sbiw	r26, 0x17	; 23
    277c:	93 ab       	std	Z+51, r25	; 0x33
    277e:	82 ab       	std	Z+50, r24	; 0x32
    2780:	df 91       	pop	r29
    2782:	cf 91       	pop	r28
    2784:	08 95       	ret

00002786 <u8g2_update_dimension_r0>:
    2786:	0e 94 73 13 	call	0x26e6	; 0x26e6 <u8g2_update_dimension_common>
    278a:	08 95       	ret

0000278c <u8g2_apply_clip_window>:
    278c:	0f 93       	push	r16
    278e:	1f 93       	push	r17
    2790:	cf 93       	push	r28
    2792:	df 93       	push	r29
    2794:	ec 01       	movw	r28, r24
    2796:	fc 01       	movw	r30, r24
    2798:	ee 5b       	subi	r30, 0xBE	; 190
    279a:	ff 4f       	sbci	r31, 0xFF	; 255
    279c:	00 81       	ld	r16, Z
    279e:	11 81       	ldd	r17, Z+1	; 0x01
    27a0:	2e ad       	ldd	r18, Y+62	; 0x3e
    27a2:	3f ad       	ldd	r19, Y+63	; 0x3f
    27a4:	32 97       	sbiw	r30, 0x02	; 2
    27a6:	40 81       	ld	r20, Z
    27a8:	51 81       	ldd	r21, Z+1	; 0x01
    27aa:	6c ad       	ldd	r22, Y+60	; 0x3c
    27ac:	7d ad       	ldd	r23, Y+61	; 0x3d
    27ae:	0e 94 1e 12 	call	0x243c	; 0x243c <u8g2_IsIntersection>
    27b2:	81 11       	cpse	r24, r1
    27b4:	04 c0       	rjmp	.+8      	; 0x27be <u8g2_apply_clip_window+0x32>
    27b6:	c2 59       	subi	r28, 0x92	; 146
    27b8:	df 4f       	sbci	r29, 0xFF	; 255
    27ba:	18 82       	st	Y, r1
    27bc:	2f c0       	rjmp	.+94     	; 0x281c <u8g2_apply_clip_window+0x90>
    27be:	81 e0       	ldi	r24, 0x01	; 1
    27c0:	fe 01       	movw	r30, r28
    27c2:	e2 59       	subi	r30, 0x92	; 146
    27c4:	ff 4f       	sbci	r31, 0xFF	; 255
    27c6:	80 83       	st	Z, r24
    27c8:	8c ad       	ldd	r24, Y+60	; 0x3c
    27ca:	9d ad       	ldd	r25, Y+61	; 0x3d
    27cc:	2c a9       	ldd	r18, Y+52	; 0x34
    27ce:	3d a9       	ldd	r19, Y+53	; 0x35
    27d0:	28 17       	cp	r18, r24
    27d2:	39 07       	cpc	r19, r25
    27d4:	10 f4       	brcc	.+4      	; 0x27da <u8g2_apply_clip_window+0x4e>
    27d6:	9d ab       	std	Y+53, r25	; 0x35
    27d8:	8c ab       	std	Y+52, r24	; 0x34
    27da:	8e ad       	ldd	r24, Y+62	; 0x3e
    27dc:	9f ad       	ldd	r25, Y+63	; 0x3f
    27de:	2e a9       	ldd	r18, Y+54	; 0x36
    27e0:	3f a9       	ldd	r19, Y+55	; 0x37
    27e2:	82 17       	cp	r24, r18
    27e4:	93 07       	cpc	r25, r19
    27e6:	10 f4       	brcc	.+4      	; 0x27ec <u8g2_apply_clip_window+0x60>
    27e8:	9f ab       	std	Y+55, r25	; 0x37
    27ea:	8e ab       	std	Y+54, r24	; 0x36
    27ec:	fe 01       	movw	r30, r28
    27ee:	e0 5c       	subi	r30, 0xC0	; 192
    27f0:	ff 4f       	sbci	r31, 0xFF	; 255
    27f2:	80 81       	ld	r24, Z
    27f4:	91 81       	ldd	r25, Z+1	; 0x01
    27f6:	28 ad       	ldd	r18, Y+56	; 0x38
    27f8:	39 ad       	ldd	r19, Y+57	; 0x39
    27fa:	28 17       	cp	r18, r24
    27fc:	39 07       	cpc	r19, r25
    27fe:	10 f4       	brcc	.+4      	; 0x2804 <u8g2_apply_clip_window+0x78>
    2800:	99 af       	std	Y+57, r25	; 0x39
    2802:	88 af       	std	Y+56, r24	; 0x38
    2804:	fe 01       	movw	r30, r28
    2806:	ee 5b       	subi	r30, 0xBE	; 190
    2808:	ff 4f       	sbci	r31, 0xFF	; 255
    280a:	80 81       	ld	r24, Z
    280c:	91 81       	ldd	r25, Z+1	; 0x01
    280e:	2a ad       	ldd	r18, Y+58	; 0x3a
    2810:	3b ad       	ldd	r19, Y+59	; 0x3b
    2812:	82 17       	cp	r24, r18
    2814:	93 07       	cpc	r25, r19
    2816:	10 f4       	brcc	.+4      	; 0x281c <u8g2_apply_clip_window+0x90>
    2818:	9b af       	std	Y+59, r25	; 0x3b
    281a:	8a af       	std	Y+58, r24	; 0x3a
    281c:	df 91       	pop	r29
    281e:	cf 91       	pop	r28
    2820:	1f 91       	pop	r17
    2822:	0f 91       	pop	r16
    2824:	08 95       	ret

00002826 <u8g2_update_page_win_r0>:
    2826:	fc 01       	movw	r30, r24
    2828:	15 aa       	std	Z+53, r1	; 0x35
    282a:	14 aa       	std	Z+52, r1	; 0x34
    282c:	80 a9       	ldd	r24, Z+48	; 0x30
    282e:	91 a9       	ldd	r25, Z+49	; 0x31
    2830:	97 ab       	std	Z+55, r25	; 0x37
    2832:	86 ab       	std	Z+54, r24	; 0x36
    2834:	84 a5       	ldd	r24, Z+44	; 0x2c
    2836:	95 a5       	ldd	r25, Z+45	; 0x2d
    2838:	91 af       	std	Z+57, r25	; 0x39
    283a:	80 af       	std	Z+56, r24	; 0x38
    283c:	86 a5       	ldd	r24, Z+46	; 0x2e
    283e:	97 a5       	ldd	r25, Z+47	; 0x2f
    2840:	93 af       	std	Z+59, r25	; 0x3b
    2842:	82 af       	std	Z+58, r24	; 0x3a
    2844:	cf 01       	movw	r24, r30
    2846:	0e 94 c6 13 	call	0x278c	; 0x278c <u8g2_apply_clip_window>
    284a:	08 95       	ret

0000284c <u8g2_draw_l90_r0>:
    284c:	0f 93       	push	r16
    284e:	0e 94 40 11 	call	0x2280	; 0x2280 <u8g2_draw_hv_line_2dir>
    2852:	0f 91       	pop	r16
    2854:	08 95       	ret

00002856 <u8g2_SetMaxClipWindow>:
    2856:	dc 01       	movw	r26, r24
    2858:	dd 96       	adiw	r26, 0x3d	; 61
    285a:	1c 92       	st	X, r1
    285c:	1e 92       	st	-X, r1
    285e:	dc 97       	sbiw	r26, 0x3c	; 60
    2860:	fc 01       	movw	r30, r24
    2862:	e0 5c       	subi	r30, 0xC0	; 192
    2864:	ff 4f       	sbci	r31, 0xFF	; 255
    2866:	11 82       	std	Z+1, r1	; 0x01
    2868:	10 82       	st	Z, r1
    286a:	2f ef       	ldi	r18, 0xFF	; 255
    286c:	3f ef       	ldi	r19, 0xFF	; 255
    286e:	fc 01       	movw	r30, r24
    2870:	37 af       	std	Z+63, r19	; 0x3f
    2872:	26 af       	std	Z+62, r18	; 0x3e
    2874:	ee 5b       	subi	r30, 0xBE	; 190
    2876:	ff 4f       	sbci	r31, 0xFF	; 255
    2878:	31 83       	std	Z+1, r19	; 0x01
    287a:	20 83       	st	Z, r18
    287c:	90 96       	adiw	r26, 0x20	; 32
    287e:	ed 91       	ld	r30, X+
    2880:	fc 91       	ld	r31, X
    2882:	91 97       	sbiw	r26, 0x21	; 33
    2884:	02 80       	ldd	r0, Z+2	; 0x02
    2886:	f3 81       	ldd	r31, Z+3	; 0x03
    2888:	e0 2d       	mov	r30, r0
    288a:	09 95       	icall
    288c:	08 95       	ret

0000288e <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
    288e:	0f 93       	push	r16
    2890:	1f 93       	push	r17
    2892:	cf 93       	push	r28
    2894:	df 93       	push	r29
    2896:	ec 01       	movw	r28, r24
  u8g2->font = NULL;
    2898:	fc 01       	movw	r30, r24
    289a:	ec 5b       	subi	r30, 0xBC	; 188
    289c:	ff 4f       	sbci	r31, 0xFF	; 255
    289e:	11 82       	std	Z+1, r1	; 0x01
    28a0:	10 82       	st	Z, r1
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
    28a2:	3f 8f       	std	Y+31, r19	; 0x1f
    28a4:	2e 8f       	std	Y+30, r18	; 0x1e
  
  u8g2->tile_buf_ptr = buf;
    28a6:	7b a3       	std	Y+35, r23	; 0x23
    28a8:	6a a3       	std	Y+34, r22	; 0x22
  u8g2->tile_buf_height = tile_buf_height;
    28aa:	4c a3       	std	Y+36, r20	; 0x24
  
  u8g2->tile_curr_row = 0;
    28ac:	1d a2       	std	Y+37, r1	; 0x25
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
    28ae:	3f 96       	adiw	r30, 0x0f	; 15
    28b0:	10 82       	st	Z, r1
  u8g2->bitmap_transparency = 0;
    28b2:	b0 96       	adiw	r30, 0x20	; 32
    28b4:	10 82       	st	Z, r1
  
  u8g2->font_height_mode = 0; /* issue 2046 */
    28b6:	34 97       	sbiw	r30, 0x04	; 4
    28b8:	10 82       	st	Z, r1
  u8g2->draw_color = 1;
    28ba:	35 96       	adiw	r30, 0x05	; 5
    28bc:	81 e0       	ldi	r24, 0x01	; 1
    28be:	80 83       	st	Z, r24
  u8g2->is_auto_page_clear = 1;
    28c0:	31 96       	adiw	r30, 0x01	; 1
    28c2:	80 83       	st	Z, r24
  
  u8g2->cb = u8g2_cb;
    28c4:	19 a3       	std	Y+33, r17	; 0x21
    28c6:	08 a3       	std	Y+32, r16	; 0x20
  u8g2->cb->update_dimension(u8g2);
    28c8:	d8 01       	movw	r26, r16
    28ca:	ed 91       	ld	r30, X+
    28cc:	fc 91       	ld	r31, X
    28ce:	ce 01       	movw	r24, r28
    28d0:	09 95       	icall
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
    28d2:	ce 01       	movw	r24, r28
    28d4:	0e 94 2b 14 	call	0x2856	; 0x2856 <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
    28d8:	ce 01       	movw	r24, r28
    28da:	0e 94 19 11 	call	0x2232	; 0x2232 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
    28de:	ca 5a       	subi	r28, 0xAA	; 170
    28e0:	df 4f       	sbci	r29, 0xFF	; 255
    28e2:	18 82       	st	Y, r1
#endif
}
    28e4:	df 91       	pop	r29
    28e6:	cf 91       	pop	r28
    28e8:	1f 91       	pop	r17
    28ea:	0f 91       	pop	r16
    28ec:	08 95       	ret

000028ee <u8x8_ascii_next>:
      x+=th;
      cnt++;
    }
  }
  return cnt;
}
    28ee:	66 23       	and	r22, r22
    28f0:	29 f0       	breq	.+10     	; 0x28fc <u8x8_ascii_next+0xe>
    28f2:	6a 30       	cpi	r22, 0x0A	; 10
    28f4:	31 f0       	breq	.+12     	; 0x2902 <u8x8_ascii_next+0x14>
    28f6:	86 2f       	mov	r24, r22
    28f8:	90 e0       	ldi	r25, 0x00	; 0
    28fa:	08 95       	ret
    28fc:	8f ef       	ldi	r24, 0xFF	; 255
    28fe:	9f ef       	ldi	r25, 0xFF	; 255
    2900:	08 95       	ret
    2902:	8f ef       	ldi	r24, 0xFF	; 255
    2904:	9f ef       	ldi	r25, 0xFF	; 255
    2906:	08 95       	ret

00002908 <u8x8_utf8_init>:
*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
    2908:	fc 01       	movw	r30, r24
    290a:	10 8e       	std	Z+24, r1	; 0x18
    290c:	08 95       	ret

0000290e <u8x8_byte_SendBytes>:
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
}

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
    290e:	9a 01       	movw	r18, r20
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
    2910:	dc 01       	movw	r26, r24
    2912:	18 96       	adiw	r26, 0x08	; 8
    2914:	ed 91       	ld	r30, X+
    2916:	fc 91       	ld	r31, X
    2918:	19 97       	sbiw	r26, 0x09	; 9
    291a:	46 2f       	mov	r20, r22
    291c:	67 e1       	ldi	r22, 0x17	; 23
    291e:	09 95       	icall
}
    2920:	08 95       	ret

00002922 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
    2922:	cf 93       	push	r28
    2924:	df 93       	push	r29
    2926:	1f 92       	push	r1
    2928:	cd b7       	in	r28, 0x3d	; 61
    292a:	de b7       	in	r29, 0x3e	; 62
    292c:	69 83       	std	Y+1, r22	; 0x01
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
    292e:	ae 01       	movw	r20, r28
    2930:	4f 5f       	subi	r20, 0xFF	; 255
    2932:	5f 4f       	sbci	r21, 0xFF	; 255
    2934:	61 e0       	ldi	r22, 0x01	; 1
    2936:	0e 94 87 14 	call	0x290e	; 0x290e <u8x8_byte_SendBytes>
}
    293a:	0f 90       	pop	r0
    293c:	df 91       	pop	r29
    293e:	cf 91       	pop	r28
    2940:	08 95       	ret

00002942 <u8x8_byte_StartTransfer>:

uint8_t u8x8_byte_StartTransfer(u8x8_t *u8x8)
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_START_TRANSFER, 0, NULL);
    2942:	dc 01       	movw	r26, r24
    2944:	18 96       	adiw	r26, 0x08	; 8
    2946:	ed 91       	ld	r30, X+
    2948:	fc 91       	ld	r31, X
    294a:	19 97       	sbiw	r26, 0x09	; 9
    294c:	20 e0       	ldi	r18, 0x00	; 0
    294e:	30 e0       	ldi	r19, 0x00	; 0
    2950:	40 e0       	ldi	r20, 0x00	; 0
    2952:	68 e1       	ldi	r22, 0x18	; 24
    2954:	09 95       	icall
}
    2956:	08 95       	ret

00002958 <u8x8_byte_EndTransfer>:

uint8_t u8x8_byte_EndTransfer(u8x8_t *u8x8)
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_END_TRANSFER, 0, NULL);
    2958:	dc 01       	movw	r26, r24
    295a:	18 96       	adiw	r26, 0x08	; 8
    295c:	ed 91       	ld	r30, X+
    295e:	fc 91       	ld	r31, X
    2960:	19 97       	sbiw	r26, 0x09	; 9
    2962:	20 e0       	ldi	r18, 0x00	; 0
    2964:	30 e0       	ldi	r19, 0x00	; 0
    2966:	40 e0       	ldi	r20, 0x00	; 0
    2968:	69 e1       	ldi	r22, 0x19	; 25
    296a:	09 95       	icall
}
    296c:	08 95       	ret

0000296e <u8x8_i2c_data_transfer>:
      break;
    default:
      return 0;
  }
  return 1;
}
    296e:	ef 92       	push	r14
    2970:	ff 92       	push	r15
    2972:	1f 93       	push	r17
    2974:	cf 93       	push	r28
    2976:	df 93       	push	r29
    2978:	ec 01       	movw	r28, r24
    297a:	16 2f       	mov	r17, r22
    297c:	7a 01       	movw	r14, r20
    297e:	0e 94 a1 14 	call	0x2942	; 0x2942 <u8x8_byte_StartTransfer>
    2982:	60 e4       	ldi	r22, 0x40	; 64
    2984:	ce 01       	movw	r24, r28
    2986:	0e 94 91 14 	call	0x2922	; 0x2922 <u8x8_byte_SendByte>
    298a:	e8 85       	ldd	r30, Y+8	; 0x08
    298c:	f9 85       	ldd	r31, Y+9	; 0x09
    298e:	97 01       	movw	r18, r14
    2990:	41 2f       	mov	r20, r17
    2992:	67 e1       	ldi	r22, 0x17	; 23
    2994:	ce 01       	movw	r24, r28
    2996:	09 95       	icall
    2998:	ce 01       	movw	r24, r28
    299a:	0e 94 ac 14 	call	0x2958	; 0x2958 <u8x8_byte_EndTransfer>
    299e:	df 91       	pop	r29
    29a0:	cf 91       	pop	r28
    29a2:	1f 91       	pop	r17
    29a4:	ff 90       	pop	r15
    29a6:	ef 90       	pop	r14
    29a8:	08 95       	ret

000029aa <u8x8_cad_SendCmd>:
    29aa:	46 2f       	mov	r20, r22
    29ac:	dc 01       	movw	r26, r24
    29ae:	16 96       	adiw	r26, 0x06	; 6
    29b0:	ed 91       	ld	r30, X+
    29b2:	fc 91       	ld	r31, X
    29b4:	17 97       	sbiw	r26, 0x07	; 7
    29b6:	20 e0       	ldi	r18, 0x00	; 0
    29b8:	30 e0       	ldi	r19, 0x00	; 0
    29ba:	65 e1       	ldi	r22, 0x15	; 21
    29bc:	09 95       	icall
    29be:	08 95       	ret

000029c0 <u8x8_cad_SendArg>:
    29c0:	46 2f       	mov	r20, r22
    29c2:	dc 01       	movw	r26, r24
    29c4:	16 96       	adiw	r26, 0x06	; 6
    29c6:	ed 91       	ld	r30, X+
    29c8:	fc 91       	ld	r31, X
    29ca:	17 97       	sbiw	r26, 0x07	; 7
    29cc:	20 e0       	ldi	r18, 0x00	; 0
    29ce:	30 e0       	ldi	r19, 0x00	; 0
    29d0:	66 e1       	ldi	r22, 0x16	; 22
    29d2:	09 95       	icall
    29d4:	08 95       	ret

000029d6 <u8x8_cad_SendData>:
    29d6:	9a 01       	movw	r18, r20
    29d8:	dc 01       	movw	r26, r24
    29da:	16 96       	adiw	r26, 0x06	; 6
    29dc:	ed 91       	ld	r30, X+
    29de:	fc 91       	ld	r31, X
    29e0:	17 97       	sbiw	r26, 0x07	; 7
    29e2:	46 2f       	mov	r20, r22
    29e4:	67 e1       	ldi	r22, 0x17	; 23
    29e6:	09 95       	icall
    29e8:	08 95       	ret

000029ea <u8x8_cad_StartTransfer>:
    29ea:	dc 01       	movw	r26, r24
    29ec:	16 96       	adiw	r26, 0x06	; 6
    29ee:	ed 91       	ld	r30, X+
    29f0:	fc 91       	ld	r31, X
    29f2:	17 97       	sbiw	r26, 0x07	; 7
    29f4:	20 e0       	ldi	r18, 0x00	; 0
    29f6:	30 e0       	ldi	r19, 0x00	; 0
    29f8:	40 e0       	ldi	r20, 0x00	; 0
    29fa:	68 e1       	ldi	r22, 0x18	; 24
    29fc:	09 95       	icall
    29fe:	08 95       	ret

00002a00 <u8x8_cad_EndTransfer>:
    2a00:	dc 01       	movw	r26, r24
    2a02:	16 96       	adiw	r26, 0x06	; 6
    2a04:	ed 91       	ld	r30, X+
    2a06:	fc 91       	ld	r31, X
    2a08:	17 97       	sbiw	r26, 0x07	; 7
    2a0a:	20 e0       	ldi	r18, 0x00	; 0
    2a0c:	30 e0       	ldi	r19, 0x00	; 0
    2a0e:	40 e0       	ldi	r20, 0x00	; 0
    2a10:	69 e1       	ldi	r22, 0x19	; 25
    2a12:	09 95       	icall
    2a14:	08 95       	ret

00002a16 <u8x8_cad_SendSequence>:
    2a16:	ef 92       	push	r14
    2a18:	ff 92       	push	r15
    2a1a:	0f 93       	push	r16
    2a1c:	1f 93       	push	r17
    2a1e:	cf 93       	push	r28
    2a20:	df 93       	push	r29
    2a22:	1f 92       	push	r1
    2a24:	cd b7       	in	r28, 0x3d	; 61
    2a26:	de b7       	in	r29, 0x3e	; 62
    2a28:	7c 01       	movw	r14, r24
    2a2a:	8b 01       	movw	r16, r22
    2a2c:	d8 01       	movw	r26, r16
    2a2e:	6c 91       	ld	r22, X
    2a30:	67 31       	cpi	r22, 0x17	; 23
    2a32:	c1 f0       	breq	.+48     	; 0x2a64 <u8x8_cad_SendSequence+0x4e>
    2a34:	18 f4       	brcc	.+6      	; 0x2a3c <u8x8_cad_SendSequence+0x26>
    2a36:	65 31       	cpi	r22, 0x15	; 21
    2a38:	30 f4       	brcc	.+12     	; 0x2a46 <u8x8_cad_SendSequence+0x30>
    2a3a:	38 c0       	rjmp	.+112    	; 0x2aac <u8x8_cad_SendSequence+0x96>
    2a3c:	6a 31       	cpi	r22, 0x1A	; 26
    2a3e:	f8 f0       	brcs	.+62     	; 0x2a7e <u8x8_cad_SendSequence+0x68>
    2a40:	6e 3f       	cpi	r22, 0xFE	; 254
    2a42:	51 f1       	breq	.+84     	; 0x2a98 <u8x8_cad_SendSequence+0x82>
    2a44:	33 c0       	rjmp	.+102    	; 0x2aac <u8x8_cad_SendSequence+0x96>
    2a46:	f8 01       	movw	r30, r16
    2a48:	41 81       	ldd	r20, Z+1	; 0x01
    2a4a:	49 83       	std	Y+1, r20	; 0x01
    2a4c:	d7 01       	movw	r26, r14
    2a4e:	16 96       	adiw	r26, 0x06	; 6
    2a50:	ed 91       	ld	r30, X+
    2a52:	fc 91       	ld	r31, X
    2a54:	17 97       	sbiw	r26, 0x07	; 7
    2a56:	20 e0       	ldi	r18, 0x00	; 0
    2a58:	30 e0       	ldi	r19, 0x00	; 0
    2a5a:	c7 01       	movw	r24, r14
    2a5c:	09 95       	icall
    2a5e:	0e 5f       	subi	r16, 0xFE	; 254
    2a60:	1f 4f       	sbci	r17, 0xFF	; 255
    2a62:	e4 cf       	rjmp	.-56     	; 0x2a2c <u8x8_cad_SendSequence+0x16>
    2a64:	f8 01       	movw	r30, r16
    2a66:	81 81       	ldd	r24, Z+1	; 0x01
    2a68:	89 83       	std	Y+1, r24	; 0x01
    2a6a:	ae 01       	movw	r20, r28
    2a6c:	4f 5f       	subi	r20, 0xFF	; 255
    2a6e:	5f 4f       	sbci	r21, 0xFF	; 255
    2a70:	61 e0       	ldi	r22, 0x01	; 1
    2a72:	c7 01       	movw	r24, r14
    2a74:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <u8x8_cad_SendData>
    2a78:	0e 5f       	subi	r16, 0xFE	; 254
    2a7a:	1f 4f       	sbci	r17, 0xFF	; 255
    2a7c:	d7 cf       	rjmp	.-82     	; 0x2a2c <u8x8_cad_SendSequence+0x16>
    2a7e:	0f 5f       	subi	r16, 0xFF	; 255
    2a80:	1f 4f       	sbci	r17, 0xFF	; 255
    2a82:	d7 01       	movw	r26, r14
    2a84:	16 96       	adiw	r26, 0x06	; 6
    2a86:	ed 91       	ld	r30, X+
    2a88:	fc 91       	ld	r31, X
    2a8a:	17 97       	sbiw	r26, 0x07	; 7
    2a8c:	20 e0       	ldi	r18, 0x00	; 0
    2a8e:	30 e0       	ldi	r19, 0x00	; 0
    2a90:	40 e0       	ldi	r20, 0x00	; 0
    2a92:	c7 01       	movw	r24, r14
    2a94:	09 95       	icall
    2a96:	ca cf       	rjmp	.-108    	; 0x2a2c <u8x8_cad_SendSequence+0x16>
    2a98:	f8 01       	movw	r30, r16
    2a9a:	41 81       	ldd	r20, Z+1	; 0x01
    2a9c:	49 83       	std	Y+1, r20	; 0x01
    2a9e:	69 e2       	ldi	r22, 0x29	; 41
    2aa0:	c7 01       	movw	r24, r14
    2aa2:	0e 94 14 17 	call	0x2e28	; 0x2e28 <u8x8_gpio_call>
    2aa6:	0e 5f       	subi	r16, 0xFE	; 254
    2aa8:	1f 4f       	sbci	r17, 0xFF	; 255
    2aaa:	c0 cf       	rjmp	.-128    	; 0x2a2c <u8x8_cad_SendSequence+0x16>
    2aac:	0f 90       	pop	r0
    2aae:	df 91       	pop	r29
    2ab0:	cf 91       	pop	r28
    2ab2:	1f 91       	pop	r17
    2ab4:	0f 91       	pop	r16
    2ab6:	ff 90       	pop	r15
    2ab8:	ef 90       	pop	r14
    2aba:	08 95       	ret

00002abc <u8x8_cad_ssd13xx_fast_i2c>:


/* fast version with reduced data start/stops, issue 735 */
uint8_t u8x8_cad_ssd13xx_fast_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    2abc:	ef 92       	push	r14
    2abe:	ff 92       	push	r15
    2ac0:	0f 93       	push	r16
    2ac2:	1f 93       	push	r17
    2ac4:	cf 93       	push	r28
    2ac6:	7c 01       	movw	r14, r24
    2ac8:	c4 2f       	mov	r28, r20
    2aca:	89 01       	movw	r16, r18
  static uint8_t in_transfer = 0;
  uint8_t *p;
  switch(msg)
    2acc:	66 31       	cpi	r22, 0x16	; 22
    2ace:	29 f1       	breq	.+74     	; 0x2b1a <u8x8_cad_ssd13xx_fast_i2c+0x5e>
    2ad0:	30 f4       	brcc	.+12     	; 0x2ade <u8x8_cad_ssd13xx_fast_i2c+0x22>
    2ad2:	64 31       	cpi	r22, 0x14	; 20
    2ad4:	09 f4       	brne	.+2      	; 0x2ad8 <u8x8_cad_ssd13xx_fast_i2c+0x1c>
    2ad6:	42 c0       	rjmp	.+132    	; 0x2b5c <u8x8_cad_ssd13xx_fast_i2c+0xa0>
    2ad8:	65 31       	cpi	r22, 0x15	; 21
    2ada:	49 f0       	breq	.+18     	; 0x2aee <u8x8_cad_ssd13xx_fast_i2c+0x32>
    2adc:	62 c0       	rjmp	.+196    	; 0x2ba2 <u8x8_cad_ssd13xx_fast_i2c+0xe6>
    2ade:	68 31       	cpi	r22, 0x18	; 24
    2ae0:	09 f4       	brne	.+2      	; 0x2ae4 <u8x8_cad_ssd13xx_fast_i2c+0x28>
    2ae2:	50 c0       	rjmp	.+160    	; 0x2b84 <u8x8_cad_ssd13xx_fast_i2c+0xc8>
    2ae4:	f8 f0       	brcs	.+62     	; 0x2b24 <u8x8_cad_ssd13xx_fast_i2c+0x68>
    2ae6:	69 31       	cpi	r22, 0x19	; 25
    2ae8:	09 f4       	brne	.+2      	; 0x2aec <u8x8_cad_ssd13xx_fast_i2c+0x30>
    2aea:	50 c0       	rjmp	.+160    	; 0x2b8c <u8x8_cad_ssd13xx_fast_i2c+0xd0>
    2aec:	5a c0       	rjmp	.+180    	; 0x2ba2 <u8x8_cad_ssd13xx_fast_i2c+0xe6>
  {
    case U8X8_MSG_CAD_SEND_CMD:
      /* improved version, takeover from ld7032 */
      /* assumes, that the args of a command is not longer than 31 bytes */
      /* speed improvement is about 4% compared to the classic version */
      if ( in_transfer != 0 )
    2aee:	80 91 98 05 	lds	r24, 0x0598	; 0x800598 <in_transfer.3644>
    2af2:	88 23       	and	r24, r24
    2af4:	19 f0       	breq	.+6      	; 0x2afc <u8x8_cad_ssd13xx_fast_i2c+0x40>
	 u8x8_byte_EndTransfer(u8x8); 
    2af6:	c7 01       	movw	r24, r14
    2af8:	0e 94 ac 14 	call	0x2958	; 0x2958 <u8x8_byte_EndTransfer>
      
      u8x8_byte_StartTransfer(u8x8);
    2afc:	c7 01       	movw	r24, r14
    2afe:	0e 94 a1 14 	call	0x2942	; 0x2942 <u8x8_byte_StartTransfer>
      u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
    2b02:	60 e0       	ldi	r22, 0x00	; 0
    2b04:	c7 01       	movw	r24, r14
    2b06:	0e 94 91 14 	call	0x2922	; 0x2922 <u8x8_byte_SendByte>
      u8x8_byte_SendByte(u8x8, arg_int);
    2b0a:	6c 2f       	mov	r22, r28
    2b0c:	c7 01       	movw	r24, r14
    2b0e:	0e 94 91 14 	call	0x2922	; 0x2922 <u8x8_byte_SendByte>
      in_transfer = 1;
    2b12:	81 e0       	ldi	r24, 0x01	; 1
    2b14:	80 93 98 05 	sts	0x0598, r24	; 0x800598 <in_transfer.3644>
	//   u8x8_byte_StartTransfer(u8x8);
	//   u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
	//   in_transfer = 1;
	// }
	//u8x8_byte_SendByte(u8x8, arg_int);
      break;
    2b18:	45 c0       	rjmp	.+138    	; 0x2ba4 <u8x8_cad_ssd13xx_fast_i2c+0xe8>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SendByte(u8x8, arg_int);
    2b1a:	64 2f       	mov	r22, r20
    2b1c:	0e 94 91 14 	call	0x2922	; 0x2922 <u8x8_byte_SendByte>
      in_transfer = 0;
      break;
    default:
      return 0;
  }
  return 1;
    2b20:	81 e0       	ldi	r24, 0x01	; 1
	// }
	//u8x8_byte_SendByte(u8x8, arg_int);
      break;
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SendByte(u8x8, arg_int);
      break;      
    2b22:	40 c0       	rjmp	.+128    	; 0x2ba4 <u8x8_cad_ssd13xx_fast_i2c+0xe8>
    case U8X8_MSG_CAD_SEND_DATA:
      if ( in_transfer != 0 )
    2b24:	80 91 98 05 	lds	r24, 0x0598	; 0x800598 <in_transfer.3644>
    2b28:	88 23       	and	r24, r24
    2b2a:	19 f0       	breq	.+6      	; 0x2b32 <u8x8_cad_ssd13xx_fast_i2c+0x76>
	u8x8_byte_EndTransfer(u8x8); 
    2b2c:	c7 01       	movw	r24, r14
    2b2e:	0e 94 ac 14 	call	0x2958	; 0x2958 <u8x8_byte_EndTransfer>
      /* I guess this is related to the size of the Wire buffers in Arduino */
      /* Unfortunately, this can not be handled in the byte level drivers, */
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = arg_ptr;
       while( arg_int > 24 )
    2b32:	c9 31       	cpi	r28, 0x19	; 25
    2b34:	50 f0       	brcs	.+20     	; 0x2b4a <u8x8_cad_ssd13xx_fast_i2c+0x8e>
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
    2b36:	a8 01       	movw	r20, r16
    2b38:	68 e1       	ldi	r22, 0x18	; 24
    2b3a:	c7 01       	movw	r24, r14
    2b3c:	0e 94 b7 14 	call	0x296e	; 0x296e <u8x8_i2c_data_transfer>
	arg_int-=24;
    2b40:	c8 51       	subi	r28, 0x18	; 24
	p+=24;
    2b42:	08 5e       	subi	r16, 0xE8	; 232
    2b44:	1f 4f       	sbci	r17, 0xFF	; 255
      /* I guess this is related to the size of the Wire buffers in Arduino */
      /* Unfortunately, this can not be handled in the byte level drivers, */
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = arg_ptr;
       while( arg_int > 24 )
    2b46:	c9 31       	cpi	r28, 0x19	; 25
    2b48:	b0 f7       	brcc	.-20     	; 0x2b36 <u8x8_cad_ssd13xx_fast_i2c+0x7a>
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
	arg_int-=24;
	p+=24;
      }
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
    2b4a:	a8 01       	movw	r20, r16
    2b4c:	6c 2f       	mov	r22, r28
    2b4e:	c7 01       	movw	r24, r14
    2b50:	0e 94 b7 14 	call	0x296e	; 0x296e <u8x8_i2c_data_transfer>
      in_transfer = 0;
    2b54:	10 92 98 05 	sts	0x0598, r1	; 0x800598 <in_transfer.3644>
      in_transfer = 0;
      break;
    default:
      return 0;
  }
  return 1;
    2b58:	81 e0       	ldi	r24, 0x01	; 1
	arg_int-=24;
	p+=24;
      }
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
      in_transfer = 0;
      break;
    2b5a:	24 c0       	rjmp	.+72     	; 0x2ba4 <u8x8_cad_ssd13xx_fast_i2c+0xe8>
    case U8X8_MSG_CAD_INIT:
      /* apply default i2c adr if required so that the start transfer msg can use this */
      if ( u8x8->i2c_address == 255 )
    2b5c:	dc 01       	movw	r26, r24
    2b5e:	56 96       	adiw	r26, 0x16	; 22
    2b60:	8c 91       	ld	r24, X
    2b62:	56 97       	sbiw	r26, 0x16	; 22
    2b64:	8f 3f       	cpi	r24, 0xFF	; 255
    2b66:	19 f4       	brne	.+6      	; 0x2b6e <u8x8_cad_ssd13xx_fast_i2c+0xb2>
	u8x8->i2c_address = 0x078;
    2b68:	88 e7       	ldi	r24, 0x78	; 120
    2b6a:	56 96       	adiw	r26, 0x16	; 22
    2b6c:	8c 93       	st	X, r24
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
    2b6e:	d7 01       	movw	r26, r14
    2b70:	18 96       	adiw	r26, 0x08	; 8
    2b72:	ed 91       	ld	r30, X+
    2b74:	fc 91       	ld	r31, X
    2b76:	19 97       	sbiw	r26, 0x09	; 9
    2b78:	98 01       	movw	r18, r16
    2b7a:	4c 2f       	mov	r20, r28
    2b7c:	64 e1       	ldi	r22, 0x14	; 20
    2b7e:	c7 01       	movw	r24, r14
    2b80:	09 95       	icall
    2b82:	10 c0       	rjmp	.+32     	; 0x2ba4 <u8x8_cad_ssd13xx_fast_i2c+0xe8>
    case U8X8_MSG_CAD_START_TRANSFER:
      in_transfer = 0;
    2b84:	10 92 98 05 	sts	0x0598, r1	; 0x800598 <in_transfer.3644>
      in_transfer = 0;
      break;
    default:
      return 0;
  }
  return 1;
    2b88:	81 e0       	ldi	r24, 0x01	; 1
      if ( u8x8->i2c_address == 255 )
	u8x8->i2c_address = 0x078;
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
    case U8X8_MSG_CAD_START_TRANSFER:
      in_transfer = 0;
      break;
    2b8a:	0c c0       	rjmp	.+24     	; 0x2ba4 <u8x8_cad_ssd13xx_fast_i2c+0xe8>
    case U8X8_MSG_CAD_END_TRANSFER:
      if ( in_transfer != 0 )
    2b8c:	80 91 98 05 	lds	r24, 0x0598	; 0x800598 <in_transfer.3644>
    2b90:	88 23       	and	r24, r24
    2b92:	19 f0       	breq	.+6      	; 0x2b9a <u8x8_cad_ssd13xx_fast_i2c+0xde>
	u8x8_byte_EndTransfer(u8x8); 
    2b94:	c7 01       	movw	r24, r14
    2b96:	0e 94 ac 14 	call	0x2958	; 0x2958 <u8x8_byte_EndTransfer>
      in_transfer = 0;
    2b9a:	10 92 98 05 	sts	0x0598, r1	; 0x800598 <in_transfer.3644>
      break;
    default:
      return 0;
  }
  return 1;
    2b9e:	81 e0       	ldi	r24, 0x01	; 1
      break;
    case U8X8_MSG_CAD_END_TRANSFER:
      if ( in_transfer != 0 )
	u8x8_byte_EndTransfer(u8x8); 
      in_transfer = 0;
      break;
    2ba0:	01 c0       	rjmp	.+2      	; 0x2ba4 <u8x8_cad_ssd13xx_fast_i2c+0xe8>
    default:
      return 0;
    2ba2:	80 e0       	ldi	r24, 0x00	; 0
  }
  return 1;
}
    2ba4:	cf 91       	pop	r28
    2ba6:	1f 91       	pop	r17
    2ba8:	0f 91       	pop	r16
    2baa:	ff 90       	pop	r15
    2bac:	ef 90       	pop	r14
    2bae:	08 95       	ret

00002bb0 <u8x8_d_helper_display_setup_memory>:
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, mode, NULL);  
}

void u8x8_SetContrast(u8x8_t *u8x8, uint8_t value)
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
    2bb0:	fc 01       	movw	r30, r24
    2bb2:	71 83       	std	Z+1, r23	; 0x01
    2bb4:	60 83       	st	Z, r22
    2bb6:	fb 01       	movw	r30, r22
    2bb8:	22 89       	ldd	r18, Z+18	; 0x12
    2bba:	fc 01       	movw	r30, r24
    2bbc:	24 8b       	std	Z+20, r18	; 0x14
    2bbe:	08 95       	ret

00002bc0 <u8x8_d_helper_display_init>:
    2bc0:	cf 93       	push	r28
    2bc2:	df 93       	push	r29
    2bc4:	ec 01       	movw	r28, r24
    2bc6:	ea 85       	ldd	r30, Y+10	; 0x0a
    2bc8:	fb 85       	ldd	r31, Y+11	; 0x0b
    2bca:	20 e0       	ldi	r18, 0x00	; 0
    2bcc:	30 e0       	ldi	r19, 0x00	; 0
    2bce:	40 e0       	ldi	r20, 0x00	; 0
    2bd0:	68 e2       	ldi	r22, 0x28	; 40
    2bd2:	09 95       	icall
    2bd4:	ee 81       	ldd	r30, Y+6	; 0x06
    2bd6:	ff 81       	ldd	r31, Y+7	; 0x07
    2bd8:	20 e0       	ldi	r18, 0x00	; 0
    2bda:	30 e0       	ldi	r19, 0x00	; 0
    2bdc:	40 e0       	ldi	r20, 0x00	; 0
    2bde:	64 e1       	ldi	r22, 0x14	; 20
    2be0:	ce 01       	movw	r24, r28
    2be2:	09 95       	icall
    2be4:	41 e0       	ldi	r20, 0x01	; 1
    2be6:	6b e4       	ldi	r22, 0x4B	; 75
    2be8:	ce 01       	movw	r24, r28
    2bea:	0e 94 14 17 	call	0x2e28	; 0x2e28 <u8x8_gpio_call>
    2bee:	e8 81       	ld	r30, Y
    2bf0:	f9 81       	ldd	r31, Y+1	; 0x01
    2bf2:	44 81       	ldd	r20, Z+4	; 0x04
    2bf4:	69 e2       	ldi	r22, 0x29	; 41
    2bf6:	ce 01       	movw	r24, r28
    2bf8:	0e 94 14 17 	call	0x2e28	; 0x2e28 <u8x8_gpio_call>
    2bfc:	40 e0       	ldi	r20, 0x00	; 0
    2bfe:	6b e4       	ldi	r22, 0x4B	; 75
    2c00:	ce 01       	movw	r24, r28
    2c02:	0e 94 14 17 	call	0x2e28	; 0x2e28 <u8x8_gpio_call>
    2c06:	e8 81       	ld	r30, Y
    2c08:	f9 81       	ldd	r31, Y+1	; 0x01
    2c0a:	44 81       	ldd	r20, Z+4	; 0x04
    2c0c:	69 e2       	ldi	r22, 0x29	; 41
    2c0e:	ce 01       	movw	r24, r28
    2c10:	0e 94 14 17 	call	0x2e28	; 0x2e28 <u8x8_gpio_call>
    2c14:	41 e0       	ldi	r20, 0x01	; 1
    2c16:	6b e4       	ldi	r22, 0x4B	; 75
    2c18:	ce 01       	movw	r24, r28
    2c1a:	0e 94 14 17 	call	0x2e28	; 0x2e28 <u8x8_gpio_call>
    2c1e:	e8 81       	ld	r30, Y
    2c20:	f9 81       	ldd	r31, Y+1	; 0x01
    2c22:	45 81       	ldd	r20, Z+5	; 0x05
    2c24:	69 e2       	ldi	r22, 0x29	; 41
    2c26:	ce 01       	movw	r24, r28
    2c28:	0e 94 14 17 	call	0x2e28	; 0x2e28 <u8x8_gpio_call>
    2c2c:	df 91       	pop	r29
    2c2e:	cf 91       	pop	r28
    2c30:	08 95       	ret

00002c32 <u8x8_DrawTile>:
    2c32:	0f 93       	push	r16
    2c34:	1f 93       	push	r17
    2c36:	cf 93       	push	r28
    2c38:	df 93       	push	r29
    2c3a:	00 d0       	rcall	.+0      	; 0x2c3c <u8x8_DrawTile+0xa>
    2c3c:	00 d0       	rcall	.+0      	; 0x2c3e <u8x8_DrawTile+0xc>
    2c3e:	1f 92       	push	r1
    2c40:	cd b7       	in	r28, 0x3d	; 61
    2c42:	de b7       	in	r29, 0x3e	; 62
    2c44:	6c 83       	std	Y+4, r22	; 0x04
    2c46:	4d 83       	std	Y+5, r20	; 0x05
    2c48:	2b 83       	std	Y+3, r18	; 0x03
    2c4a:	1a 83       	std	Y+2, r17	; 0x02
    2c4c:	09 83       	std	Y+1, r16	; 0x01
    2c4e:	dc 01       	movw	r26, r24
    2c50:	14 96       	adiw	r26, 0x04	; 4
    2c52:	ed 91       	ld	r30, X+
    2c54:	fc 91       	ld	r31, X
    2c56:	15 97       	sbiw	r26, 0x05	; 5
    2c58:	9e 01       	movw	r18, r28
    2c5a:	2f 5f       	subi	r18, 0xFF	; 255
    2c5c:	3f 4f       	sbci	r19, 0xFF	; 255
    2c5e:	41 e0       	ldi	r20, 0x01	; 1
    2c60:	6f e0       	ldi	r22, 0x0F	; 15
    2c62:	09 95       	icall
    2c64:	0f 90       	pop	r0
    2c66:	0f 90       	pop	r0
    2c68:	0f 90       	pop	r0
    2c6a:	0f 90       	pop	r0
    2c6c:	0f 90       	pop	r0
    2c6e:	df 91       	pop	r29
    2c70:	cf 91       	pop	r28
    2c72:	1f 91       	pop	r17
    2c74:	0f 91       	pop	r16
    2c76:	08 95       	ret

00002c78 <u8x8_SetupMemory>:
    2c78:	dc 01       	movw	r26, r24
    2c7a:	14 96       	adiw	r26, 0x04	; 4
    2c7c:	ed 91       	ld	r30, X+
    2c7e:	fc 91       	ld	r31, X
    2c80:	15 97       	sbiw	r26, 0x05	; 5
    2c82:	20 e0       	ldi	r18, 0x00	; 0
    2c84:	30 e0       	ldi	r19, 0x00	; 0
    2c86:	40 e0       	ldi	r20, 0x00	; 0
    2c88:	69 e0       	ldi	r22, 0x09	; 9
    2c8a:	09 95       	icall
    2c8c:	08 95       	ret

00002c8e <u8x8_InitDisplay>:
    2c8e:	dc 01       	movw	r26, r24
    2c90:	14 96       	adiw	r26, 0x04	; 4
    2c92:	ed 91       	ld	r30, X+
    2c94:	fc 91       	ld	r31, X
    2c96:	15 97       	sbiw	r26, 0x05	; 5
    2c98:	20 e0       	ldi	r18, 0x00	; 0
    2c9a:	30 e0       	ldi	r19, 0x00	; 0
    2c9c:	40 e0       	ldi	r20, 0x00	; 0
    2c9e:	6a e0       	ldi	r22, 0x0A	; 10
    2ca0:	09 95       	icall
    2ca2:	08 95       	ret

00002ca4 <u8x8_SetPowerSave>:
    2ca4:	46 2f       	mov	r20, r22
    2ca6:	dc 01       	movw	r26, r24
    2ca8:	14 96       	adiw	r26, 0x04	; 4
    2caa:	ed 91       	ld	r30, X+
    2cac:	fc 91       	ld	r31, X
    2cae:	15 97       	sbiw	r26, 0x05	; 5
    2cb0:	20 e0       	ldi	r18, 0x00	; 0
    2cb2:	30 e0       	ldi	r19, 0x00	; 0
    2cb4:	6b e0       	ldi	r22, 0x0B	; 11
    2cb6:	09 95       	icall
    2cb8:	08 95       	ret

00002cba <u8x8_RefreshDisplay>:
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
    2cba:	dc 01       	movw	r26, r24
    2cbc:	14 96       	adiw	r26, 0x04	; 4
    2cbe:	ed 91       	ld	r30, X+
    2cc0:	fc 91       	ld	r31, X
    2cc2:	15 97       	sbiw	r26, 0x05	; 5
    2cc4:	20 e0       	ldi	r18, 0x00	; 0
    2cc6:	30 e0       	ldi	r19, 0x00	; 0
    2cc8:	40 e0       	ldi	r20, 0x00	; 0
    2cca:	60 e1       	ldi	r22, 0x10	; 16
    2ccc:	09 95       	icall
    2cce:	08 95       	ret

00002cd0 <u8x8_d_ssd1306_sh1106_generic>:
      break;
    default:
      return 0;
  }
  return 1;
}
    2cd0:	ef 92       	push	r14
    2cd2:	ff 92       	push	r15
    2cd4:	0f 93       	push	r16
    2cd6:	1f 93       	push	r17
    2cd8:	cf 93       	push	r28
    2cda:	df 93       	push	r29
    2cdc:	8c 01       	movw	r16, r24
    2cde:	c4 2f       	mov	r28, r20
    2ce0:	79 01       	movw	r14, r18
    2ce2:	6d 30       	cpi	r22, 0x0D	; 13
    2ce4:	b9 f0       	breq	.+46     	; 0x2d14 <u8x8_d_ssd1306_sh1106_generic+0x44>
    2ce6:	18 f4       	brcc	.+6      	; 0x2cee <u8x8_d_ssd1306_sh1106_generic+0x1e>
    2ce8:	6b 30       	cpi	r22, 0x0B	; 11
    2cea:	31 f0       	breq	.+12     	; 0x2cf8 <u8x8_d_ssd1306_sh1106_generic+0x28>
    2cec:	72 c0       	rjmp	.+228    	; 0x2dd2 <u8x8_d_ssd1306_sh1106_generic+0x102>
    2cee:	6e 30       	cpi	r22, 0x0E	; 14
    2cf0:	69 f1       	breq	.+90     	; 0x2d4c <u8x8_d_ssd1306_sh1106_generic+0x7c>
    2cf2:	6f 30       	cpi	r22, 0x0F	; 15
    2cf4:	d1 f1       	breq	.+116    	; 0x2d6a <u8x8_d_ssd1306_sh1106_generic+0x9a>
    2cf6:	6d c0       	rjmp	.+218    	; 0x2dd2 <u8x8_d_ssd1306_sh1106_generic+0x102>
    2cf8:	41 11       	cpse	r20, r1
    2cfa:	06 c0       	rjmp	.+12     	; 0x2d08 <u8x8_d_ssd1306_sh1106_generic+0x38>
    2cfc:	69 e5       	ldi	r22, 0x59	; 89
    2cfe:	71 e0       	ldi	r23, 0x01	; 1
    2d00:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <u8x8_cad_SendSequence>
    2d04:	81 e0       	ldi	r24, 0x01	; 1
    2d06:	66 c0       	rjmp	.+204    	; 0x2dd4 <u8x8_d_ssd1306_sh1106_generic+0x104>
    2d08:	64 e5       	ldi	r22, 0x54	; 84
    2d0a:	71 e0       	ldi	r23, 0x01	; 1
    2d0c:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <u8x8_cad_SendSequence>
    2d10:	81 e0       	ldi	r24, 0x01	; 1
    2d12:	60 c0       	rjmp	.+192    	; 0x2dd4 <u8x8_d_ssd1306_sh1106_generic+0x104>
    2d14:	41 11       	cpse	r20, r1
    2d16:	0d c0       	rjmp	.+26     	; 0x2d32 <u8x8_d_ssd1306_sh1106_generic+0x62>
    2d18:	6d e4       	ldi	r22, 0x4D	; 77
    2d1a:	71 e0       	ldi	r23, 0x01	; 1
    2d1c:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <u8x8_cad_SendSequence>
    2d20:	d8 01       	movw	r26, r16
    2d22:	ed 91       	ld	r30, X+
    2d24:	fc 91       	ld	r31, X
    2d26:	11 97       	sbiw	r26, 0x01	; 1
    2d28:	82 89       	ldd	r24, Z+18	; 0x12
    2d2a:	54 96       	adiw	r26, 0x14	; 20
    2d2c:	8c 93       	st	X, r24
    2d2e:	81 e0       	ldi	r24, 0x01	; 1
    2d30:	51 c0       	rjmp	.+162    	; 0x2dd4 <u8x8_d_ssd1306_sh1106_generic+0x104>
    2d32:	66 e4       	ldi	r22, 0x46	; 70
    2d34:	71 e0       	ldi	r23, 0x01	; 1
    2d36:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <u8x8_cad_SendSequence>
    2d3a:	d8 01       	movw	r26, r16
    2d3c:	ed 91       	ld	r30, X+
    2d3e:	fc 91       	ld	r31, X
    2d40:	11 97       	sbiw	r26, 0x01	; 1
    2d42:	83 89       	ldd	r24, Z+19	; 0x13
    2d44:	54 96       	adiw	r26, 0x14	; 20
    2d46:	8c 93       	st	X, r24
    2d48:	81 e0       	ldi	r24, 0x01	; 1
    2d4a:	44 c0       	rjmp	.+136    	; 0x2dd4 <u8x8_d_ssd1306_sh1106_generic+0x104>
    2d4c:	0e 94 f5 14 	call	0x29ea	; 0x29ea <u8x8_cad_StartTransfer>
    2d50:	61 e8       	ldi	r22, 0x81	; 129
    2d52:	c8 01       	movw	r24, r16
    2d54:	0e 94 d5 14 	call	0x29aa	; 0x29aa <u8x8_cad_SendCmd>
    2d58:	6c 2f       	mov	r22, r28
    2d5a:	c8 01       	movw	r24, r16
    2d5c:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <u8x8_cad_SendArg>
    2d60:	c8 01       	movw	r24, r16
    2d62:	0e 94 00 15 	call	0x2a00	; 0x2a00 <u8x8_cad_EndTransfer>
    2d66:	81 e0       	ldi	r24, 0x01	; 1
    2d68:	35 c0       	rjmp	.+106    	; 0x2dd4 <u8x8_d_ssd1306_sh1106_generic+0x104>
    2d6a:	0e 94 f5 14 	call	0x29ea	; 0x29ea <u8x8_cad_StartTransfer>
    2d6e:	f7 01       	movw	r30, r14
    2d70:	d3 81       	ldd	r29, Z+3	; 0x03
    2d72:	dd 0f       	add	r29, r29
    2d74:	dd 0f       	add	r29, r29
    2d76:	dd 0f       	add	r29, r29
    2d78:	d8 01       	movw	r26, r16
    2d7a:	54 96       	adiw	r26, 0x14	; 20
    2d7c:	8c 91       	ld	r24, X
    2d7e:	d8 0f       	add	r29, r24
    2d80:	60 e4       	ldi	r22, 0x40	; 64
    2d82:	c8 01       	movw	r24, r16
    2d84:	0e 94 d5 14 	call	0x29aa	; 0x29aa <u8x8_cad_SendCmd>
    2d88:	6d 2f       	mov	r22, r29
    2d8a:	62 95       	swap	r22
    2d8c:	6f 70       	andi	r22, 0x0F	; 15
    2d8e:	60 61       	ori	r22, 0x10	; 16
    2d90:	c8 01       	movw	r24, r16
    2d92:	0e 94 d5 14 	call	0x29aa	; 0x29aa <u8x8_cad_SendCmd>
    2d96:	6d 2f       	mov	r22, r29
    2d98:	6f 70       	andi	r22, 0x0F	; 15
    2d9a:	c8 01       	movw	r24, r16
    2d9c:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <u8x8_cad_SendArg>
    2da0:	f7 01       	movw	r30, r14
    2da2:	64 81       	ldd	r22, Z+4	; 0x04
    2da4:	60 6b       	ori	r22, 0xB0	; 176
    2da6:	c8 01       	movw	r24, r16
    2da8:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <u8x8_cad_SendArg>
    2dac:	d7 01       	movw	r26, r14
    2dae:	4d 91       	ld	r20, X+
    2db0:	5c 91       	ld	r21, X
    2db2:	11 97       	sbiw	r26, 0x01	; 1
    2db4:	12 96       	adiw	r26, 0x02	; 2
    2db6:	6c 91       	ld	r22, X
    2db8:	66 0f       	add	r22, r22
    2dba:	66 0f       	add	r22, r22
    2dbc:	66 0f       	add	r22, r22
    2dbe:	c8 01       	movw	r24, r16
    2dc0:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <u8x8_cad_SendData>
    2dc4:	c1 50       	subi	r28, 0x01	; 1
    2dc6:	91 f7       	brne	.-28     	; 0x2dac <u8x8_d_ssd1306_sh1106_generic+0xdc>
    2dc8:	c8 01       	movw	r24, r16
    2dca:	0e 94 00 15 	call	0x2a00	; 0x2a00 <u8x8_cad_EndTransfer>
    2dce:	81 e0       	ldi	r24, 0x01	; 1
    2dd0:	01 c0       	rjmp	.+2      	; 0x2dd4 <u8x8_d_ssd1306_sh1106_generic+0x104>
    2dd2:	80 e0       	ldi	r24, 0x00	; 0
    2dd4:	df 91       	pop	r29
    2dd6:	cf 91       	pop	r28
    2dd8:	1f 91       	pop	r17
    2dda:	0f 91       	pop	r16
    2ddc:	ff 90       	pop	r15
    2dde:	ef 90       	pop	r14
    2de0:	08 95       	ret

00002de2 <u8x8_d_sh1106_128x64_noname>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_sh1106_128x64_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    2de2:	0f 93       	push	r16
    2de4:	1f 93       	push	r17
    2de6:	cf 93       	push	r28
    2de8:	8c 01       	movw	r16, r24
    2dea:	c6 2f       	mov	r28, r22
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
    2dec:	0e 94 68 16 	call	0x2cd0	; 0x2cd0 <u8x8_d_ssd1306_sh1106_generic>
    2df0:	81 11       	cpse	r24, r1
    2df2:	15 c0       	rjmp	.+42     	; 0x2e1e <u8x8_d_sh1106_128x64_noname+0x3c>
    return 1;
  
  switch(msg)
    2df4:	c9 30       	cpi	r28, 0x09	; 9
    2df6:	61 f0       	breq	.+24     	; 0x2e10 <u8x8_d_sh1106_128x64_noname+0x2e>
    2df8:	ca 30       	cpi	r28, 0x0A	; 10
    2dfa:	91 f4       	brne	.+36     	; 0x2e20 <u8x8_d_sh1106_128x64_noname+0x3e>
  {
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
    2dfc:	c8 01       	movw	r24, r16
    2dfe:	0e 94 e0 15 	call	0x2bc0	; 0x2bc0 <u8x8_d_helper_display_init>
      /* maybe use a better init sequence */
      /* https://www.mikrocontroller.net/topic/431371 */
      /* the new sequence is added in the winstar constructor (see below), this is kept untouched */
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
    2e02:	6e e5       	ldi	r22, 0x5E	; 94
    2e04:	71 e0       	ldi	r23, 0x01	; 1
    2e06:	c8 01       	movw	r24, r16
    2e08:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <u8x8_cad_SendSequence>
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_sh1106_128x64_noname_display_info);
      break;
    default:
      return 0;
  }
  return 1;
    2e0c:	81 e0       	ldi	r24, 0x01	; 1
      u8x8_d_helper_display_init(u8x8);
      /* maybe use a better init sequence */
      /* https://www.mikrocontroller.net/topic/431371 */
      /* the new sequence is added in the winstar constructor (see below), this is kept untouched */
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    2e0e:	08 c0       	rjmp	.+16     	; 0x2e20 <u8x8_d_sh1106_128x64_noname+0x3e>
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_sh1106_128x64_noname_display_info);
    2e10:	6e e2       	ldi	r22, 0x2E	; 46
    2e12:	71 e0       	ldi	r23, 0x01	; 1
    2e14:	c8 01       	movw	r24, r16
    2e16:	0e 94 d8 15 	call	0x2bb0	; 0x2bb0 <u8x8_d_helper_display_setup_memory>
      break;
    default:
      return 0;
  }
  return 1;
    2e1a:	81 e0       	ldi	r24, 0x01	; 1
      /* the new sequence is added in the winstar constructor (see below), this is kept untouched */
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_sh1106_128x64_noname_display_info);
      break;
    2e1c:	01 c0       	rjmp	.+2      	; 0x2e20 <u8x8_d_sh1106_128x64_noname+0x3e>
};

uint8_t u8x8_d_sh1106_128x64_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
    return 1;
    2e1e:	81 e0       	ldi	r24, 0x01	; 1
    default:
      return 0;
  }
  return 1;
    
}
    2e20:	cf 91       	pop	r28
    2e22:	1f 91       	pop	r17
    2e24:	0f 91       	pop	r16
    2e26:	08 95       	ret

00002e28 <u8x8_gpio_call>:
#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
    2e28:	dc 01       	movw	r26, r24
    2e2a:	1a 96       	adiw	r26, 0x0a	; 10
    2e2c:	ed 91       	ld	r30, X+
    2e2e:	fc 91       	ld	r31, X
    2e30:	1b 97       	sbiw	r26, 0x0b	; 11
    2e32:	20 e0       	ldi	r18, 0x00	; 0
    2e34:	30 e0       	ldi	r19, 0x00	; 0
    2e36:	09 95       	icall
    2e38:	08 95       	ret

00002e3a <u8x8_dummy_cb>:
      u8x8_d_helper_display_init(u8x8);
      break;
  }
  /* the null device callback will succeed for all messages */
  return 1;
}
    2e3a:	80 e0       	ldi	r24, 0x00	; 0
    2e3c:	08 95       	ret

00002e3e <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
    2e3e:	fc 01       	movw	r30, r24
    u8x8->display_info = NULL;
    2e40:	11 82       	std	Z+1, r1	; 0x01
    2e42:	10 82       	st	Z, r1
    u8x8->display_cb = u8x8_dummy_cb;
    2e44:	8d e1       	ldi	r24, 0x1D	; 29
    2e46:	97 e1       	ldi	r25, 0x17	; 23
    2e48:	95 83       	std	Z+5, r25	; 0x05
    2e4a:	84 83       	std	Z+4, r24	; 0x04
    u8x8->cad_cb = u8x8_dummy_cb;
    2e4c:	97 83       	std	Z+7, r25	; 0x07
    2e4e:	86 83       	std	Z+6, r24	; 0x06
    u8x8->byte_cb = u8x8_dummy_cb;
    2e50:	91 87       	std	Z+9, r25	; 0x09
    2e52:	80 87       	std	Z+8, r24	; 0x08
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
    2e54:	93 87       	std	Z+11, r25	; 0x0b
    2e56:	82 87       	std	Z+10, r24	; 0x0a
    u8x8->is_font_inverse_mode = 0;
    2e58:	15 8a       	std	Z+21, r1	; 0x15
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
    2e5a:	10 8e       	std	Z+24, r1	; 0x18
    u8x8->bus_clock = 0;		/* issue 769 */
    2e5c:	14 86       	std	Z+12, r1	; 0x0c
    2e5e:	15 86       	std	Z+13, r1	; 0x0d
    2e60:	16 86       	std	Z+14, r1	; 0x0e
    2e62:	17 86       	std	Z+15, r1	; 0x0f
    u8x8->i2c_address = 255;
    2e64:	8f ef       	ldi	r24, 0xFF	; 255
    2e66:	86 8b       	std	Z+22, r24	; 0x16
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
    2e68:	82 8f       	std	Z+26, r24	; 0x1a
    2e6a:	08 95       	ret

00002e6c <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
    2e6c:	af 92       	push	r10
    2e6e:	bf 92       	push	r11
    2e70:	cf 92       	push	r12
    2e72:	df 92       	push	r13
    2e74:	ef 92       	push	r14
    2e76:	ff 92       	push	r15
    2e78:	0f 93       	push	r16
    2e7a:	1f 93       	push	r17
    2e7c:	cf 93       	push	r28
    2e7e:	df 93       	push	r29
    2e80:	ec 01       	movw	r28, r24
    2e82:	5b 01       	movw	r10, r22
    2e84:	6a 01       	movw	r12, r20
    2e86:	79 01       	movw	r14, r18
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
    2e88:	0e 94 1f 17 	call	0x2e3e	; 0x2e3e <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
    2e8c:	bd 82       	std	Y+5, r11	; 0x05
    2e8e:	ac 82       	std	Y+4, r10	; 0x04
  u8x8->cad_cb = cad_cb;
    2e90:	df 82       	std	Y+7, r13	; 0x07
    2e92:	ce 82       	std	Y+6, r12	; 0x06
  u8x8->byte_cb = byte_cb;
    2e94:	f9 86       	std	Y+9, r15	; 0x09
    2e96:	e8 86       	std	Y+8, r14	; 0x08
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
    2e98:	1b 87       	std	Y+11, r17	; 0x0b
    2e9a:	0a 87       	std	Y+10, r16	; 0x0a

  /* setup display info */
  u8x8_SetupMemory(u8x8);
    2e9c:	ce 01       	movw	r24, r28
    2e9e:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <u8x8_SetupMemory>
}
    2ea2:	df 91       	pop	r29
    2ea4:	cf 91       	pop	r28
    2ea6:	1f 91       	pop	r17
    2ea8:	0f 91       	pop	r16
    2eaa:	ff 90       	pop	r15
    2eac:	ef 90       	pop	r14
    2eae:	df 90       	pop	r13
    2eb0:	cf 90       	pop	r12
    2eb2:	bf 90       	pop	r11
    2eb4:	af 90       	pop	r10
    2eb6:	08 95       	ret

00002eb8 <ADC_init>:
 */ 

#include <ADC.h>

void ADC_init(){
	DDRA = 0x00;
    2eb8:	1a ba       	out	0x1a, r1	; 26
	ADMUX = 0x00;
    2eba:	17 b8       	out	0x07, r1	; 7
	ADMUX = (1 << REFS0);
    2ebc:	80 e4       	ldi	r24, 0x40	; 64
    2ebe:	87 b9       	out	0x07, r24	; 7
	ADCSRA = 0x00;
    2ec0:	16 b8       	out	0x06, r1	; 6
	ADCSRA = (1 << ADEN) | (1 << ADPS2);
    2ec2:	84 e8       	ldi	r24, 0x84	; 132
    2ec4:	86 b9       	out	0x06, r24	; 6
    2ec6:	08 95       	ret

00002ec8 <ADC_read>:
}

int ADC_read(unsigned char analog_pin){
	ADMUX = ADMUX | (analog_pin & INPUT_PIN_SET_BITS);
    2ec8:	97 b1       	in	r25, 0x07	; 7
    2eca:	8f 71       	andi	r24, 0x1F	; 31
    2ecc:	98 2b       	or	r25, r24
    2ece:	97 b9       	out	0x07, r25	; 7
	ADCSRA |= (1 << ADSC);
    2ed0:	36 9a       	sbi	0x06, 6	; 6
	while (ADCSRA & (1 << ADSC));
    2ed2:	36 99       	sbic	0x06, 6	; 6
    2ed4:	fe cf       	rjmp	.-4      	; 0x2ed2 <ADC_read+0xa>
	int result = (int) ADCL;
    2ed6:	84 b1       	in	r24, 0x04	; 4
	result = (ADCH << 8) | result;
    2ed8:	25 b1       	in	r18, 0x05	; 5
	return result;
    2eda:	90 e0       	ldi	r25, 0x00	; 0
}
    2edc:	92 2b       	or	r25, r18
    2ede:	08 95       	ret

00002ee0 <I2C_Init>:
}

unsigned char I2C_Read(unsigned char ack){
	if(ack) return I2C_Read_Ack();
	else return I2C_Read_Nack();
}
    2ee0:	11 b8       	out	0x01, r1	; 1
    2ee2:	8f ef       	ldi	r24, 0xFF	; 255
    2ee4:	80 b9       	out	0x00, r24	; 0
    2ee6:	08 95       	ret

00002ee8 <I2C_Start_Wait>:
    2ee8:	24 ea       	ldi	r18, 0xA4	; 164
    2eea:	34 e8       	ldi	r19, 0x84	; 132
    2eec:	44 e9       	ldi	r20, 0x94	; 148
    2eee:	26 bf       	out	0x36, r18	; 54
    2ef0:	06 b6       	in	r0, 0x36	; 54
    2ef2:	07 fe       	sbrs	r0, 7
    2ef4:	fd cf       	rjmp	.-6      	; 0x2ef0 <I2C_Start_Wait+0x8>
    2ef6:	91 b1       	in	r25, 0x01	; 1
    2ef8:	98 7f       	andi	r25, 0xF8	; 248
    2efa:	98 30       	cpi	r25, 0x08	; 8
    2efc:	11 f0       	breq	.+4      	; 0x2f02 <I2C_Start_Wait+0x1a>
    2efe:	90 31       	cpi	r25, 0x10	; 16
    2f00:	b1 f7       	brne	.-20     	; 0x2eee <I2C_Start_Wait+0x6>
    2f02:	83 b9       	out	0x03, r24	; 3
    2f04:	36 bf       	out	0x36, r19	; 54
    2f06:	06 b6       	in	r0, 0x36	; 54
    2f08:	07 fe       	sbrs	r0, 7
    2f0a:	fd cf       	rjmp	.-6      	; 0x2f06 <I2C_Start_Wait+0x1e>
    2f0c:	91 b1       	in	r25, 0x01	; 1
    2f0e:	98 7f       	andi	r25, 0xF8	; 248
    2f10:	90 32       	cpi	r25, 0x20	; 32
    2f12:	11 f0       	breq	.+4      	; 0x2f18 <I2C_Start_Wait+0x30>
    2f14:	98 35       	cpi	r25, 0x58	; 88
    2f16:	29 f4       	brne	.+10     	; 0x2f22 <I2C_Start_Wait+0x3a>
    2f18:	46 bf       	out	0x36, r20	; 54
    2f1a:	06 b6       	in	r0, 0x36	; 54
    2f1c:	04 fc       	sbrc	r0, 4
    2f1e:	fd cf       	rjmp	.-6      	; 0x2f1a <I2C_Start_Wait+0x32>
    2f20:	e6 cf       	rjmp	.-52     	; 0x2eee <I2C_Start_Wait+0x6>
    2f22:	08 95       	ret

00002f24 <I2C_Write>:
    2f24:	83 b9       	out	0x03, r24	; 3
    2f26:	84 e8       	ldi	r24, 0x84	; 132
    2f28:	86 bf       	out	0x36, r24	; 54
    2f2a:	06 b6       	in	r0, 0x36	; 54
    2f2c:	07 fe       	sbrs	r0, 7
    2f2e:	fd cf       	rjmp	.-6      	; 0x2f2a <I2C_Write+0x6>
    2f30:	91 b1       	in	r25, 0x01	; 1
    2f32:	98 7f       	andi	r25, 0xF8	; 248
    2f34:	81 e0       	ldi	r24, 0x01	; 1
    2f36:	98 32       	cpi	r25, 0x28	; 40
    2f38:	09 f0       	breq	.+2      	; 0x2f3c <I2C_Write+0x18>
    2f3a:	80 e0       	ldi	r24, 0x00	; 0
    2f3c:	08 95       	ret

00002f3e <I2C_Stop>:

void I2C_Stop(){
	/* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    2f3e:	84 e9       	ldi	r24, 0x94	; 148
    2f40:	86 bf       	out	0x36, r24	; 54
	
	// wait until stop condition is executed and bus released
	while((TWCR & (1<<TWSTO)));
    2f42:	06 b6       	in	r0, 0x36	; 54
    2f44:	04 fc       	sbrc	r0, 4
    2f46:	fd cf       	rjmp	.-6      	; 0x2f42 <I2C_Stop+0x4>
    2f48:	08 95       	ret

00002f4a <__vector_7>:
 */ 

#include <millis.h>

ISR(TIMER1_COMPA_vect)
{
    2f4a:	1f 92       	push	r1
    2f4c:	0f 92       	push	r0
    2f4e:	0f b6       	in	r0, 0x3f	; 63
    2f50:	0f 92       	push	r0
    2f52:	11 24       	eor	r1, r1
    2f54:	8f 93       	push	r24
    2f56:	9f 93       	push	r25
    2f58:	af 93       	push	r26
    2f5a:	bf 93       	push	r27
	timer1_millis++;
    2f5c:	80 91 9a 05 	lds	r24, 0x059A	; 0x80059a <timer1_millis>
    2f60:	90 91 9b 05 	lds	r25, 0x059B	; 0x80059b <timer1_millis+0x1>
    2f64:	a0 91 9c 05 	lds	r26, 0x059C	; 0x80059c <timer1_millis+0x2>
    2f68:	b0 91 9d 05 	lds	r27, 0x059D	; 0x80059d <timer1_millis+0x3>
    2f6c:	01 96       	adiw	r24, 0x01	; 1
    2f6e:	a1 1d       	adc	r26, r1
    2f70:	b1 1d       	adc	r27, r1
    2f72:	80 93 9a 05 	sts	0x059A, r24	; 0x80059a <timer1_millis>
    2f76:	90 93 9b 05 	sts	0x059B, r25	; 0x80059b <timer1_millis+0x1>
    2f7a:	a0 93 9c 05 	sts	0x059C, r26	; 0x80059c <timer1_millis+0x2>
    2f7e:	b0 93 9d 05 	sts	0x059D, r27	; 0x80059d <timer1_millis+0x3>
}
    2f82:	bf 91       	pop	r27
    2f84:	af 91       	pop	r26
    2f86:	9f 91       	pop	r25
    2f88:	8f 91       	pop	r24
    2f8a:	0f 90       	pop	r0
    2f8c:	0f be       	out	0x3f, r0	; 63
    2f8e:	0f 90       	pop	r0
    2f90:	1f 90       	pop	r1
    2f92:	18 95       	reti

00002f94 <u8x8_byte>:

#ifdef AVR_USE_HW_I2C
#include <I2C.h>

uint8_t u8x8_byte(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    2f94:	0f 93       	push	r16
    2f96:	1f 93       	push	r17
    2f98:	cf 93       	push	r28
    2f9a:	df 93       	push	r29
	uint8_t *data;
	switch(msg){
    2f9c:	68 31       	cpi	r22, 0x18	; 24
    2f9e:	f9 f0       	breq	.+62     	; 0x2fde <u8x8_byte+0x4a>
    2fa0:	28 f4       	brcc	.+10     	; 0x2fac <u8x8_byte+0x18>
    2fa2:	64 31       	cpi	r22, 0x14	; 20
    2fa4:	39 f0       	breq	.+14     	; 0x2fb4 <u8x8_byte+0x20>
    2fa6:	67 31       	cpi	r22, 0x17	; 23
    2fa8:	39 f0       	breq	.+14     	; 0x2fb8 <u8x8_byte+0x24>
    2faa:	23 c0       	rjmp	.+70     	; 0x2ff2 <u8x8_byte+0x5e>
    2fac:	69 31       	cpi	r22, 0x19	; 25
    2fae:	e9 f0       	breq	.+58     	; 0x2fea <u8x8_byte+0x56>
    2fb0:	60 32       	cpi	r22, 0x20	; 32
    2fb2:	f9 f4       	brne	.+62     	; 0x2ff2 <u8x8_byte+0x5e>
			I2C_Stop();
			break;
		default:
			return 0;
	}
	return 1;
    2fb4:	81 e0       	ldi	r24, 0x01	; 1
    2fb6:	20 c0       	rjmp	.+64     	; 0x2ff8 <u8x8_byte+0x64>
{
	uint8_t *data;
	switch(msg){
		case U8X8_MSG_BYTE_SEND:
			data = (uint8_t *)arg_ptr;
			while( arg_int-- )
    2fb8:	8f ef       	ldi	r24, 0xFF	; 255
    2fba:	84 0f       	add	r24, r20
    2fbc:	44 23       	and	r20, r20
    2fbe:	d9 f0       	breq	.+54     	; 0x2ff6 <u8x8_byte+0x62>
    2fc0:	e9 01       	movw	r28, r18
    2fc2:	08 2f       	mov	r16, r24
    2fc4:	10 e0       	ldi	r17, 0x00	; 0
    2fc6:	0f 5f       	subi	r16, 0xFF	; 255
    2fc8:	1f 4f       	sbci	r17, 0xFF	; 255
    2fca:	02 0f       	add	r16, r18
    2fcc:	13 1f       	adc	r17, r19
				I2C_Write(*data++);
    2fce:	89 91       	ld	r24, Y+
    2fd0:	0e 94 92 17 	call	0x2f24	; 0x2f24 <I2C_Write>
{
	uint8_t *data;
	switch(msg){
		case U8X8_MSG_BYTE_SEND:
			data = (uint8_t *)arg_ptr;
			while( arg_int-- )
    2fd4:	0c 17       	cp	r16, r28
    2fd6:	1d 07       	cpc	r17, r29
    2fd8:	d1 f7       	brne	.-12     	; 0x2fce <u8x8_byte+0x3a>
			I2C_Stop();
			break;
		default:
			return 0;
	}
	return 1;
    2fda:	81 e0       	ldi	r24, 0x01	; 1
    2fdc:	0d c0       	rjmp	.+26     	; 0x2ff8 <u8x8_byte+0x64>
		case U8X8_MSG_BYTE_INIT:
			break;
		case U8X8_MSG_BYTE_SET_DC:
			break;
		case U8X8_MSG_BYTE_START_TRANSFER:
			I2C_Start_Wait(u8x8_GetI2CAddress(u8x8)+I2C_WRITE);
    2fde:	fc 01       	movw	r30, r24
    2fe0:	86 89       	ldd	r24, Z+22	; 0x16
    2fe2:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <I2C_Start_Wait>
			I2C_Stop();
			break;
		default:
			return 0;
	}
	return 1;
    2fe6:	81 e0       	ldi	r24, 0x01	; 1
			break;
		case U8X8_MSG_BYTE_SET_DC:
			break;
		case U8X8_MSG_BYTE_START_TRANSFER:
			I2C_Start_Wait(u8x8_GetI2CAddress(u8x8)+I2C_WRITE);
			break;
    2fe8:	07 c0       	rjmp	.+14     	; 0x2ff8 <u8x8_byte+0x64>
		case U8X8_MSG_BYTE_END_TRANSFER:
			I2C_Stop();
    2fea:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <I2C_Stop>
			break;
		default:
			return 0;
	}
	return 1;
    2fee:	81 e0       	ldi	r24, 0x01	; 1
		case U8X8_MSG_BYTE_START_TRANSFER:
			I2C_Start_Wait(u8x8_GetI2CAddress(u8x8)+I2C_WRITE);
			break;
		case U8X8_MSG_BYTE_END_TRANSFER:
			I2C_Stop();
			break;
    2ff0:	03 c0       	rjmp	.+6      	; 0x2ff8 <u8x8_byte+0x64>
		default:
			return 0;
    2ff2:	80 e0       	ldi	r24, 0x00	; 0
    2ff4:	01 c0       	rjmp	.+2      	; 0x2ff8 <u8x8_byte+0x64>
	}
	return 1;
    2ff6:	81 e0       	ldi	r24, 0x01	; 1
}
    2ff8:	df 91       	pop	r29
    2ffa:	cf 91       	pop	r28
    2ffc:	1f 91       	pop	r17
    2ffe:	0f 91       	pop	r16
    3000:	08 95       	ret

00003002 <u8x8_delay>:
#endif

uint8_t u8x8_delay (u8x8_t * u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr) {
	switch(msg) {
    3002:	69 32       	cpi	r22, 0x29	; 41
    3004:	29 f0       	breq	.+10     	; 0x3010 <u8x8_delay+0xe>
    3006:	6a 32       	cpi	r22, 0x2A	; 42
    3008:	a9 f4       	brne	.+42     	; 0x3034 <u8x8_delay+0x32>
		case U8X8_MSG_DELAY_10MICRO: // delay arg_int * 10 micro seconds
			while( arg_int-- ) _delay_us(10);
    300a:	41 11       	cpse	r20, r1
    300c:	04 c0       	rjmp	.+8      	; 0x3016 <u8x8_delay+0x14>
    300e:	12 c0       	rjmp	.+36     	; 0x3034 <u8x8_delay+0x32>
			break;
		case U8X8_MSG_DELAY_MILLI:  // delay arg_int * 1 milli second
			while( arg_int-- ) _delay_ms(1);
    3010:	41 11       	cpse	r20, r1
    3012:	08 c0       	rjmp	.+16     	; 0x3024 <u8x8_delay+0x22>
    3014:	0f c0       	rjmp	.+30     	; 0x3034 <u8x8_delay+0x32>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3016:	85 e3       	ldi	r24, 0x35	; 53
    3018:	8a 95       	dec	r24
    301a:	f1 f7       	brne	.-4      	; 0x3018 <u8x8_delay+0x16>
    301c:	00 00       	nop
    301e:	41 50       	subi	r20, 0x01	; 1
#endif

uint8_t u8x8_delay (u8x8_t * u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr) {
	switch(msg) {
		case U8X8_MSG_DELAY_10MICRO: // delay arg_int * 10 micro seconds
			while( arg_int-- ) _delay_us(10);
    3020:	d1 f7       	brne	.-12     	; 0x3016 <u8x8_delay+0x14>
    3022:	08 c0       	rjmp	.+16     	; 0x3034 <u8x8_delay+0x32>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3024:	8f e9       	ldi	r24, 0x9F	; 159
    3026:	9f e0       	ldi	r25, 0x0F	; 15
    3028:	01 97       	sbiw	r24, 0x01	; 1
    302a:	f1 f7       	brne	.-4      	; 0x3028 <u8x8_delay+0x26>
    302c:	00 c0       	rjmp	.+0      	; 0x302e <u8x8_delay+0x2c>
    302e:	00 00       	nop
    3030:	41 50       	subi	r20, 0x01	; 1
			break;
		case U8X8_MSG_DELAY_MILLI:  // delay arg_int * 1 milli second
			while( arg_int-- ) _delay_ms(1);
    3032:	c1 f7       	brne	.-16     	; 0x3024 <u8x8_delay+0x22>
			break;
		default:
			return 0;
	}
	return 0;
    3034:	80 e0       	ldi	r24, 0x00	; 0
    3036:	08 95       	ret

00003038 <USART_Init>:

char USART_RxChar()									/* Data receiving function */
{
	while (!(UCSRA & (1 << RXC)));					/* Wait until new data receive */
	return(UDR);									/* Get and return received data */
}
    3038:	2a b1       	in	r18, 0x0a	; 10
    303a:	28 61       	ori	r18, 0x18	; 24
    303c:	2a b9       	out	0x0a, r18	; 10
    303e:	20 b5       	in	r18, 0x20	; 32
    3040:	26 68       	ori	r18, 0x86	; 134
    3042:	20 bd       	out	0x20, r18	; 32
    3044:	dc 01       	movw	r26, r24
    3046:	cb 01       	movw	r24, r22
    3048:	88 0f       	add	r24, r24
    304a:	99 1f       	adc	r25, r25
    304c:	aa 1f       	adc	r26, r26
    304e:	bb 1f       	adc	r27, r27
    3050:	88 0f       	add	r24, r24
    3052:	99 1f       	adc	r25, r25
    3054:	aa 1f       	adc	r26, r26
    3056:	bb 1f       	adc	r27, r27
    3058:	9c 01       	movw	r18, r24
    305a:	ad 01       	movw	r20, r26
    305c:	22 0f       	add	r18, r18
    305e:	33 1f       	adc	r19, r19
    3060:	44 1f       	adc	r20, r20
    3062:	55 1f       	adc	r21, r21
    3064:	22 0f       	add	r18, r18
    3066:	33 1f       	adc	r19, r19
    3068:	44 1f       	adc	r20, r20
    306a:	55 1f       	adc	r21, r21
    306c:	60 e0       	ldi	r22, 0x00	; 0
    306e:	74 e2       	ldi	r23, 0x24	; 36
    3070:	84 ef       	ldi	r24, 0xF4	; 244
    3072:	90 e0       	ldi	r25, 0x00	; 0
    3074:	0e 94 96 1a 	call	0x352c	; 0x352c <__udivmodsi4>
    3078:	8f ef       	ldi	r24, 0xFF	; 255
    307a:	82 0f       	add	r24, r18
    307c:	89 b9       	out	0x09, r24	; 9
    307e:	da 01       	movw	r26, r20
    3080:	c9 01       	movw	r24, r18
    3082:	01 97       	sbiw	r24, 0x01	; 1
    3084:	a1 09       	sbc	r26, r1
    3086:	b1 09       	sbc	r27, r1
    3088:	89 2f       	mov	r24, r25
    308a:	9a 2f       	mov	r25, r26
    308c:	ab 2f       	mov	r26, r27
    308e:	bb 27       	eor	r27, r27
    3090:	80 bd       	out	0x20, r24	; 32
    3092:	08 95       	ret

00003094 <USART_TxChar>:

void USART_TxChar(char data)						/* Data transmitting function */
{
	UDR = data;										/* Write data to be transmitting in UDR */
    3094:	8c b9       	out	0x0c, r24	; 12
	while (!(UCSRA & (1<<UDRE)));					/* Wait until data transmit and buffer get empty */
    3096:	5d 9b       	sbis	0x0b, 5	; 11
    3098:	fe cf       	rjmp	.-4      	; 0x3096 <USART_TxChar+0x2>
}
    309a:	08 95       	ret

0000309c <USART_SendString>:

void USART_SendString(char *str)					/* Send string of USART data function */
{
    309c:	cf 93       	push	r28
    309e:	df 93       	push	r29
    30a0:	ec 01       	movw	r28, r24
	int i=0;
	while (str[i]!=0)
    30a2:	88 81       	ld	r24, Y
    30a4:	88 23       	and	r24, r24
    30a6:	31 f0       	breq	.+12     	; 0x30b4 <USART_SendString+0x18>
    30a8:	21 96       	adiw	r28, 0x01	; 1
	{
		USART_TxChar(str[i]);						/* Send each char of string till the NULL */
    30aa:	0e 94 4a 18 	call	0x3094	; 0x3094 <USART_TxChar>
}

void USART_SendString(char *str)					/* Send string of USART data function */
{
	int i=0;
	while (str[i]!=0)
    30ae:	89 91       	ld	r24, Y+
    30b0:	81 11       	cpse	r24, r1
    30b2:	fb cf       	rjmp	.-10     	; 0x30aa <USART_SendString+0xe>
	{
		USART_TxChar(str[i]);						/* Send each char of string till the NULL */
		i++;
	}
    30b4:	df 91       	pop	r29
    30b6:	cf 91       	pop	r28
    30b8:	08 95       	ret

000030ba <OLED_init>:
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};

void OLED_init(){
	u8g2_Setup_sh1106_i2c_128x64_noname_f(&u8g2, U8G2_R0, u8x8_byte, u8x8_delay);
    30ba:	21 e0       	ldi	r18, 0x01	; 1
    30bc:	38 e1       	ldi	r19, 0x18	; 24
    30be:	4a ec       	ldi	r20, 0xCA	; 202
    30c0:	57 e1       	ldi	r21, 0x17	; 23
    30c2:	68 e2       	ldi	r22, 0x28	; 40
    30c4:	71 e0       	ldi	r23, 0x01	; 1
    30c6:	8e eb       	ldi	r24, 0xBE	; 190
    30c8:	95 e0       	ldi	r25, 0x05	; 5
    30ca:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <u8g2_Setup_sh1106_i2c_128x64_noname_f>
	u8g2_SetI2CAddress(&u8g2, OLED_ADDR);
    30ce:	88 e7       	ldi	r24, 0x78	; 120
    30d0:	80 93 d4 05 	sts	0x05D4, r24	; 0x8005d4 <u8g2+0x16>
	u8g2_InitDisplay(&u8g2);
    30d4:	8e eb       	ldi	r24, 0xBE	; 190
    30d6:	95 e0       	ldi	r25, 0x05	; 5
    30d8:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <u8x8_InitDisplay>
	u8g2_SetPowerSave(&u8g2, 0);
    30dc:	60 e0       	ldi	r22, 0x00	; 0
    30de:	8e eb       	ldi	r24, 0xBE	; 190
    30e0:	95 e0       	ldi	r25, 0x05	; 5
    30e2:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <u8x8_SetPowerSave>
    30e6:	08 95       	ret

000030e8 <initialize>:
}

void initialize(){
	DDRA &= ~(1 << PA1); // Pin 1 of Port A as input
    30e8:	d1 98       	cbi	0x1a, 1	; 26
	DDRA &= ~(1 << PA2); // Pin 2 of Port A as input
    30ea:	d2 98       	cbi	0x1a, 2	; 26
	DDRB = 0x00;
    30ec:	17 ba       	out	0x17, r1	; 23
	DDRD = 0x00;
    30ee:	11 ba       	out	0x11, r1	; 17
	ADC_init();
    30f0:	0e 94 5c 17 	call	0x2eb8	; 0x2eb8 <ADC_init>
	I2C_Init();
    30f4:	0e 94 70 17 	call	0x2ee0	; 0x2ee0 <I2C_Init>
	USART_Init(9600);
    30f8:	60 e8       	ldi	r22, 0x80	; 128
    30fa:	75 e2       	ldi	r23, 0x25	; 37
    30fc:	80 e0       	ldi	r24, 0x00	; 0
    30fe:	90 e0       	ldi	r25, 0x00	; 0
    3100:	0e 94 1c 18 	call	0x3038	; 0x3038 <USART_Init>
	OLED_init();
    3104:	0e 94 5d 18 	call	0x30ba	; 0x30ba <OLED_init>
    3108:	08 95       	ret

0000310a <valToStr>:
}

void valToStr(char *result, int x){
    310a:	ef 92       	push	r14
    310c:	ff 92       	push	r15
    310e:	0f 93       	push	r16
    3110:	1f 93       	push	r17
    3112:	cf 93       	push	r28
    3114:	df 93       	push	r29
    3116:	9c 01       	movw	r18, r24
    3118:	cb 01       	movw	r24, r22
	if(x <= 0){
    311a:	18 16       	cp	r1, r24
    311c:	19 06       	cpc	r1, r25
    311e:	34 f0       	brlt	.+12     	; 0x312c <valToStr+0x22>
		result[0] = '0';
    3120:	80 e3       	ldi	r24, 0x30	; 48
    3122:	d9 01       	movw	r26, r18
    3124:	8c 93       	st	X, r24
		result[1] = '\0';
    3126:	11 96       	adiw	r26, 0x01	; 1
    3128:	1c 92       	st	X, r1
		return;
    312a:	40 c0       	rjmp	.+128    	; 0x31ac <valToStr+0xa2>
	}
	if(x > 100){
    312c:	65 36       	cpi	r22, 0x65	; 101
    312e:	71 05       	cpc	r23, r1
    3130:	44 f0       	brlt	.+16     	; 0x3142 <valToStr+0x38>
		result[0] = '1';
    3132:	81 e3       	ldi	r24, 0x31	; 49
    3134:	f9 01       	movw	r30, r18
    3136:	80 83       	st	Z, r24
		result[1] = '0';
    3138:	80 e3       	ldi	r24, 0x30	; 48
    313a:	81 83       	std	Z+1, r24	; 0x01
		result[2] = '0';
    313c:	82 83       	std	Z+2, r24	; 0x02
		result[3] = '\0';
    313e:	13 82       	std	Z+3, r1	; 0x03
		return;
    3140:	35 c0       	rjmp	.+106    	; 0x31ac <valToStr+0xa2>
    3142:	e9 01       	movw	r28, r18
	if(x <= 0){
		result[0] = '0';
		result[1] = '\0';
		return;
	}
	if(x > 100){
    3144:	89 01       	movw	r16, r18
    3146:	e0 e0       	ldi	r30, 0x00	; 0
    3148:	f0 e0       	ldi	r31, 0x00	; 0
		return;
	}
	int k,i=0,j;
	while(x>0){
		k = x%10;
		result[i] = k+'0';
    314a:	0f 2e       	mov	r0, r31
    314c:	fa e0       	ldi	r31, 0x0A	; 10
    314e:	ef 2e       	mov	r14, r31
    3150:	f1 2c       	mov	r15, r1
    3152:	f0 2d       	mov	r31, r0
    3154:	01 c0       	rjmp	.+2      	; 0x3158 <valToStr+0x4e>
		x/=10;
		i++;
    3156:	fa 01       	movw	r30, r20
		return;
	}
	int k,i=0,j;
	while(x>0){
		k = x%10;
		result[i] = k+'0';
    3158:	b7 01       	movw	r22, r14
    315a:	0e 94 82 1a 	call	0x3504	; 0x3504 <__divmodhi4>
    315e:	80 5d       	subi	r24, 0xD0	; 208
    3160:	d8 01       	movw	r26, r16
    3162:	8d 93       	st	X+, r24
    3164:	8d 01       	movw	r16, r26
		x/=10;
    3166:	86 2f       	mov	r24, r22
    3168:	97 2f       	mov	r25, r23
		i++;
    316a:	af 01       	movw	r20, r30
    316c:	4f 5f       	subi	r20, 0xFF	; 255
    316e:	5f 4f       	sbci	r21, 0xFF	; 255
		result[2] = '0';
		result[3] = '\0';
		return;
	}
	int k,i=0,j;
	while(x>0){
    3170:	18 16       	cp	r1, r24
    3172:	19 06       	cpc	r1, r25
    3174:	84 f3       	brlt	.-32     	; 0x3156 <valToStr+0x4c>
		result[i] = k+'0';
		x/=10;
		i++;
	}
	char temp;
	result[i] = '\0';
    3176:	d9 01       	movw	r26, r18
    3178:	a4 0f       	add	r26, r20
    317a:	b5 1f       	adc	r27, r21
    317c:	1c 92       	st	X, r1
	for(j=0;j<i/2;j++){
    317e:	ca 01       	movw	r24, r20
    3180:	99 23       	and	r25, r25
    3182:	0c f4       	brge	.+2      	; 0x3186 <valToStr+0x7c>
    3184:	01 96       	adiw	r24, 0x01	; 1
    3186:	ac 01       	movw	r20, r24
    3188:	55 95       	asr	r21
    318a:	47 95       	ror	r20
    318c:	14 16       	cp	r1, r20
    318e:	15 06       	cpc	r1, r21
    3190:	6c f4       	brge	.+26     	; 0x31ac <valToStr+0xa2>
    3192:	31 96       	adiw	r30, 0x01	; 1
    3194:	e2 0f       	add	r30, r18
    3196:	f3 1f       	adc	r31, r19
    3198:	42 0f       	add	r20, r18
    319a:	53 1f       	adc	r21, r19
    319c:	d9 01       	movw	r26, r18
		temp = result[j];
    319e:	89 91       	ld	r24, Y+
		result[j]= result[i-1-j];
    31a0:	92 91       	ld	r25, -Z
    31a2:	9d 93       	st	X+, r25
		result[i-1-j] = temp;
    31a4:	80 83       	st	Z, r24
		x/=10;
		i++;
	}
	char temp;
	result[i] = '\0';
	for(j=0;j<i/2;j++){
    31a6:	c4 17       	cp	r28, r20
    31a8:	d5 07       	cpc	r29, r21
    31aa:	c9 f7       	brne	.-14     	; 0x319e <valToStr+0x94>
		temp = result[j];
		result[j]= result[i-1-j];
		result[i-1-j] = temp;
	}
}
    31ac:	df 91       	pop	r29
    31ae:	cf 91       	pop	r28
    31b0:	1f 91       	pop	r17
    31b2:	0f 91       	pop	r16
    31b4:	ff 90       	pop	r15
    31b6:	ef 90       	pop	r14
    31b8:	08 95       	ret

000031ba <main>:


int main (void)
{
    31ba:	cf 93       	push	r28
    31bc:	df 93       	push	r29
    31be:	cd b7       	in	r28, 0x3d	; 61
    31c0:	de b7       	in	r29, 0x3e	; 62
    31c2:	c2 5e       	subi	r28, 0xE2	; 226
    31c4:	d1 09       	sbc	r29, r1
    31c6:	0f b6       	in	r0, 0x3f	; 63
    31c8:	f8 94       	cli
    31ca:	de bf       	out	0x3e, r29	; 62
    31cc:	0f be       	out	0x3f, r0	; 63
    31ce:	cd bf       	out	0x3d, r28	; 61
	initialize();
    31d0:	0e 94 74 18 	call	0x30e8	; 0x30e8 <initialize>

	unsigned char mode = 0, show_QR = 0;
	unsigned char fromB, fromD;
	
	fromD = PIND;
    31d4:	80 b3       	in	r24, 0x10	; 16
	mode = fromD & 0x80;
    31d6:	80 78       	andi	r24, 0x80	; 128
    31d8:	58 2e       	mov	r5, r24
				if(!spo2 || !hr){
					u8g2_ClearBuffer(&u8g2);
					u8g2_DrawXBMP(&u8g2, 0, 0, 128, 64, OXYMETER_PROMPT);
					u8g2_SendBuffer(&u8g2);
				} else {
					char fohr[100]="HR: ";
    31da:	0f 2e       	mov	r0, r31
    31dc:	f5 e6       	ldi	r31, 0x65	; 101
    31de:	2f 2e       	mov	r2, r31
    31e0:	31 2c       	mov	r3, r1
    31e2:	f0 2d       	mov	r31, r0
    31e4:	2c 0e       	add	r2, r28
    31e6:	3d 1e       	adc	r3, r29
    31e8:	85 e0       	ldi	r24, 0x05	; 5
    31ea:	28 0e       	add	r2, r24
    31ec:	31 1c       	adc	r3, r1
					char ohr[10];
					valToStr(ohr,hr);
    31ee:	5e 01       	movw	r10, r28
    31f0:	93 ed       	ldi	r25, 0xD3	; 211
    31f2:	a9 0e       	add	r10, r25
    31f4:	b1 1c       	adc	r11, r1
					strcat(ohr," bpm");
					strcat(fohr,ohr);
					u8g2_DrawStr(&u8g2, 16, 12, fohr);
					char output[10];
					char final[100] = "SPO2: ";
    31f6:	fe 01       	movw	r30, r28
    31f8:	38 96       	adiw	r30, 0x08	; 8
    31fa:	c3 52       	subi	r28, 0x23	; 35
    31fc:	df 4f       	sbci	r29, 0xFF	; 255
    31fe:	f9 83       	std	Y+1, r31	; 0x01
    3200:	e8 83       	st	Y, r30
    3202:	cd 5d       	subi	r28, 0xDD	; 221
    3204:	d0 40       	sbci	r29, 0x00	; 0
					valToStr(output,spo2);
    3206:	6e 01       	movw	r12, r28
    3208:	f9 ec       	ldi	r31, 0xC9	; 201
    320a:	cf 0e       	add	r12, r31
    320c:	d1 1c       	adc	r13, r1
					strcat(output," %");
    320e:	0f 2e       	mov	r0, r31
    3210:	f0 e2       	ldi	r31, 0x20	; 32
    3212:	8f 2e       	mov	r8, r31
    3214:	f5 e2       	ldi	r31, 0x25	; 37
    3216:	9f 2e       	mov	r9, r31
    3218:	f0 2d       	mov	r31, r0
					u8g2_DrawXBMP(&u8g2, 0, 0, 128, 64, OXYMETER_PROMPT);
					u8g2_SendBuffer(&u8g2);
				} else {
					char fohr[100]="HR: ";
					char ohr[10];
					valToStr(ohr,hr);
    321a:	c1 52       	subi	r28, 0x21	; 33
    321c:	df 4f       	sbci	r29, 0xFF	; 255
    321e:	a8 82       	st	Y, r10
    3220:	cf 5d       	subi	r28, 0xDF	; 223
    3222:	d0 40       	sbci	r29, 0x00	; 0
    3224:	c0 52       	subi	r28, 0x20	; 32
    3226:	df 4f       	sbci	r29, 0xFF	; 255
    3228:	b8 82       	st	Y, r11
    322a:	c0 5e       	subi	r28, 0xE0	; 224
    322c:	d0 40       	sbci	r29, 0x00	; 0
					strcat(ohr," bpm");
					strcat(fohr,ohr);
					u8g2_DrawStr(&u8g2, 16, 12, fohr);
					char output[10];
					char final[100] = "SPO2: ";
					valToStr(output,spo2);
    322e:	cf 51       	subi	r28, 0x1F	; 31
    3230:	df 4f       	sbci	r29, 0xFF	; 255
    3232:	c8 82       	st	Y, r12
    3234:	c1 5e       	subi	r28, 0xE1	; 225
    3236:	d0 40       	sbci	r29, 0x00	; 0
    3238:	ce 51       	subi	r28, 0x1E	; 30
    323a:	df 4f       	sbci	r29, 0xFF	; 255
    323c:	d8 82       	st	Y, r13
    323e:	c2 5e       	subi	r28, 0xE2	; 226
    3240:	d0 40       	sbci	r29, 0x00	; 0
    3242:	58 c0       	rjmp	.+176    	; 0x32f4 <main+0x13a>
	fromD = PIND;
	mode = fromD & 0x80;
	
	while(1){
		while (!mode) {
			fromD = PIND;
    3244:	80 b3       	in	r24, 0x10	; 16
			mode = fromD & 0x80;
    3246:	80 78       	andi	r24, 0x80	; 128
    3248:	58 2e       	mov	r5, r24
			
			unsigned char LO_neg = PINA & (1 << PA1);
    324a:	89 b3       	in	r24, 0x19	; 25
			unsigned char LO_pos = PINA & (1 << PA2);
    324c:	99 b3       	in	r25, 0x19	; 25
			
			if(LO_neg || LO_pos){
    324e:	81 fd       	sbrc	r24, 1
    3250:	02 c0       	rjmp	.+4      	; 0x3256 <main+0x9c>
    3252:	92 ff       	sbrs	r25, 2
    3254:	1b c0       	rjmp	.+54     	; 0x328c <main+0xd2>
				u8g2_ClearBuffer(&u8g2);
    3256:	8e eb       	ldi	r24, 0xBE	; 190
    3258:	95 e0       	ldi	r25, 0x05	; 5
    325a:	0e 94 ba 0c 	call	0x1974	; 0x1974 <u8g2_ClearBuffer>
				u8g2_DrawXBMP(&u8g2, 0, 0, 128, 64, ECG_PROMPT);
    325e:	0f 2e       	mov	r0, r31
    3260:	ff e1       	ldi	r31, 0x1F	; 31
    3262:	ef 2e       	mov	r14, r31
    3264:	ff e0       	ldi	r31, 0x0F	; 15
    3266:	ff 2e       	mov	r15, r31
    3268:	f0 2d       	mov	r31, r0
    326a:	00 e4       	ldi	r16, 0x40	; 64
    326c:	10 e0       	ldi	r17, 0x00	; 0
    326e:	20 e8       	ldi	r18, 0x80	; 128
    3270:	30 e0       	ldi	r19, 0x00	; 0
    3272:	40 e0       	ldi	r20, 0x00	; 0
    3274:	50 e0       	ldi	r21, 0x00	; 0
    3276:	60 e0       	ldi	r22, 0x00	; 0
    3278:	70 e0       	ldi	r23, 0x00	; 0
    327a:	8e eb       	ldi	r24, 0xBE	; 190
    327c:	95 e0       	ldi	r25, 0x05	; 5
    327e:	0e 94 24 0c 	call	0x1848	; 0x1848 <u8g2_DrawXBMP>
				u8g2_SendBuffer(&u8g2);
    3282:	8e eb       	ldi	r24, 0xBE	; 190
    3284:	95 e0       	ldi	r25, 0x05	; 5
    3286:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <u8g2_SendBuffer>
    328a:	34 c0       	rjmp	.+104    	; 0x32f4 <main+0x13a>
			} else {
				u8g2_ClearBuffer(&u8g2);
    328c:	8e eb       	ldi	r24, 0xBE	; 190
    328e:	95 e0       	ldi	r25, 0x05	; 5
    3290:	0e 94 ba 0c 	call	0x1974	; 0x1974 <u8g2_ClearBuffer>
				for (int x = 0; x < 128; x+=4) {
					unsigned char y = ADC_read(0);
    3294:	80 e0       	ldi	r24, 0x00	; 0
    3296:	0e 94 64 17 	call	0x2ec8	; 0x2ec8 <ADC_read>
    329a:	48 2e       	mov	r4, r24
				u8g2_ClearBuffer(&u8g2);
				u8g2_DrawXBMP(&u8g2, 0, 0, 128, 64, ECG_PROMPT);
				u8g2_SendBuffer(&u8g2);
			} else {
				u8g2_ClearBuffer(&u8g2);
				for (int x = 0; x < 128; x+=4) {
    329c:	e1 2c       	mov	r14, r1
    329e:	f1 2c       	mov	r15, r1
					unsigned char y = ADC_read(0);
					if (x > 0) {
						u8g2_DrawLine(&u8g2, x - 4, 63 - last_y, x, 63 - y);
    32a0:	0f 2e       	mov	r0, r31
    32a2:	ff e3       	ldi	r31, 0x3F	; 63
    32a4:	6f 2e       	mov	r6, r31
    32a6:	71 2c       	mov	r7, r1
    32a8:	f0 2d       	mov	r31, r0
    32aa:	17 c0       	rjmp	.+46     	; 0x32da <main+0x120>
				u8g2_DrawXBMP(&u8g2, 0, 0, 128, 64, ECG_PROMPT);
				u8g2_SendBuffer(&u8g2);
			} else {
				u8g2_ClearBuffer(&u8g2);
				for (int x = 0; x < 128; x+=4) {
					unsigned char y = ADC_read(0);
    32ac:	80 e0       	ldi	r24, 0x00	; 0
    32ae:	0e 94 64 17 	call	0x2ec8	; 0x2ec8 <ADC_read>
    32b2:	48 2e       	mov	r4, r24
					if (x > 0) {
    32b4:	1e 14       	cp	r1, r14
    32b6:	1f 04       	cpc	r1, r15
    32b8:	84 f4       	brge	.+32     	; 0x32da <main+0x120>
						u8g2_DrawLine(&u8g2, x - 4, 63 - last_y, x, 63 - y);
    32ba:	83 01       	movw	r16, r6
    32bc:	08 1b       	sub	r16, r24
    32be:	11 09       	sbc	r17, r1
    32c0:	80 91 99 05 	lds	r24, 0x0599	; 0x800599 <last_y>
    32c4:	a3 01       	movw	r20, r6
    32c6:	48 1b       	sub	r20, r24
    32c8:	51 09       	sbc	r21, r1
    32ca:	97 01       	movw	r18, r14
    32cc:	b7 01       	movw	r22, r14
    32ce:	64 50       	subi	r22, 0x04	; 4
    32d0:	71 09       	sbc	r23, r1
    32d2:	8e eb       	ldi	r24, 0xBE	; 190
    32d4:	95 e0       	ldi	r25, 0x05	; 5
    32d6:	0e 94 43 12 	call	0x2486	; 0x2486 <u8g2_DrawLine>
					}
					last_y = y;
    32da:	40 92 99 05 	sts	0x0599, r4	; 0x800599 <last_y>
				u8g2_ClearBuffer(&u8g2);
				u8g2_DrawXBMP(&u8g2, 0, 0, 128, 64, ECG_PROMPT);
				u8g2_SendBuffer(&u8g2);
			} else {
				u8g2_ClearBuffer(&u8g2);
				for (int x = 0; x < 128; x+=4) {
    32de:	84 e0       	ldi	r24, 0x04	; 4
    32e0:	e8 0e       	add	r14, r24
    32e2:	f1 1c       	adc	r15, r1
    32e4:	90 e8       	ldi	r25, 0x80	; 128
    32e6:	e9 16       	cp	r14, r25
    32e8:	f1 04       	cpc	r15, r1
    32ea:	01 f7       	brne	.-64     	; 0x32ac <main+0xf2>
					if (x > 0) {
						u8g2_DrawLine(&u8g2, x - 4, 63 - last_y, x, 63 - y);
					}
					last_y = y;
				}
				u8g2_SendBuffer(&u8g2);
    32ec:	8e eb       	ldi	r24, 0xBE	; 190
    32ee:	95 e0       	ldi	r25, 0x05	; 5
    32f0:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <u8g2_SendBuffer>
	
	fromD = PIND;
	mode = fromD & 0x80;
	
	while(1){
		while (!mode) {
    32f4:	55 20       	and	r5, r5
    32f6:	09 f4       	brne	.+2      	; 0x32fa <main+0x140>
    32f8:	a5 cf       	rjmp	.-182    	; 0x3244 <main+0x8a>
				if(!spo2 || !hr){
					u8g2_ClearBuffer(&u8g2);
					u8g2_DrawXBMP(&u8g2, 0, 0, 128, 64, OXYMETER_PROMPT);
					u8g2_SendBuffer(&u8g2);
				} else {
					char fohr[100]="HR: ";
    32fa:	0f 2e       	mov	r0, r31
    32fc:	ff e5       	ldi	r31, 0x5F	; 95
    32fe:	7f 2e       	mov	r7, r31
    3300:	f0 2d       	mov	r31, r0
					valToStr(ohr,hr);
					strcat(ohr," bpm");
					strcat(fohr,ohr);
					u8g2_DrawStr(&u8g2, 16, 12, fohr);
					char output[10];
					char final[100] = "SPO2: ";
    3302:	0f 2e       	mov	r0, r31
    3304:	fd e5       	ldi	r31, 0x5D	; 93
    3306:	6f 2e       	mov	r6, r31
    3308:	f0 2d       	mov	r31, r0
				u8g2_SendBuffer(&u8g2);
			}
		}
		
		while(mode){
			fromB = PINB;
    330a:	06 b3       	in	r16, 0x16	; 22
			fromD = PIND;
    330c:	10 b3       	in	r17, 0x10	; 16
			show_QR = fromB & 0x80;
			mode = fromD & 0x80;
    330e:	e1 2f       	mov	r30, r17
    3310:	e0 78       	andi	r30, 0x80	; 128
    3312:	5e 2e       	mov	r5, r30
			
			if(show_QR){
    3314:	00 23       	and	r16, r16
    3316:	dc f4       	brge	.+54     	; 0x334e <main+0x194>
				u8g2_ClearBuffer(&u8g2);
    3318:	8e eb       	ldi	r24, 0xBE	; 190
    331a:	95 e0       	ldi	r25, 0x05	; 5
    331c:	0e 94 ba 0c 	call	0x1974	; 0x1974 <u8g2_ClearBuffer>
				u8g2_DrawXBMP(&u8g2, 32, 0, 64, 64, QR_CODE);
    3320:	0f 2e       	mov	r0, r31
    3322:	ff e1       	ldi	r31, 0x1F	; 31
    3324:	ef 2e       	mov	r14, r31
    3326:	fd e0       	ldi	r31, 0x0D	; 13
    3328:	ff 2e       	mov	r15, r31
    332a:	f0 2d       	mov	r31, r0
    332c:	00 e4       	ldi	r16, 0x40	; 64
    332e:	10 e0       	ldi	r17, 0x00	; 0
    3330:	20 e4       	ldi	r18, 0x40	; 64
    3332:	30 e0       	ldi	r19, 0x00	; 0
    3334:	40 e0       	ldi	r20, 0x00	; 0
    3336:	50 e0       	ldi	r21, 0x00	; 0
    3338:	60 e2       	ldi	r22, 0x20	; 32
    333a:	70 e0       	ldi	r23, 0x00	; 0
    333c:	8e eb       	ldi	r24, 0xBE	; 190
    333e:	95 e0       	ldi	r25, 0x05	; 5
    3340:	0e 94 24 0c 	call	0x1848	; 0x1848 <u8g2_DrawXBMP>
				u8g2_SendBuffer(&u8g2);
    3344:	8e eb       	ldi	r24, 0xBE	; 190
    3346:	95 e0       	ldi	r25, 0x05	; 5
    3348:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <u8g2_SendBuffer>
    334c:	c4 c0       	rjmp	.+392    	; 0x34d6 <main+0x31c>
			} else {
				u8g2_ClearBuffer(&u8g2);
    334e:	8e eb       	ldi	r24, 0xBE	; 190
    3350:	95 e0       	ldi	r25, 0x05	; 5
    3352:	0e 94 ba 0c 	call	0x1974	; 0x1974 <u8g2_ClearBuffer>
				u8g2_SetFont(&u8g2, u8g2_font_helvB12_tf);
    3356:	64 e5       	ldi	r22, 0x54	; 84
    3358:	70 e0       	ldi	r23, 0x00	; 0
    335a:	8e eb       	ldi	r24, 0xBE	; 190
    335c:	95 e0       	ldi	r25, 0x05	; 5
    335e:	0e 94 29 11 	call	0x2252	; 0x2252 <u8g2_SetFont>
				u8g2_SetFontPosTop(&u8g2);
    3362:	8e eb       	ldi	r24, 0xBE	; 190
    3364:	95 e0       	ldi	r25, 0x05	; 5
    3366:	0e 94 21 11 	call	0x2242	; 0x2242 <u8g2_SetFontPosTop>
				int spo2 = fromB & 0x7F;
    336a:	0f 77       	andi	r16, 0x7F	; 127
    336c:	e0 2e       	mov	r14, r16
    336e:	f1 2c       	mov	r15, r1
				int hr = fromD & 0x7C;
				if(!spo2 || !hr){
    3370:	e1 14       	cp	r14, r1
    3372:	f1 04       	cpc	r15, r1
    3374:	31 f0       	breq	.+12     	; 0x3382 <main+0x1c8>
			} else {
				u8g2_ClearBuffer(&u8g2);
				u8g2_SetFont(&u8g2, u8g2_font_helvB12_tf);
				u8g2_SetFontPosTop(&u8g2);
				int spo2 = fromB & 0x7F;
				int hr = fromD & 0x7C;
    3376:	1c 77       	andi	r17, 0x7C	; 124
    3378:	61 2f       	mov	r22, r17
    337a:	70 e0       	ldi	r23, 0x00	; 0
				if(!spo2 || !hr){
    337c:	61 15       	cp	r22, r1
    337e:	71 05       	cpc	r23, r1
    3380:	d9 f4       	brne	.+54     	; 0x33b8 <main+0x1fe>
					u8g2_ClearBuffer(&u8g2);
    3382:	8e eb       	ldi	r24, 0xBE	; 190
    3384:	95 e0       	ldi	r25, 0x05	; 5
    3386:	0e 94 ba 0c 	call	0x1974	; 0x1974 <u8g2_ClearBuffer>
					u8g2_DrawXBMP(&u8g2, 0, 0, 128, 64, OXYMETER_PROMPT);
    338a:	0f 2e       	mov	r0, r31
    338c:	ff e1       	ldi	r31, 0x1F	; 31
    338e:	ef 2e       	mov	r14, r31
    3390:	f3 e1       	ldi	r31, 0x13	; 19
    3392:	ff 2e       	mov	r15, r31
    3394:	f0 2d       	mov	r31, r0
    3396:	00 e4       	ldi	r16, 0x40	; 64
    3398:	10 e0       	ldi	r17, 0x00	; 0
    339a:	20 e8       	ldi	r18, 0x80	; 128
    339c:	30 e0       	ldi	r19, 0x00	; 0
    339e:	40 e0       	ldi	r20, 0x00	; 0
    33a0:	50 e0       	ldi	r21, 0x00	; 0
    33a2:	60 e0       	ldi	r22, 0x00	; 0
    33a4:	70 e0       	ldi	r23, 0x00	; 0
    33a6:	8e eb       	ldi	r24, 0xBE	; 190
    33a8:	95 e0       	ldi	r25, 0x05	; 5
    33aa:	0e 94 24 0c 	call	0x1848	; 0x1848 <u8g2_DrawXBMP>
					u8g2_SendBuffer(&u8g2);
    33ae:	8e eb       	ldi	r24, 0xBE	; 190
    33b0:	95 e0       	ldi	r25, 0x05	; 5
    33b2:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <u8g2_SendBuffer>
    33b6:	8f c0       	rjmp	.+286    	; 0x34d6 <main+0x31c>
				} else {
					char fohr[100]="HR: ";
    33b8:	85 e0       	ldi	r24, 0x05	; 5
    33ba:	e0 e6       	ldi	r30, 0x60	; 96
    33bc:	f0 e0       	ldi	r31, 0x00	; 0
    33be:	de 01       	movw	r26, r28
    33c0:	ab 59       	subi	r26, 0x9B	; 155
    33c2:	bf 4f       	sbci	r27, 0xFF	; 255
    33c4:	01 90       	ld	r0, Z+
    33c6:	0d 92       	st	X+, r0
    33c8:	8a 95       	dec	r24
    33ca:	e1 f7       	brne	.-8      	; 0x33c4 <main+0x20a>
    33cc:	f1 01       	movw	r30, r2
    33ce:	87 2d       	mov	r24, r7
    33d0:	11 92       	st	Z+, r1
    33d2:	8a 95       	dec	r24
    33d4:	e9 f7       	brne	.-6      	; 0x33d0 <main+0x216>
					char ohr[10];
					valToStr(ohr,hr);
    33d6:	c1 52       	subi	r28, 0x21	; 33
    33d8:	df 4f       	sbci	r29, 0xFF	; 255
    33da:	88 81       	ld	r24, Y
    33dc:	cf 5d       	subi	r28, 0xDF	; 223
    33de:	d0 40       	sbci	r29, 0x00	; 0
    33e0:	c0 52       	subi	r28, 0x20	; 32
    33e2:	df 4f       	sbci	r29, 0xFF	; 255
    33e4:	98 81       	ld	r25, Y
    33e6:	c0 5e       	subi	r28, 0xE0	; 224
    33e8:	d0 40       	sbci	r29, 0x00	; 0
    33ea:	0e 94 85 18 	call	0x310a	; 0x310a <valToStr>
					strcat(ohr," bpm");
    33ee:	d5 01       	movw	r26, r10
    33f0:	0d 90       	ld	r0, X+
    33f2:	00 20       	and	r0, r0
    33f4:	e9 f7       	brne	.-6      	; 0x33f0 <main+0x236>
    33f6:	11 97       	sbiw	r26, 0x01	; 1
    33f8:	85 e0       	ldi	r24, 0x05	; 5
    33fa:	e3 e9       	ldi	r30, 0x93	; 147
    33fc:	f1 e0       	ldi	r31, 0x01	; 1
    33fe:	01 90       	ld	r0, Z+
    3400:	0d 92       	st	X+, r0
    3402:	8a 95       	dec	r24
    3404:	e1 f7       	brne	.-8      	; 0x33fe <main+0x244>
					strcat(fohr,ohr);
    3406:	c1 52       	subi	r28, 0x21	; 33
    3408:	df 4f       	sbci	r29, 0xFF	; 255
    340a:	68 81       	ld	r22, Y
    340c:	cf 5d       	subi	r28, 0xDF	; 223
    340e:	d0 40       	sbci	r29, 0x00	; 0
    3410:	c0 52       	subi	r28, 0x20	; 32
    3412:	df 4f       	sbci	r29, 0xFF	; 255
    3414:	78 81       	ld	r23, Y
    3416:	c0 5e       	subi	r28, 0xE0	; 224
    3418:	d0 40       	sbci	r29, 0x00	; 0
    341a:	ce 01       	movw	r24, r28
    341c:	8b 59       	subi	r24, 0x9B	; 155
    341e:	9f 4f       	sbci	r25, 0xFF	; 255
    3420:	0e 94 bf 1a 	call	0x357e	; 0x357e <strcat>
					u8g2_DrawStr(&u8g2, 16, 12, fohr);
    3424:	9e 01       	movw	r18, r28
    3426:	2b 59       	subi	r18, 0x9B	; 155
    3428:	3f 4f       	sbci	r19, 0xFF	; 255
    342a:	4c e0       	ldi	r20, 0x0C	; 12
    342c:	50 e0       	ldi	r21, 0x00	; 0
    342e:	60 e1       	ldi	r22, 0x10	; 16
    3430:	70 e0       	ldi	r23, 0x00	; 0
    3432:	8e eb       	ldi	r24, 0xBE	; 190
    3434:	95 e0       	ldi	r25, 0x05	; 5
    3436:	0e 94 cb 10 	call	0x2196	; 0x2196 <u8g2_DrawStr>
					char output[10];
					char final[100] = "SPO2: ";
    343a:	87 e0       	ldi	r24, 0x07	; 7
    343c:	e4 ec       	ldi	r30, 0xC4	; 196
    343e:	f0 e0       	ldi	r31, 0x00	; 0
    3440:	de 01       	movw	r26, r28
    3442:	11 96       	adiw	r26, 0x01	; 1
    3444:	01 90       	ld	r0, Z+
    3446:	0d 92       	st	X+, r0
    3448:	8a 95       	dec	r24
    344a:	e1 f7       	brne	.-8      	; 0x3444 <main+0x28a>
    344c:	c3 52       	subi	r28, 0x23	; 35
    344e:	df 4f       	sbci	r29, 0xFF	; 255
    3450:	e8 81       	ld	r30, Y
    3452:	f9 81       	ldd	r31, Y+1	; 0x01
    3454:	cd 5d       	subi	r28, 0xDD	; 221
    3456:	d0 40       	sbci	r29, 0x00	; 0
    3458:	86 2d       	mov	r24, r6
    345a:	11 92       	st	Z+, r1
    345c:	8a 95       	dec	r24
    345e:	e9 f7       	brne	.-6      	; 0x345a <main+0x2a0>
					valToStr(output,spo2);
    3460:	b7 01       	movw	r22, r14
    3462:	cf 51       	subi	r28, 0x1F	; 31
    3464:	df 4f       	sbci	r29, 0xFF	; 255
    3466:	88 81       	ld	r24, Y
    3468:	c1 5e       	subi	r28, 0xE1	; 225
    346a:	d0 40       	sbci	r29, 0x00	; 0
    346c:	ce 51       	subi	r28, 0x1E	; 30
    346e:	df 4f       	sbci	r29, 0xFF	; 255
    3470:	98 81       	ld	r25, Y
    3472:	c2 5e       	subi	r28, 0xE2	; 226
    3474:	d0 40       	sbci	r29, 0x00	; 0
    3476:	0e 94 85 18 	call	0x310a	; 0x310a <valToStr>
					strcat(output," %");
    347a:	f6 01       	movw	r30, r12
    347c:	01 90       	ld	r0, Z+
    347e:	00 20       	and	r0, r0
    3480:	e9 f7       	brne	.-6      	; 0x347c <main+0x2c2>
    3482:	31 97       	sbiw	r30, 0x01	; 1
    3484:	91 82       	std	Z+1, r9	; 0x01
    3486:	80 82       	st	Z, r8
    3488:	12 82       	std	Z+2, r1	; 0x02
					strcat(final,output);
    348a:	cf 51       	subi	r28, 0x1F	; 31
    348c:	df 4f       	sbci	r29, 0xFF	; 255
    348e:	68 81       	ld	r22, Y
    3490:	c1 5e       	subi	r28, 0xE1	; 225
    3492:	d0 40       	sbci	r29, 0x00	; 0
    3494:	ce 51       	subi	r28, 0x1E	; 30
    3496:	df 4f       	sbci	r29, 0xFF	; 255
    3498:	78 81       	ld	r23, Y
    349a:	c2 5e       	subi	r28, 0xE2	; 226
    349c:	d0 40       	sbci	r29, 0x00	; 0
    349e:	ce 01       	movw	r24, r28
    34a0:	01 96       	adiw	r24, 0x01	; 1
    34a2:	0e 94 bf 1a 	call	0x357e	; 0x357e <strcat>
					u8g2_DrawStr(&u8g2, 16, 36, final);
    34a6:	9e 01       	movw	r18, r28
    34a8:	2f 5f       	subi	r18, 0xFF	; 255
    34aa:	3f 4f       	sbci	r19, 0xFF	; 255
    34ac:	44 e2       	ldi	r20, 0x24	; 36
    34ae:	50 e0       	ldi	r21, 0x00	; 0
    34b0:	60 e1       	ldi	r22, 0x10	; 16
    34b2:	70 e0       	ldi	r23, 0x00	; 0
    34b4:	8e eb       	ldi	r24, 0xBE	; 190
    34b6:	95 e0       	ldi	r25, 0x05	; 5
    34b8:	0e 94 cb 10 	call	0x2196	; 0x2196 <u8g2_DrawStr>
					u8g2_SendBuffer(&u8g2);
    34bc:	8e eb       	ldi	r24, 0xBE	; 190
    34be:	95 e0       	ldi	r25, 0x05	; 5
    34c0:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <u8g2_SendBuffer>
					
					USART_SendString(fohr);
    34c4:	ce 01       	movw	r24, r28
    34c6:	8b 59       	subi	r24, 0x9B	; 155
    34c8:	9f 4f       	sbci	r25, 0xFF	; 255
    34ca:	0e 94 4e 18 	call	0x309c	; 0x309c <USART_SendString>
					USART_SendString(final);
    34ce:	ce 01       	movw	r24, r28
    34d0:	01 96       	adiw	r24, 0x01	; 1
    34d2:	0e 94 4e 18 	call	0x309c	; 0x309c <USART_SendString>
				}
				u8g2_SendBuffer(&u8g2);
			}
		}
		
		while(mode){
    34d6:	51 10       	cpse	r5, r1
    34d8:	18 cf       	rjmp	.-464    	; 0x330a <main+0x150>
    34da:	0c cf       	rjmp	.-488    	; 0x32f4 <main+0x13a>

000034dc <__udivmodhi4>:
    34dc:	aa 1b       	sub	r26, r26
    34de:	bb 1b       	sub	r27, r27
    34e0:	51 e1       	ldi	r21, 0x11	; 17
    34e2:	07 c0       	rjmp	.+14     	; 0x34f2 <__udivmodhi4_ep>

000034e4 <__udivmodhi4_loop>:
    34e4:	aa 1f       	adc	r26, r26
    34e6:	bb 1f       	adc	r27, r27
    34e8:	a6 17       	cp	r26, r22
    34ea:	b7 07       	cpc	r27, r23
    34ec:	10 f0       	brcs	.+4      	; 0x34f2 <__udivmodhi4_ep>
    34ee:	a6 1b       	sub	r26, r22
    34f0:	b7 0b       	sbc	r27, r23

000034f2 <__udivmodhi4_ep>:
    34f2:	88 1f       	adc	r24, r24
    34f4:	99 1f       	adc	r25, r25
    34f6:	5a 95       	dec	r21
    34f8:	a9 f7       	brne	.-22     	; 0x34e4 <__udivmodhi4_loop>
    34fa:	80 95       	com	r24
    34fc:	90 95       	com	r25
    34fe:	bc 01       	movw	r22, r24
    3500:	cd 01       	movw	r24, r26
    3502:	08 95       	ret

00003504 <__divmodhi4>:
    3504:	97 fb       	bst	r25, 7
    3506:	07 2e       	mov	r0, r23
    3508:	16 f4       	brtc	.+4      	; 0x350e <__divmodhi4+0xa>
    350a:	00 94       	com	r0
    350c:	07 d0       	rcall	.+14     	; 0x351c <__divmodhi4_neg1>
    350e:	77 fd       	sbrc	r23, 7
    3510:	09 d0       	rcall	.+18     	; 0x3524 <__divmodhi4_neg2>
    3512:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <__udivmodhi4>
    3516:	07 fc       	sbrc	r0, 7
    3518:	05 d0       	rcall	.+10     	; 0x3524 <__divmodhi4_neg2>
    351a:	3e f4       	brtc	.+14     	; 0x352a <__divmodhi4_exit>

0000351c <__divmodhi4_neg1>:
    351c:	90 95       	com	r25
    351e:	81 95       	neg	r24
    3520:	9f 4f       	sbci	r25, 0xFF	; 255
    3522:	08 95       	ret

00003524 <__divmodhi4_neg2>:
    3524:	70 95       	com	r23
    3526:	61 95       	neg	r22
    3528:	7f 4f       	sbci	r23, 0xFF	; 255

0000352a <__divmodhi4_exit>:
    352a:	08 95       	ret

0000352c <__udivmodsi4>:
    352c:	a1 e2       	ldi	r26, 0x21	; 33
    352e:	1a 2e       	mov	r1, r26
    3530:	aa 1b       	sub	r26, r26
    3532:	bb 1b       	sub	r27, r27
    3534:	fd 01       	movw	r30, r26
    3536:	0d c0       	rjmp	.+26     	; 0x3552 <__udivmodsi4_ep>

00003538 <__udivmodsi4_loop>:
    3538:	aa 1f       	adc	r26, r26
    353a:	bb 1f       	adc	r27, r27
    353c:	ee 1f       	adc	r30, r30
    353e:	ff 1f       	adc	r31, r31
    3540:	a2 17       	cp	r26, r18
    3542:	b3 07       	cpc	r27, r19
    3544:	e4 07       	cpc	r30, r20
    3546:	f5 07       	cpc	r31, r21
    3548:	20 f0       	brcs	.+8      	; 0x3552 <__udivmodsi4_ep>
    354a:	a2 1b       	sub	r26, r18
    354c:	b3 0b       	sbc	r27, r19
    354e:	e4 0b       	sbc	r30, r20
    3550:	f5 0b       	sbc	r31, r21

00003552 <__udivmodsi4_ep>:
    3552:	66 1f       	adc	r22, r22
    3554:	77 1f       	adc	r23, r23
    3556:	88 1f       	adc	r24, r24
    3558:	99 1f       	adc	r25, r25
    355a:	1a 94       	dec	r1
    355c:	69 f7       	brne	.-38     	; 0x3538 <__udivmodsi4_loop>
    355e:	60 95       	com	r22
    3560:	70 95       	com	r23
    3562:	80 95       	com	r24
    3564:	90 95       	com	r25
    3566:	9b 01       	movw	r18, r22
    3568:	ac 01       	movw	r20, r24
    356a:	bd 01       	movw	r22, r26
    356c:	cf 01       	movw	r24, r30
    356e:	08 95       	ret

00003570 <memset>:
    3570:	dc 01       	movw	r26, r24
    3572:	01 c0       	rjmp	.+2      	; 0x3576 <memset+0x6>
    3574:	6d 93       	st	X+, r22
    3576:	41 50       	subi	r20, 0x01	; 1
    3578:	50 40       	sbci	r21, 0x00	; 0
    357a:	e0 f7       	brcc	.-8      	; 0x3574 <memset+0x4>
    357c:	08 95       	ret

0000357e <strcat>:
    357e:	fb 01       	movw	r30, r22
    3580:	dc 01       	movw	r26, r24
    3582:	0d 90       	ld	r0, X+
    3584:	00 20       	and	r0, r0
    3586:	e9 f7       	brne	.-6      	; 0x3582 <strcat+0x4>
    3588:	11 97       	sbiw	r26, 0x01	; 1
    358a:	01 90       	ld	r0, Z+
    358c:	0d 92       	st	X+, r0
    358e:	00 20       	and	r0, r0
    3590:	e1 f7       	brne	.-8      	; 0x358a <strcat+0xc>
    3592:	08 95       	ret

00003594 <_exit>:
    3594:	f8 94       	cli

00003596 <__stop_program>:
    3596:	ff cf       	rjmp	.-2      	; 0x3596 <__stop_program>
